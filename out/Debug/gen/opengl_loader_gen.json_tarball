{"src/dawn/native/opengl/OpenGLFunctionsBase_autogen.cpp": "\n#include \"dawn/native/opengl/OpenGLFunctionsBase_autogen.h\"\n\nnamespace dawn::native::opengl {\n\ntemplate<typename T>\nMaybeError OpenGLFunctionsBase::LoadProc(GetProcAddress getProc, T* memberProc, const char* name) {\n    *memberProc = reinterpret_cast<T>(getProc(name));\n    if (DAWN_UNLIKELY(memberProc == nullptr)) {\n        return DAWN_INTERNAL_ERROR(std::string(\"Couldn't load GL proc: \") + name);\n    }\n    return {};\n}\n\nMaybeError OpenGLFunctionsBase::LoadOpenGLESProcs(GetProcAddress getProc, int majorVersion, int minorVersion) {\n    // OpenGL ES 2.0\n    if (majorVersion > 2 || (majorVersion == 2 && minorVersion >= 0)) {\n        DAWN_TRY(LoadProc(getProc, &ActiveTexture, \"glActiveTexture\"));\n        DAWN_TRY(LoadProc(getProc, &AttachShader, \"glAttachShader\"));\n        DAWN_TRY(LoadProc(getProc, &BindAttribLocation, \"glBindAttribLocation\"));\n        DAWN_TRY(LoadProc(getProc, &BindBuffer, \"glBindBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &BindFramebuffer, \"glBindFramebuffer\"));\n        DAWN_TRY(LoadProc(getProc, &BindRenderbuffer, \"glBindRenderbuffer\"));\n        DAWN_TRY(LoadProc(getProc, &BindTexture, \"glBindTexture\"));\n        DAWN_TRY(LoadProc(getProc, &BlendColor, \"glBlendColor\"));\n        DAWN_TRY(LoadProc(getProc, &BlendEquation, \"glBlendEquation\"));\n        DAWN_TRY(LoadProc(getProc, &BlendEquationSeparate, \"glBlendEquationSeparate\"));\n        DAWN_TRY(LoadProc(getProc, &BlendFunc, \"glBlendFunc\"));\n        DAWN_TRY(LoadProc(getProc, &BlendFuncSeparate, \"glBlendFuncSeparate\"));\n        DAWN_TRY(LoadProc(getProc, &BufferData, \"glBufferData\"));\n        DAWN_TRY(LoadProc(getProc, &BufferSubData, \"glBufferSubData\"));\n        DAWN_TRY(LoadProc(getProc, &CheckFramebufferStatus, \"glCheckFramebufferStatus\"));\n        DAWN_TRY(LoadProc(getProc, &Clear, \"glClear\"));\n        DAWN_TRY(LoadProc(getProc, &ClearColor, \"glClearColor\"));\n        DAWN_TRY(LoadProc(getProc, &ClearDepthf, \"glClearDepthf\"));\n        DAWN_TRY(LoadProc(getProc, &ClearStencil, \"glClearStencil\"));\n        DAWN_TRY(LoadProc(getProc, &ColorMask, \"glColorMask\"));\n        DAWN_TRY(LoadProc(getProc, &CompileShader, \"glCompileShader\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTexImage2D, \"glCompressedTexImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTexSubImage2D, \"glCompressedTexSubImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &CopyTexImage2D, \"glCopyTexImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &CopyTexSubImage2D, \"glCopyTexSubImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &CreateProgram, \"glCreateProgram\"));\n        DAWN_TRY(LoadProc(getProc, &CreateShader, \"glCreateShader\"));\n        DAWN_TRY(LoadProc(getProc, &CullFace, \"glCullFace\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteBuffers, \"glDeleteBuffers\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteFramebuffers, \"glDeleteFramebuffers\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteProgram, \"glDeleteProgram\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteRenderbuffers, \"glDeleteRenderbuffers\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteShader, \"glDeleteShader\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteTextures, \"glDeleteTextures\"));\n        DAWN_TRY(LoadProc(getProc, &DepthFunc, \"glDepthFunc\"));\n        DAWN_TRY(LoadProc(getProc, &DepthMask, \"glDepthMask\"));\n        DAWN_TRY(LoadProc(getProc, &DepthRangef, \"glDepthRangef\"));\n        DAWN_TRY(LoadProc(getProc, &DetachShader, \"glDetachShader\"));\n        DAWN_TRY(LoadProc(getProc, &Disable, \"glDisable\"));\n        DAWN_TRY(LoadProc(getProc, &DisableVertexAttribArray, \"glDisableVertexAttribArray\"));\n        DAWN_TRY(LoadProc(getProc, &DrawArrays, \"glDrawArrays\"));\n        DAWN_TRY(LoadProc(getProc, &DrawElements, \"glDrawElements\"));\n        DAWN_TRY(LoadProc(getProc, &Enable, \"glEnable\"));\n        DAWN_TRY(LoadProc(getProc, &EnableVertexAttribArray, \"glEnableVertexAttribArray\"));\n        DAWN_TRY(LoadProc(getProc, &Finish, \"glFinish\"));\n        DAWN_TRY(LoadProc(getProc, &Flush, \"glFlush\"));\n        DAWN_TRY(LoadProc(getProc, &FramebufferRenderbuffer, \"glFramebufferRenderbuffer\"));\n        DAWN_TRY(LoadProc(getProc, &FramebufferTexture2D, \"glFramebufferTexture2D\"));\n        DAWN_TRY(LoadProc(getProc, &FrontFace, \"glFrontFace\"));\n        DAWN_TRY(LoadProc(getProc, &GenBuffers, \"glGenBuffers\"));\n        DAWN_TRY(LoadProc(getProc, &GenerateMipmap, \"glGenerateMipmap\"));\n        DAWN_TRY(LoadProc(getProc, &GenFramebuffers, \"glGenFramebuffers\"));\n        DAWN_TRY(LoadProc(getProc, &GenRenderbuffers, \"glGenRenderbuffers\"));\n        DAWN_TRY(LoadProc(getProc, &GenTextures, \"glGenTextures\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveAttrib, \"glGetActiveAttrib\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveUniform, \"glGetActiveUniform\"));\n        DAWN_TRY(LoadProc(getProc, &GetAttachedShaders, \"glGetAttachedShaders\"));\n        DAWN_TRY(LoadProc(getProc, &GetAttribLocation, \"glGetAttribLocation\"));\n        DAWN_TRY(LoadProc(getProc, &GetBooleanv, \"glGetBooleanv\"));\n        DAWN_TRY(LoadProc(getProc, &GetBufferParameteriv, \"glGetBufferParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetError, \"glGetError\"));\n        DAWN_TRY(LoadProc(getProc, &GetFloatv, \"glGetFloatv\"));\n        DAWN_TRY(LoadProc(getProc, &GetFramebufferAttachmentParameteriv, \"glGetFramebufferAttachmentParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetIntegerv, \"glGetIntegerv\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramiv, \"glGetProgramiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramInfoLog, \"glGetProgramInfoLog\"));\n        DAWN_TRY(LoadProc(getProc, &GetRenderbufferParameteriv, \"glGetRenderbufferParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetShaderiv, \"glGetShaderiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetShaderInfoLog, \"glGetShaderInfoLog\"));\n        DAWN_TRY(LoadProc(getProc, &GetShaderPrecisionFormat, \"glGetShaderPrecisionFormat\"));\n        DAWN_TRY(LoadProc(getProc, &GetShaderSource, \"glGetShaderSource\"));\n        DAWN_TRY(LoadProc(getProc, &GetString, \"glGetString\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexParameterfv, \"glGetTexParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexParameteriv, \"glGetTexParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformfv, \"glGetUniformfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformiv, \"glGetUniformiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformLocation, \"glGetUniformLocation\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexAttribfv, \"glGetVertexAttribfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexAttribiv, \"glGetVertexAttribiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexAttribPointerv, \"glGetVertexAttribPointerv\"));\n        DAWN_TRY(LoadProc(getProc, &Hint, \"glHint\"));\n        DAWN_TRY(LoadProc(getProc, &IsBuffer, \"glIsBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &IsEnabled, \"glIsEnabled\"));\n        DAWN_TRY(LoadProc(getProc, &IsFramebuffer, \"glIsFramebuffer\"));\n        DAWN_TRY(LoadProc(getProc, &IsProgram, \"glIsProgram\"));\n        DAWN_TRY(LoadProc(getProc, &IsRenderbuffer, \"glIsRenderbuffer\"));\n        DAWN_TRY(LoadProc(getProc, &IsShader, \"glIsShader\"));\n        DAWN_TRY(LoadProc(getProc, &IsTexture, \"glIsTexture\"));\n        DAWN_TRY(LoadProc(getProc, &LineWidth, \"glLineWidth\"));\n        DAWN_TRY(LoadProc(getProc, &LinkProgram, \"glLinkProgram\"));\n        DAWN_TRY(LoadProc(getProc, &PixelStorei, \"glPixelStorei\"));\n        DAWN_TRY(LoadProc(getProc, &PolygonOffset, \"glPolygonOffset\"));\n        DAWN_TRY(LoadProc(getProc, &ReadPixels, \"glReadPixels\"));\n        DAWN_TRY(LoadProc(getProc, &ReleaseShaderCompiler, \"glReleaseShaderCompiler\"));\n        DAWN_TRY(LoadProc(getProc, &RenderbufferStorage, \"glRenderbufferStorage\"));\n        DAWN_TRY(LoadProc(getProc, &SampleCoverage, \"glSampleCoverage\"));\n        DAWN_TRY(LoadProc(getProc, &Scissor, \"glScissor\"));\n        DAWN_TRY(LoadProc(getProc, &ShaderBinary, \"glShaderBinary\"));\n        DAWN_TRY(LoadProc(getProc, &ShaderSource, \"glShaderSource\"));\n        DAWN_TRY(LoadProc(getProc, &StencilFunc, \"glStencilFunc\"));\n        DAWN_TRY(LoadProc(getProc, &StencilFuncSeparate, \"glStencilFuncSeparate\"));\n        DAWN_TRY(LoadProc(getProc, &StencilMask, \"glStencilMask\"));\n        DAWN_TRY(LoadProc(getProc, &StencilMaskSeparate, \"glStencilMaskSeparate\"));\n        DAWN_TRY(LoadProc(getProc, &StencilOp, \"glStencilOp\"));\n        DAWN_TRY(LoadProc(getProc, &StencilOpSeparate, \"glStencilOpSeparate\"));\n        DAWN_TRY(LoadProc(getProc, &TexImage2D, \"glTexImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &TexParameterf, \"glTexParameterf\"));\n        DAWN_TRY(LoadProc(getProc, &TexParameterfv, \"glTexParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &TexParameteri, \"glTexParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &TexParameteriv, \"glTexParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &TexSubImage2D, \"glTexSubImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1f, \"glUniform1f\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1fv, \"glUniform1fv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1i, \"glUniform1i\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1iv, \"glUniform1iv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2f, \"glUniform2f\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2fv, \"glUniform2fv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2i, \"glUniform2i\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2iv, \"glUniform2iv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3f, \"glUniform3f\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3fv, \"glUniform3fv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3i, \"glUniform3i\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3iv, \"glUniform3iv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4f, \"glUniform4f\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4fv, \"glUniform4fv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4i, \"glUniform4i\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4iv, \"glUniform4iv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix2fv, \"glUniformMatrix2fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix3fv, \"glUniformMatrix3fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix4fv, \"glUniformMatrix4fv\"));\n        DAWN_TRY(LoadProc(getProc, &UseProgram, \"glUseProgram\"));\n        DAWN_TRY(LoadProc(getProc, &ValidateProgram, \"glValidateProgram\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib1f, \"glVertexAttrib1f\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib1fv, \"glVertexAttrib1fv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib2f, \"glVertexAttrib2f\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib2fv, \"glVertexAttrib2fv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib3f, \"glVertexAttrib3f\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib3fv, \"glVertexAttrib3fv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4f, \"glVertexAttrib4f\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4fv, \"glVertexAttrib4fv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribPointer, \"glVertexAttribPointer\"));\n        DAWN_TRY(LoadProc(getProc, &Viewport, \"glViewport\"));\n    }\n\n    // OpenGL ES 3.0\n    if (majorVersion > 3 || (majorVersion == 3 && minorVersion >= 0)) {\n        DAWN_TRY(LoadProc(getProc, &ReadBuffer, \"glReadBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &DrawRangeElements, \"glDrawRangeElements\"));\n        DAWN_TRY(LoadProc(getProc, &TexImage3D, \"glTexImage3D\"));\n        DAWN_TRY(LoadProc(getProc, &TexSubImage3D, \"glTexSubImage3D\"));\n        DAWN_TRY(LoadProc(getProc, &CopyTexSubImage3D, \"glCopyTexSubImage3D\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTexImage3D, \"glCompressedTexImage3D\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTexSubImage3D, \"glCompressedTexSubImage3D\"));\n        DAWN_TRY(LoadProc(getProc, &GenQueries, \"glGenQueries\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteQueries, \"glDeleteQueries\"));\n        DAWN_TRY(LoadProc(getProc, &IsQuery, \"glIsQuery\"));\n        DAWN_TRY(LoadProc(getProc, &BeginQuery, \"glBeginQuery\"));\n        DAWN_TRY(LoadProc(getProc, &EndQuery, \"glEndQuery\"));\n        DAWN_TRY(LoadProc(getProc, &GetQueryiv, \"glGetQueryiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetQueryObjectuiv, \"glGetQueryObjectuiv\"));\n        DAWN_TRY(LoadProc(getProc, &UnmapBuffer, \"glUnmapBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &GetBufferPointerv, \"glGetBufferPointerv\"));\n        DAWN_TRY(LoadProc(getProc, &DrawBuffers, \"glDrawBuffers\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix2x3fv, \"glUniformMatrix2x3fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix3x2fv, \"glUniformMatrix3x2fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix2x4fv, \"glUniformMatrix2x4fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix4x2fv, \"glUniformMatrix4x2fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix3x4fv, \"glUniformMatrix3x4fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix4x3fv, \"glUniformMatrix4x3fv\"));\n        DAWN_TRY(LoadProc(getProc, &BlitFramebuffer, \"glBlitFramebuffer\"));\n        DAWN_TRY(LoadProc(getProc, &RenderbufferStorageMultisample, \"glRenderbufferStorageMultisample\"));\n        DAWN_TRY(LoadProc(getProc, &FramebufferTextureLayer, \"glFramebufferTextureLayer\"));\n        DAWN_TRY(LoadProc(getProc, &MapBufferRange, \"glMapBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &FlushMappedBufferRange, \"glFlushMappedBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &BindVertexArray, \"glBindVertexArray\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteVertexArrays, \"glDeleteVertexArrays\"));\n        DAWN_TRY(LoadProc(getProc, &GenVertexArrays, \"glGenVertexArrays\"));\n        DAWN_TRY(LoadProc(getProc, &IsVertexArray, \"glIsVertexArray\"));\n        DAWN_TRY(LoadProc(getProc, &GetIntegeri_v, \"glGetIntegeri_v\"));\n        DAWN_TRY(LoadProc(getProc, &BeginTransformFeedback, \"glBeginTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &EndTransformFeedback, \"glEndTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &BindBufferRange, \"glBindBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &BindBufferBase, \"glBindBufferBase\"));\n        DAWN_TRY(LoadProc(getProc, &TransformFeedbackVaryings, \"glTransformFeedbackVaryings\"));\n        DAWN_TRY(LoadProc(getProc, &GetTransformFeedbackVarying, \"glGetTransformFeedbackVarying\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribIPointer, \"glVertexAttribIPointer\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexAttribIiv, \"glGetVertexAttribIiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexAttribIuiv, \"glGetVertexAttribIuiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI4i, \"glVertexAttribI4i\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI4ui, \"glVertexAttribI4ui\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI4iv, \"glVertexAttribI4iv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI4uiv, \"glVertexAttribI4uiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformuiv, \"glGetUniformuiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetFragDataLocation, \"glGetFragDataLocation\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1ui, \"glUniform1ui\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2ui, \"glUniform2ui\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3ui, \"glUniform3ui\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4ui, \"glUniform4ui\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1uiv, \"glUniform1uiv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2uiv, \"glUniform2uiv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3uiv, \"glUniform3uiv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4uiv, \"glUniform4uiv\"));\n        DAWN_TRY(LoadProc(getProc, &ClearBufferiv, \"glClearBufferiv\"));\n        DAWN_TRY(LoadProc(getProc, &ClearBufferuiv, \"glClearBufferuiv\"));\n        DAWN_TRY(LoadProc(getProc, &ClearBufferfv, \"glClearBufferfv\"));\n        DAWN_TRY(LoadProc(getProc, &ClearBufferfi, \"glClearBufferfi\"));\n        DAWN_TRY(LoadProc(getProc, &GetStringi, \"glGetStringi\"));\n        DAWN_TRY(LoadProc(getProc, &CopyBufferSubData, \"glCopyBufferSubData\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformIndices, \"glGetUniformIndices\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveUniformsiv, \"glGetActiveUniformsiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformBlockIndex, \"glGetUniformBlockIndex\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveUniformBlockiv, \"glGetActiveUniformBlockiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveUniformBlockName, \"glGetActiveUniformBlockName\"));\n        DAWN_TRY(LoadProc(getProc, &UniformBlockBinding, \"glUniformBlockBinding\"));\n        DAWN_TRY(LoadProc(getProc, &DrawArraysInstanced, \"glDrawArraysInstanced\"));\n        DAWN_TRY(LoadProc(getProc, &DrawElementsInstanced, \"glDrawElementsInstanced\"));\n        DAWN_TRY(LoadProc(getProc, &FenceSync, \"glFenceSync\"));\n        DAWN_TRY(LoadProc(getProc, &IsSync, \"glIsSync\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteSync, \"glDeleteSync\"));\n        DAWN_TRY(LoadProc(getProc, &ClientWaitSync, \"glClientWaitSync\"));\n        DAWN_TRY(LoadProc(getProc, &WaitSync, \"glWaitSync\"));\n        DAWN_TRY(LoadProc(getProc, &GetInteger64v, \"glGetInteger64v\"));\n        DAWN_TRY(LoadProc(getProc, &GetSynciv, \"glGetSynciv\"));\n        DAWN_TRY(LoadProc(getProc, &GetInteger64i_v, \"glGetInteger64i_v\"));\n        DAWN_TRY(LoadProc(getProc, &GetBufferParameteri64v, \"glGetBufferParameteri64v\"));\n        DAWN_TRY(LoadProc(getProc, &GenSamplers, \"glGenSamplers\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteSamplers, \"glDeleteSamplers\"));\n        DAWN_TRY(LoadProc(getProc, &IsSampler, \"glIsSampler\"));\n        DAWN_TRY(LoadProc(getProc, &BindSampler, \"glBindSampler\"));\n        DAWN_TRY(LoadProc(getProc, &SamplerParameteri, \"glSamplerParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &SamplerParameteriv, \"glSamplerParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &SamplerParameterf, \"glSamplerParameterf\"));\n        DAWN_TRY(LoadProc(getProc, &SamplerParameterfv, \"glSamplerParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetSamplerParameteriv, \"glGetSamplerParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetSamplerParameterfv, \"glGetSamplerParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribDivisor, \"glVertexAttribDivisor\"));\n        DAWN_TRY(LoadProc(getProc, &BindTransformFeedback, \"glBindTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteTransformFeedbacks, \"glDeleteTransformFeedbacks\"));\n        DAWN_TRY(LoadProc(getProc, &GenTransformFeedbacks, \"glGenTransformFeedbacks\"));\n        DAWN_TRY(LoadProc(getProc, &IsTransformFeedback, \"glIsTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &PauseTransformFeedback, \"glPauseTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &ResumeTransformFeedback, \"glResumeTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramBinary, \"glGetProgramBinary\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramBinary, \"glProgramBinary\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramParameteri, \"glProgramParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &InvalidateFramebuffer, \"glInvalidateFramebuffer\"));\n        DAWN_TRY(LoadProc(getProc, &InvalidateSubFramebuffer, \"glInvalidateSubFramebuffer\"));\n        DAWN_TRY(LoadProc(getProc, &TexStorage2D, \"glTexStorage2D\"));\n        DAWN_TRY(LoadProc(getProc, &TexStorage3D, \"glTexStorage3D\"));\n        DAWN_TRY(LoadProc(getProc, &GetInternalformativ, \"glGetInternalformativ\"));\n    }\n\n    // OpenGL ES 3.1\n    if (majorVersion > 3 || (majorVersion == 3 && minorVersion >= 1)) {\n        DAWN_TRY(LoadProc(getProc, &DispatchCompute, \"glDispatchCompute\"));\n        DAWN_TRY(LoadProc(getProc, &DispatchComputeIndirect, \"glDispatchComputeIndirect\"));\n        DAWN_TRY(LoadProc(getProc, &DrawArraysIndirect, \"glDrawArraysIndirect\"));\n        DAWN_TRY(LoadProc(getProc, &DrawElementsIndirect, \"glDrawElementsIndirect\"));\n        DAWN_TRY(LoadProc(getProc, &FramebufferParameteri, \"glFramebufferParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &GetFramebufferParameteriv, \"glGetFramebufferParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramInterfaceiv, \"glGetProgramInterfaceiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramResourceIndex, \"glGetProgramResourceIndex\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramResourceName, \"glGetProgramResourceName\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramResourceiv, \"glGetProgramResourceiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramResourceLocation, \"glGetProgramResourceLocation\"));\n        DAWN_TRY(LoadProc(getProc, &UseProgramStages, \"glUseProgramStages\"));\n        DAWN_TRY(LoadProc(getProc, &ActiveShaderProgram, \"glActiveShaderProgram\"));\n        DAWN_TRY(LoadProc(getProc, &CreateShaderProgramv, \"glCreateShaderProgramv\"));\n        DAWN_TRY(LoadProc(getProc, &BindProgramPipeline, \"glBindProgramPipeline\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteProgramPipelines, \"glDeleteProgramPipelines\"));\n        DAWN_TRY(LoadProc(getProc, &GenProgramPipelines, \"glGenProgramPipelines\"));\n        DAWN_TRY(LoadProc(getProc, &IsProgramPipeline, \"glIsProgramPipeline\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramPipelineiv, \"glGetProgramPipelineiv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1i, \"glProgramUniform1i\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2i, \"glProgramUniform2i\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3i, \"glProgramUniform3i\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4i, \"glProgramUniform4i\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1ui, \"glProgramUniform1ui\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2ui, \"glProgramUniform2ui\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3ui, \"glProgramUniform3ui\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4ui, \"glProgramUniform4ui\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1f, \"glProgramUniform1f\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2f, \"glProgramUniform2f\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3f, \"glProgramUniform3f\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4f, \"glProgramUniform4f\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1iv, \"glProgramUniform1iv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2iv, \"glProgramUniform2iv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3iv, \"glProgramUniform3iv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4iv, \"glProgramUniform4iv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1uiv, \"glProgramUniform1uiv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2uiv, \"glProgramUniform2uiv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3uiv, \"glProgramUniform3uiv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4uiv, \"glProgramUniform4uiv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1fv, \"glProgramUniform1fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2fv, \"glProgramUniform2fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3fv, \"glProgramUniform3fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4fv, \"glProgramUniform4fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix2fv, \"glProgramUniformMatrix2fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix3fv, \"glProgramUniformMatrix3fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix4fv, \"glProgramUniformMatrix4fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix2x3fv, \"glProgramUniformMatrix2x3fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix3x2fv, \"glProgramUniformMatrix3x2fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix2x4fv, \"glProgramUniformMatrix2x4fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix4x2fv, \"glProgramUniformMatrix4x2fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix3x4fv, \"glProgramUniformMatrix3x4fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix4x3fv, \"glProgramUniformMatrix4x3fv\"));\n        DAWN_TRY(LoadProc(getProc, &ValidateProgramPipeline, \"glValidateProgramPipeline\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramPipelineInfoLog, \"glGetProgramPipelineInfoLog\"));\n        DAWN_TRY(LoadProc(getProc, &BindImageTexture, \"glBindImageTexture\"));\n        DAWN_TRY(LoadProc(getProc, &GetBooleani_v, \"glGetBooleani_v\"));\n        DAWN_TRY(LoadProc(getProc, &MemoryBarrier, \"glMemoryBarrier\"));\n        DAWN_TRY(LoadProc(getProc, &MemoryBarrierByRegion, \"glMemoryBarrierByRegion\"));\n        DAWN_TRY(LoadProc(getProc, &TexStorage2DMultisample, \"glTexStorage2DMultisample\"));\n        DAWN_TRY(LoadProc(getProc, &GetMultisamplefv, \"glGetMultisamplefv\"));\n        DAWN_TRY(LoadProc(getProc, &SampleMaski, \"glSampleMaski\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexLevelParameteriv, \"glGetTexLevelParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexLevelParameterfv, \"glGetTexLevelParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &BindVertexBuffer, \"glBindVertexBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribFormat, \"glVertexAttribFormat\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribIFormat, \"glVertexAttribIFormat\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribBinding, \"glVertexAttribBinding\"));\n        DAWN_TRY(LoadProc(getProc, &VertexBindingDivisor, \"glVertexBindingDivisor\"));\n    }\n\n    // OpenGL ES 3.2\n    if (majorVersion > 3 || (majorVersion == 3 && minorVersion >= 2)) {\n        DAWN_TRY(LoadProc(getProc, &BlendBarrier, \"glBlendBarrier\"));\n        DAWN_TRY(LoadProc(getProc, &CopyImageSubData, \"glCopyImageSubData\"));\n        DAWN_TRY(LoadProc(getProc, &DebugMessageControl, \"glDebugMessageControl\"));\n        DAWN_TRY(LoadProc(getProc, &DebugMessageInsert, \"glDebugMessageInsert\"));\n        DAWN_TRY(LoadProc(getProc, &DebugMessageCallback, \"glDebugMessageCallback\"));\n        DAWN_TRY(LoadProc(getProc, &GetDebugMessageLog, \"glGetDebugMessageLog\"));\n        DAWN_TRY(LoadProc(getProc, &PushDebugGroup, \"glPushDebugGroup\"));\n        DAWN_TRY(LoadProc(getProc, &PopDebugGroup, \"glPopDebugGroup\"));\n        DAWN_TRY(LoadProc(getProc, &ObjectLabel, \"glObjectLabel\"));\n        DAWN_TRY(LoadProc(getProc, &GetObjectLabel, \"glGetObjectLabel\"));\n        DAWN_TRY(LoadProc(getProc, &ObjectPtrLabel, \"glObjectPtrLabel\"));\n        DAWN_TRY(LoadProc(getProc, &GetObjectPtrLabel, \"glGetObjectPtrLabel\"));\n        DAWN_TRY(LoadProc(getProc, &GetPointerv, \"glGetPointerv\"));\n        DAWN_TRY(LoadProc(getProc, &Enablei, \"glEnablei\"));\n        DAWN_TRY(LoadProc(getProc, &Disablei, \"glDisablei\"));\n        DAWN_TRY(LoadProc(getProc, &BlendEquationi, \"glBlendEquationi\"));\n        DAWN_TRY(LoadProc(getProc, &BlendEquationSeparatei, \"glBlendEquationSeparatei\"));\n        DAWN_TRY(LoadProc(getProc, &BlendFunci, \"glBlendFunci\"));\n        DAWN_TRY(LoadProc(getProc, &BlendFuncSeparatei, \"glBlendFuncSeparatei\"));\n        DAWN_TRY(LoadProc(getProc, &ColorMaski, \"glColorMaski\"));\n        DAWN_TRY(LoadProc(getProc, &IsEnabledi, \"glIsEnabledi\"));\n        DAWN_TRY(LoadProc(getProc, &DrawElementsBaseVertex, \"glDrawElementsBaseVertex\"));\n        DAWN_TRY(LoadProc(getProc, &DrawRangeElementsBaseVertex, \"glDrawRangeElementsBaseVertex\"));\n        DAWN_TRY(LoadProc(getProc, &DrawElementsInstancedBaseVertex, \"glDrawElementsInstancedBaseVertex\"));\n        DAWN_TRY(LoadProc(getProc, &FramebufferTexture, \"glFramebufferTexture\"));\n        DAWN_TRY(LoadProc(getProc, &PrimitiveBoundingBox, \"glPrimitiveBoundingBox\"));\n        DAWN_TRY(LoadProc(getProc, &GetGraphicsResetStatus, \"glGetGraphicsResetStatus\"));\n        DAWN_TRY(LoadProc(getProc, &ReadnPixels, \"glReadnPixels\"));\n        DAWN_TRY(LoadProc(getProc, &GetnUniformfv, \"glGetnUniformfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetnUniformiv, \"glGetnUniformiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetnUniformuiv, \"glGetnUniformuiv\"));\n        DAWN_TRY(LoadProc(getProc, &MinSampleShading, \"glMinSampleShading\"));\n        DAWN_TRY(LoadProc(getProc, &PatchParameteri, \"glPatchParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &TexParameterIiv, \"glTexParameterIiv\"));\n        DAWN_TRY(LoadProc(getProc, &TexParameterIuiv, \"glTexParameterIuiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexParameterIiv, \"glGetTexParameterIiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexParameterIuiv, \"glGetTexParameterIuiv\"));\n        DAWN_TRY(LoadProc(getProc, &SamplerParameterIiv, \"glSamplerParameterIiv\"));\n        DAWN_TRY(LoadProc(getProc, &SamplerParameterIuiv, \"glSamplerParameterIuiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetSamplerParameterIiv, \"glGetSamplerParameterIiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetSamplerParameterIuiv, \"glGetSamplerParameterIuiv\"));\n        DAWN_TRY(LoadProc(getProc, &TexBuffer, \"glTexBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &TexBufferRange, \"glTexBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &TexStorage3DMultisample, \"glTexStorage3DMultisample\"));\n    }\n\n\n    InitializeSupportedGLExtensions();\n\n    // GL_EXT_texture_compression_s3tc\n    if (IsGLExtensionSupported(\"GL_EXT_texture_compression_s3tc\")) {\n    }\n    // GL_EXT_texture_compression_s3tc_srgb\n    if (IsGLExtensionSupported(\"GL_EXT_texture_compression_s3tc_srgb\")) {\n    }\n    // GL_OES_EGL_image\n    if (IsGLExtensionSupported(\"GL_OES_EGL_image\")) {\n        DAWN_TRY(LoadProc(getProc, &EGLImageTargetTexture2DOES, \"glEGLImageTargetTexture2DOES\"));\n        DAWN_TRY(LoadProc(getProc, &EGLImageTargetRenderbufferStorageOES, \"glEGLImageTargetRenderbufferStorageOES\"));\n    }\n    // GL_EXT_texture_format_BGRA8888\n    if (IsGLExtensionSupported(\"GL_EXT_texture_format_BGRA8888\")) {\n    }\n    // GL_APPLE_texture_format_BGRA8888\n    if (IsGLExtensionSupported(\"GL_APPLE_texture_format_BGRA8888\")) {\n    }\n\n    // GL_ANGLE_base_vertex_base_instance\n    // See crbug.com/dawn/1715 for why this is embedded\n    if (IsGLExtensionSupported(\"GL_ANGLE_base_vertex_base_instance\")) {\n        DAWN_TRY(LoadProc(getProc, &DrawArraysInstancedBaseInstanceANGLE, \"glDrawArraysInstancedBaseInstanceANGLE\"));\n        DAWN_TRY(LoadProc(getProc, &DrawElementsInstancedBaseVertexBaseInstanceANGLE, \"glDrawElementsInstancedBaseVertexBaseInstanceANGLE\"));\n        DAWN_TRY(LoadProc(getProc, &MultiDrawArraysInstancedBaseInstanceANGLE, \"glMultiDrawArraysInstancedBaseInstanceANGLE\"));\n        DAWN_TRY(LoadProc(getProc, &MultiDrawElementsInstancedBaseVertexBaseInstanceANGLE, \"glMultiDrawElementsInstancedBaseVertexBaseInstanceANGLE\"));\n    }\n\n    return {};\n}\n\nMaybeError OpenGLFunctionsBase::LoadDesktopGLProcs(GetProcAddress getProc, int majorVersion, int minorVersion) {\n    // Desktop OpenGL 1.0\n    if (majorVersion > 1 || (majorVersion == 1 && minorVersion >= 0)) {\n        DAWN_TRY(LoadProc(getProc, &CullFace, \"glCullFace\"));\n        DAWN_TRY(LoadProc(getProc, &FrontFace, \"glFrontFace\"));\n        DAWN_TRY(LoadProc(getProc, &Hint, \"glHint\"));\n        DAWN_TRY(LoadProc(getProc, &LineWidth, \"glLineWidth\"));\n        DAWN_TRY(LoadProc(getProc, &PointSize, \"glPointSize\"));\n        DAWN_TRY(LoadProc(getProc, &PolygonMode, \"glPolygonMode\"));\n        DAWN_TRY(LoadProc(getProc, &Scissor, \"glScissor\"));\n        DAWN_TRY(LoadProc(getProc, &TexParameterf, \"glTexParameterf\"));\n        DAWN_TRY(LoadProc(getProc, &TexParameterfv, \"glTexParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &TexParameteri, \"glTexParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &TexParameteriv, \"glTexParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &TexImage1D, \"glTexImage1D\"));\n        DAWN_TRY(LoadProc(getProc, &TexImage2D, \"glTexImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &DrawBuffer, \"glDrawBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &Clear, \"glClear\"));\n        DAWN_TRY(LoadProc(getProc, &ClearColor, \"glClearColor\"));\n        DAWN_TRY(LoadProc(getProc, &ClearStencil, \"glClearStencil\"));\n        DAWN_TRY(LoadProc(getProc, &ClearDepth, \"glClearDepth\"));\n        DAWN_TRY(LoadProc(getProc, &StencilMask, \"glStencilMask\"));\n        DAWN_TRY(LoadProc(getProc, &ColorMask, \"glColorMask\"));\n        DAWN_TRY(LoadProc(getProc, &DepthMask, \"glDepthMask\"));\n        DAWN_TRY(LoadProc(getProc, &Disable, \"glDisable\"));\n        DAWN_TRY(LoadProc(getProc, &Enable, \"glEnable\"));\n        DAWN_TRY(LoadProc(getProc, &Finish, \"glFinish\"));\n        DAWN_TRY(LoadProc(getProc, &Flush, \"glFlush\"));\n        DAWN_TRY(LoadProc(getProc, &BlendFunc, \"glBlendFunc\"));\n        DAWN_TRY(LoadProc(getProc, &LogicOp, \"glLogicOp\"));\n        DAWN_TRY(LoadProc(getProc, &StencilFunc, \"glStencilFunc\"));\n        DAWN_TRY(LoadProc(getProc, &StencilOp, \"glStencilOp\"));\n        DAWN_TRY(LoadProc(getProc, &DepthFunc, \"glDepthFunc\"));\n        DAWN_TRY(LoadProc(getProc, &PixelStoref, \"glPixelStoref\"));\n        DAWN_TRY(LoadProc(getProc, &PixelStorei, \"glPixelStorei\"));\n        DAWN_TRY(LoadProc(getProc, &ReadBuffer, \"glReadBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &ReadPixels, \"glReadPixels\"));\n        DAWN_TRY(LoadProc(getProc, &GetBooleanv, \"glGetBooleanv\"));\n        DAWN_TRY(LoadProc(getProc, &GetDoublev, \"glGetDoublev\"));\n        DAWN_TRY(LoadProc(getProc, &GetError, \"glGetError\"));\n        DAWN_TRY(LoadProc(getProc, &GetFloatv, \"glGetFloatv\"));\n        DAWN_TRY(LoadProc(getProc, &GetIntegerv, \"glGetIntegerv\"));\n        DAWN_TRY(LoadProc(getProc, &GetString, \"glGetString\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexImage, \"glGetTexImage\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexParameterfv, \"glGetTexParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexParameteriv, \"glGetTexParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexLevelParameterfv, \"glGetTexLevelParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexLevelParameteriv, \"glGetTexLevelParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &IsEnabled, \"glIsEnabled\"));\n        DAWN_TRY(LoadProc(getProc, &DepthRange, \"glDepthRange\"));\n        DAWN_TRY(LoadProc(getProc, &Viewport, \"glViewport\"));\n    }\n\n    // Desktop OpenGL 1.1\n    if (majorVersion > 1 || (majorVersion == 1 && minorVersion >= 1)) {\n        DAWN_TRY(LoadProc(getProc, &DrawArrays, \"glDrawArrays\"));\n        DAWN_TRY(LoadProc(getProc, &DrawElements, \"glDrawElements\"));\n        DAWN_TRY(LoadProc(getProc, &PolygonOffset, \"glPolygonOffset\"));\n        DAWN_TRY(LoadProc(getProc, &CopyTexImage1D, \"glCopyTexImage1D\"));\n        DAWN_TRY(LoadProc(getProc, &CopyTexImage2D, \"glCopyTexImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &CopyTexSubImage1D, \"glCopyTexSubImage1D\"));\n        DAWN_TRY(LoadProc(getProc, &CopyTexSubImage2D, \"glCopyTexSubImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &TexSubImage1D, \"glTexSubImage1D\"));\n        DAWN_TRY(LoadProc(getProc, &TexSubImage2D, \"glTexSubImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &BindTexture, \"glBindTexture\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteTextures, \"glDeleteTextures\"));\n        DAWN_TRY(LoadProc(getProc, &GenTextures, \"glGenTextures\"));\n        DAWN_TRY(LoadProc(getProc, &IsTexture, \"glIsTexture\"));\n    }\n\n    // Desktop OpenGL 1.2\n    if (majorVersion > 1 || (majorVersion == 1 && minorVersion >= 2)) {\n        DAWN_TRY(LoadProc(getProc, &DrawRangeElements, \"glDrawRangeElements\"));\n        DAWN_TRY(LoadProc(getProc, &TexImage3D, \"glTexImage3D\"));\n        DAWN_TRY(LoadProc(getProc, &TexSubImage3D, \"glTexSubImage3D\"));\n        DAWN_TRY(LoadProc(getProc, &CopyTexSubImage3D, \"glCopyTexSubImage3D\"));\n    }\n\n    // Desktop OpenGL 1.3\n    if (majorVersion > 1 || (majorVersion == 1 && minorVersion >= 3)) {\n        DAWN_TRY(LoadProc(getProc, &ActiveTexture, \"glActiveTexture\"));\n        DAWN_TRY(LoadProc(getProc, &SampleCoverage, \"glSampleCoverage\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTexImage3D, \"glCompressedTexImage3D\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTexImage2D, \"glCompressedTexImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTexImage1D, \"glCompressedTexImage1D\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTexSubImage3D, \"glCompressedTexSubImage3D\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTexSubImage2D, \"glCompressedTexSubImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTexSubImage1D, \"glCompressedTexSubImage1D\"));\n        DAWN_TRY(LoadProc(getProc, &GetCompressedTexImage, \"glGetCompressedTexImage\"));\n    }\n\n    // Desktop OpenGL 1.4\n    if (majorVersion > 1 || (majorVersion == 1 && minorVersion >= 4)) {\n        DAWN_TRY(LoadProc(getProc, &BlendFuncSeparate, \"glBlendFuncSeparate\"));\n        DAWN_TRY(LoadProc(getProc, &MultiDrawArrays, \"glMultiDrawArrays\"));\n        DAWN_TRY(LoadProc(getProc, &MultiDrawElements, \"glMultiDrawElements\"));\n        DAWN_TRY(LoadProc(getProc, &PointParameterf, \"glPointParameterf\"));\n        DAWN_TRY(LoadProc(getProc, &PointParameterfv, \"glPointParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &PointParameteri, \"glPointParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &PointParameteriv, \"glPointParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &BlendColor, \"glBlendColor\"));\n        DAWN_TRY(LoadProc(getProc, &BlendEquation, \"glBlendEquation\"));\n    }\n\n    // Desktop OpenGL 1.5\n    if (majorVersion > 1 || (majorVersion == 1 && minorVersion >= 5)) {\n        DAWN_TRY(LoadProc(getProc, &GenQueries, \"glGenQueries\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteQueries, \"glDeleteQueries\"));\n        DAWN_TRY(LoadProc(getProc, &IsQuery, \"glIsQuery\"));\n        DAWN_TRY(LoadProc(getProc, &BeginQuery, \"glBeginQuery\"));\n        DAWN_TRY(LoadProc(getProc, &EndQuery, \"glEndQuery\"));\n        DAWN_TRY(LoadProc(getProc, &GetQueryiv, \"glGetQueryiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetQueryObjectiv, \"glGetQueryObjectiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetQueryObjectuiv, \"glGetQueryObjectuiv\"));\n        DAWN_TRY(LoadProc(getProc, &BindBuffer, \"glBindBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteBuffers, \"glDeleteBuffers\"));\n        DAWN_TRY(LoadProc(getProc, &GenBuffers, \"glGenBuffers\"));\n        DAWN_TRY(LoadProc(getProc, &IsBuffer, \"glIsBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &BufferData, \"glBufferData\"));\n        DAWN_TRY(LoadProc(getProc, &BufferSubData, \"glBufferSubData\"));\n        DAWN_TRY(LoadProc(getProc, &GetBufferSubData, \"glGetBufferSubData\"));\n        DAWN_TRY(LoadProc(getProc, &MapBuffer, \"glMapBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &UnmapBuffer, \"glUnmapBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &GetBufferParameteriv, \"glGetBufferParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetBufferPointerv, \"glGetBufferPointerv\"));\n    }\n\n    // Desktop OpenGL 2.0\n    if (majorVersion > 2 || (majorVersion == 2 && minorVersion >= 0)) {\n        DAWN_TRY(LoadProc(getProc, &BlendEquationSeparate, \"glBlendEquationSeparate\"));\n        DAWN_TRY(LoadProc(getProc, &DrawBuffers, \"glDrawBuffers\"));\n        DAWN_TRY(LoadProc(getProc, &StencilOpSeparate, \"glStencilOpSeparate\"));\n        DAWN_TRY(LoadProc(getProc, &StencilFuncSeparate, \"glStencilFuncSeparate\"));\n        DAWN_TRY(LoadProc(getProc, &StencilMaskSeparate, \"glStencilMaskSeparate\"));\n        DAWN_TRY(LoadProc(getProc, &AttachShader, \"glAttachShader\"));\n        DAWN_TRY(LoadProc(getProc, &BindAttribLocation, \"glBindAttribLocation\"));\n        DAWN_TRY(LoadProc(getProc, &CompileShader, \"glCompileShader\"));\n        DAWN_TRY(LoadProc(getProc, &CreateProgram, \"glCreateProgram\"));\n        DAWN_TRY(LoadProc(getProc, &CreateShader, \"glCreateShader\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteProgram, \"glDeleteProgram\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteShader, \"glDeleteShader\"));\n        DAWN_TRY(LoadProc(getProc, &DetachShader, \"glDetachShader\"));\n        DAWN_TRY(LoadProc(getProc, &DisableVertexAttribArray, \"glDisableVertexAttribArray\"));\n        DAWN_TRY(LoadProc(getProc, &EnableVertexAttribArray, \"glEnableVertexAttribArray\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveAttrib, \"glGetActiveAttrib\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveUniform, \"glGetActiveUniform\"));\n        DAWN_TRY(LoadProc(getProc, &GetAttachedShaders, \"glGetAttachedShaders\"));\n        DAWN_TRY(LoadProc(getProc, &GetAttribLocation, \"glGetAttribLocation\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramiv, \"glGetProgramiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramInfoLog, \"glGetProgramInfoLog\"));\n        DAWN_TRY(LoadProc(getProc, &GetShaderiv, \"glGetShaderiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetShaderInfoLog, \"glGetShaderInfoLog\"));\n        DAWN_TRY(LoadProc(getProc, &GetShaderSource, \"glGetShaderSource\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformLocation, \"glGetUniformLocation\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformfv, \"glGetUniformfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformiv, \"glGetUniformiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexAttribdv, \"glGetVertexAttribdv\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexAttribfv, \"glGetVertexAttribfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexAttribiv, \"glGetVertexAttribiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexAttribPointerv, \"glGetVertexAttribPointerv\"));\n        DAWN_TRY(LoadProc(getProc, &IsProgram, \"glIsProgram\"));\n        DAWN_TRY(LoadProc(getProc, &IsShader, \"glIsShader\"));\n        DAWN_TRY(LoadProc(getProc, &LinkProgram, \"glLinkProgram\"));\n        DAWN_TRY(LoadProc(getProc, &ShaderSource, \"glShaderSource\"));\n        DAWN_TRY(LoadProc(getProc, &UseProgram, \"glUseProgram\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1f, \"glUniform1f\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2f, \"glUniform2f\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3f, \"glUniform3f\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4f, \"glUniform4f\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1i, \"glUniform1i\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2i, \"glUniform2i\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3i, \"glUniform3i\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4i, \"glUniform4i\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1fv, \"glUniform1fv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2fv, \"glUniform2fv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3fv, \"glUniform3fv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4fv, \"glUniform4fv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1iv, \"glUniform1iv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2iv, \"glUniform2iv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3iv, \"glUniform3iv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4iv, \"glUniform4iv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix2fv, \"glUniformMatrix2fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix3fv, \"glUniformMatrix3fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix4fv, \"glUniformMatrix4fv\"));\n        DAWN_TRY(LoadProc(getProc, &ValidateProgram, \"glValidateProgram\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib1d, \"glVertexAttrib1d\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib1dv, \"glVertexAttrib1dv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib1f, \"glVertexAttrib1f\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib1fv, \"glVertexAttrib1fv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib1s, \"glVertexAttrib1s\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib1sv, \"glVertexAttrib1sv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib2d, \"glVertexAttrib2d\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib2dv, \"glVertexAttrib2dv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib2f, \"glVertexAttrib2f\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib2fv, \"glVertexAttrib2fv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib2s, \"glVertexAttrib2s\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib2sv, \"glVertexAttrib2sv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib3d, \"glVertexAttrib3d\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib3dv, \"glVertexAttrib3dv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib3f, \"glVertexAttrib3f\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib3fv, \"glVertexAttrib3fv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib3s, \"glVertexAttrib3s\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib3sv, \"glVertexAttrib3sv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4Nbv, \"glVertexAttrib4Nbv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4Niv, \"glVertexAttrib4Niv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4Nsv, \"glVertexAttrib4Nsv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4Nub, \"glVertexAttrib4Nub\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4Nubv, \"glVertexAttrib4Nubv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4Nuiv, \"glVertexAttrib4Nuiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4Nusv, \"glVertexAttrib4Nusv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4bv, \"glVertexAttrib4bv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4d, \"glVertexAttrib4d\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4dv, \"glVertexAttrib4dv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4f, \"glVertexAttrib4f\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4fv, \"glVertexAttrib4fv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4iv, \"glVertexAttrib4iv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4s, \"glVertexAttrib4s\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4sv, \"glVertexAttrib4sv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4ubv, \"glVertexAttrib4ubv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4uiv, \"glVertexAttrib4uiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttrib4usv, \"glVertexAttrib4usv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribPointer, \"glVertexAttribPointer\"));\n    }\n\n    // Desktop OpenGL 2.1\n    if (majorVersion > 2 || (majorVersion == 2 && minorVersion >= 1)) {\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix2x3fv, \"glUniformMatrix2x3fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix3x2fv, \"glUniformMatrix3x2fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix2x4fv, \"glUniformMatrix2x4fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix4x2fv, \"glUniformMatrix4x2fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix3x4fv, \"glUniformMatrix3x4fv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix4x3fv, \"glUniformMatrix4x3fv\"));\n    }\n\n    // Desktop OpenGL 3.0\n    if (majorVersion > 3 || (majorVersion == 3 && minorVersion >= 0)) {\n        DAWN_TRY(LoadProc(getProc, &ColorMaski, \"glColorMaski\"));\n        DAWN_TRY(LoadProc(getProc, &GetBooleani_v, \"glGetBooleani_v\"));\n        DAWN_TRY(LoadProc(getProc, &GetIntegeri_v, \"glGetIntegeri_v\"));\n        DAWN_TRY(LoadProc(getProc, &Enablei, \"glEnablei\"));\n        DAWN_TRY(LoadProc(getProc, &Disablei, \"glDisablei\"));\n        DAWN_TRY(LoadProc(getProc, &IsEnabledi, \"glIsEnabledi\"));\n        DAWN_TRY(LoadProc(getProc, &BeginTransformFeedback, \"glBeginTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &EndTransformFeedback, \"glEndTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &BindBufferRange, \"glBindBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &BindBufferBase, \"glBindBufferBase\"));\n        DAWN_TRY(LoadProc(getProc, &TransformFeedbackVaryings, \"glTransformFeedbackVaryings\"));\n        DAWN_TRY(LoadProc(getProc, &GetTransformFeedbackVarying, \"glGetTransformFeedbackVarying\"));\n        DAWN_TRY(LoadProc(getProc, &ClampColor, \"glClampColor\"));\n        DAWN_TRY(LoadProc(getProc, &BeginConditionalRender, \"glBeginConditionalRender\"));\n        DAWN_TRY(LoadProc(getProc, &EndConditionalRender, \"glEndConditionalRender\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribIPointer, \"glVertexAttribIPointer\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexAttribIiv, \"glGetVertexAttribIiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexAttribIuiv, \"glGetVertexAttribIuiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI1i, \"glVertexAttribI1i\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI2i, \"glVertexAttribI2i\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI3i, \"glVertexAttribI3i\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI4i, \"glVertexAttribI4i\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI1ui, \"glVertexAttribI1ui\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI2ui, \"glVertexAttribI2ui\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI3ui, \"glVertexAttribI3ui\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI4ui, \"glVertexAttribI4ui\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI1iv, \"glVertexAttribI1iv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI2iv, \"glVertexAttribI2iv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI3iv, \"glVertexAttribI3iv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI4iv, \"glVertexAttribI4iv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI1uiv, \"glVertexAttribI1uiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI2uiv, \"glVertexAttribI2uiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI3uiv, \"glVertexAttribI3uiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI4uiv, \"glVertexAttribI4uiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI4bv, \"glVertexAttribI4bv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI4sv, \"glVertexAttribI4sv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI4ubv, \"glVertexAttribI4ubv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribI4usv, \"glVertexAttribI4usv\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformuiv, \"glGetUniformuiv\"));\n        DAWN_TRY(LoadProc(getProc, &BindFragDataLocation, \"glBindFragDataLocation\"));\n        DAWN_TRY(LoadProc(getProc, &GetFragDataLocation, \"glGetFragDataLocation\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1ui, \"glUniform1ui\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2ui, \"glUniform2ui\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3ui, \"glUniform3ui\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4ui, \"glUniform4ui\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1uiv, \"glUniform1uiv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2uiv, \"glUniform2uiv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3uiv, \"glUniform3uiv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4uiv, \"glUniform4uiv\"));\n        DAWN_TRY(LoadProc(getProc, &TexParameterIiv, \"glTexParameterIiv\"));\n        DAWN_TRY(LoadProc(getProc, &TexParameterIuiv, \"glTexParameterIuiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexParameterIiv, \"glGetTexParameterIiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTexParameterIuiv, \"glGetTexParameterIuiv\"));\n        DAWN_TRY(LoadProc(getProc, &ClearBufferiv, \"glClearBufferiv\"));\n        DAWN_TRY(LoadProc(getProc, &ClearBufferuiv, \"glClearBufferuiv\"));\n        DAWN_TRY(LoadProc(getProc, &ClearBufferfv, \"glClearBufferfv\"));\n        DAWN_TRY(LoadProc(getProc, &ClearBufferfi, \"glClearBufferfi\"));\n        DAWN_TRY(LoadProc(getProc, &GetStringi, \"glGetStringi\"));\n        DAWN_TRY(LoadProc(getProc, &IsRenderbuffer, \"glIsRenderbuffer\"));\n        DAWN_TRY(LoadProc(getProc, &BindRenderbuffer, \"glBindRenderbuffer\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteRenderbuffers, \"glDeleteRenderbuffers\"));\n        DAWN_TRY(LoadProc(getProc, &GenRenderbuffers, \"glGenRenderbuffers\"));\n        DAWN_TRY(LoadProc(getProc, &RenderbufferStorage, \"glRenderbufferStorage\"));\n        DAWN_TRY(LoadProc(getProc, &GetRenderbufferParameteriv, \"glGetRenderbufferParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &IsFramebuffer, \"glIsFramebuffer\"));\n        DAWN_TRY(LoadProc(getProc, &BindFramebuffer, \"glBindFramebuffer\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteFramebuffers, \"glDeleteFramebuffers\"));\n        DAWN_TRY(LoadProc(getProc, &GenFramebuffers, \"glGenFramebuffers\"));\n        DAWN_TRY(LoadProc(getProc, &CheckFramebufferStatus, \"glCheckFramebufferStatus\"));\n        DAWN_TRY(LoadProc(getProc, &FramebufferTexture1D, \"glFramebufferTexture1D\"));\n        DAWN_TRY(LoadProc(getProc, &FramebufferTexture2D, \"glFramebufferTexture2D\"));\n        DAWN_TRY(LoadProc(getProc, &FramebufferTexture3D, \"glFramebufferTexture3D\"));\n        DAWN_TRY(LoadProc(getProc, &FramebufferRenderbuffer, \"glFramebufferRenderbuffer\"));\n        DAWN_TRY(LoadProc(getProc, &GetFramebufferAttachmentParameteriv, \"glGetFramebufferAttachmentParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GenerateMipmap, \"glGenerateMipmap\"));\n        DAWN_TRY(LoadProc(getProc, &BlitFramebuffer, \"glBlitFramebuffer\"));\n        DAWN_TRY(LoadProc(getProc, &RenderbufferStorageMultisample, \"glRenderbufferStorageMultisample\"));\n        DAWN_TRY(LoadProc(getProc, &FramebufferTextureLayer, \"glFramebufferTextureLayer\"));\n        DAWN_TRY(LoadProc(getProc, &MapBufferRange, \"glMapBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &FlushMappedBufferRange, \"glFlushMappedBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &BindVertexArray, \"glBindVertexArray\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteVertexArrays, \"glDeleteVertexArrays\"));\n        DAWN_TRY(LoadProc(getProc, &GenVertexArrays, \"glGenVertexArrays\"));\n        DAWN_TRY(LoadProc(getProc, &IsVertexArray, \"glIsVertexArray\"));\n    }\n\n    // Desktop OpenGL 3.1\n    if (majorVersion > 3 || (majorVersion == 3 && minorVersion >= 1)) {\n        DAWN_TRY(LoadProc(getProc, &DrawArraysInstanced, \"glDrawArraysInstanced\"));\n        DAWN_TRY(LoadProc(getProc, &DrawElementsInstanced, \"glDrawElementsInstanced\"));\n        DAWN_TRY(LoadProc(getProc, &TexBuffer, \"glTexBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &PrimitiveRestartIndex, \"glPrimitiveRestartIndex\"));\n        DAWN_TRY(LoadProc(getProc, &CopyBufferSubData, \"glCopyBufferSubData\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformIndices, \"glGetUniformIndices\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveUniformsiv, \"glGetActiveUniformsiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveUniformName, \"glGetActiveUniformName\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformBlockIndex, \"glGetUniformBlockIndex\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveUniformBlockiv, \"glGetActiveUniformBlockiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveUniformBlockName, \"glGetActiveUniformBlockName\"));\n        DAWN_TRY(LoadProc(getProc, &UniformBlockBinding, \"glUniformBlockBinding\"));\n        DAWN_TRY(LoadProc(getProc, &BindBufferRange, \"glBindBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &BindBufferBase, \"glBindBufferBase\"));\n        DAWN_TRY(LoadProc(getProc, &GetIntegeri_v, \"glGetIntegeri_v\"));\n    }\n\n    // Desktop OpenGL 3.2\n    if (majorVersion > 3 || (majorVersion == 3 && minorVersion >= 2)) {\n        DAWN_TRY(LoadProc(getProc, &DrawElementsBaseVertex, \"glDrawElementsBaseVertex\"));\n        DAWN_TRY(LoadProc(getProc, &DrawRangeElementsBaseVertex, \"glDrawRangeElementsBaseVertex\"));\n        DAWN_TRY(LoadProc(getProc, &DrawElementsInstancedBaseVertex, \"glDrawElementsInstancedBaseVertex\"));\n        DAWN_TRY(LoadProc(getProc, &MultiDrawElementsBaseVertex, \"glMultiDrawElementsBaseVertex\"));\n        DAWN_TRY(LoadProc(getProc, &ProvokingVertex, \"glProvokingVertex\"));\n        DAWN_TRY(LoadProc(getProc, &FenceSync, \"glFenceSync\"));\n        DAWN_TRY(LoadProc(getProc, &IsSync, \"glIsSync\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteSync, \"glDeleteSync\"));\n        DAWN_TRY(LoadProc(getProc, &ClientWaitSync, \"glClientWaitSync\"));\n        DAWN_TRY(LoadProc(getProc, &WaitSync, \"glWaitSync\"));\n        DAWN_TRY(LoadProc(getProc, &GetInteger64v, \"glGetInteger64v\"));\n        DAWN_TRY(LoadProc(getProc, &GetSynciv, \"glGetSynciv\"));\n        DAWN_TRY(LoadProc(getProc, &GetInteger64i_v, \"glGetInteger64i_v\"));\n        DAWN_TRY(LoadProc(getProc, &GetBufferParameteri64v, \"glGetBufferParameteri64v\"));\n        DAWN_TRY(LoadProc(getProc, &FramebufferTexture, \"glFramebufferTexture\"));\n        DAWN_TRY(LoadProc(getProc, &TexImage2DMultisample, \"glTexImage2DMultisample\"));\n        DAWN_TRY(LoadProc(getProc, &TexImage3DMultisample, \"glTexImage3DMultisample\"));\n        DAWN_TRY(LoadProc(getProc, &GetMultisamplefv, \"glGetMultisamplefv\"));\n        DAWN_TRY(LoadProc(getProc, &SampleMaski, \"glSampleMaski\"));\n    }\n\n    // Desktop OpenGL 3.3\n    if (majorVersion > 3 || (majorVersion == 3 && minorVersion >= 3)) {\n        DAWN_TRY(LoadProc(getProc, &BindFragDataLocationIndexed, \"glBindFragDataLocationIndexed\"));\n        DAWN_TRY(LoadProc(getProc, &GetFragDataIndex, \"glGetFragDataIndex\"));\n        DAWN_TRY(LoadProc(getProc, &GenSamplers, \"glGenSamplers\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteSamplers, \"glDeleteSamplers\"));\n        DAWN_TRY(LoadProc(getProc, &IsSampler, \"glIsSampler\"));\n        DAWN_TRY(LoadProc(getProc, &BindSampler, \"glBindSampler\"));\n        DAWN_TRY(LoadProc(getProc, &SamplerParameteri, \"glSamplerParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &SamplerParameteriv, \"glSamplerParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &SamplerParameterf, \"glSamplerParameterf\"));\n        DAWN_TRY(LoadProc(getProc, &SamplerParameterfv, \"glSamplerParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &SamplerParameterIiv, \"glSamplerParameterIiv\"));\n        DAWN_TRY(LoadProc(getProc, &SamplerParameterIuiv, \"glSamplerParameterIuiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetSamplerParameteriv, \"glGetSamplerParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetSamplerParameterIiv, \"glGetSamplerParameterIiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetSamplerParameterfv, \"glGetSamplerParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetSamplerParameterIuiv, \"glGetSamplerParameterIuiv\"));\n        DAWN_TRY(LoadProc(getProc, &QueryCounter, \"glQueryCounter\"));\n        DAWN_TRY(LoadProc(getProc, &GetQueryObjecti64v, \"glGetQueryObjecti64v\"));\n        DAWN_TRY(LoadProc(getProc, &GetQueryObjectui64v, \"glGetQueryObjectui64v\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribDivisor, \"glVertexAttribDivisor\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribP1ui, \"glVertexAttribP1ui\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribP1uiv, \"glVertexAttribP1uiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribP2ui, \"glVertexAttribP2ui\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribP2uiv, \"glVertexAttribP2uiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribP3ui, \"glVertexAttribP3ui\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribP3uiv, \"glVertexAttribP3uiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribP4ui, \"glVertexAttribP4ui\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribP4uiv, \"glVertexAttribP4uiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexP2ui, \"glVertexP2ui\"));\n        DAWN_TRY(LoadProc(getProc, &VertexP2uiv, \"glVertexP2uiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexP3ui, \"glVertexP3ui\"));\n        DAWN_TRY(LoadProc(getProc, &VertexP3uiv, \"glVertexP3uiv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexP4ui, \"glVertexP4ui\"));\n        DAWN_TRY(LoadProc(getProc, &VertexP4uiv, \"glVertexP4uiv\"));\n        DAWN_TRY(LoadProc(getProc, &TexCoordP1ui, \"glTexCoordP1ui\"));\n        DAWN_TRY(LoadProc(getProc, &TexCoordP1uiv, \"glTexCoordP1uiv\"));\n        DAWN_TRY(LoadProc(getProc, &TexCoordP2ui, \"glTexCoordP2ui\"));\n        DAWN_TRY(LoadProc(getProc, &TexCoordP2uiv, \"glTexCoordP2uiv\"));\n        DAWN_TRY(LoadProc(getProc, &TexCoordP3ui, \"glTexCoordP3ui\"));\n        DAWN_TRY(LoadProc(getProc, &TexCoordP3uiv, \"glTexCoordP3uiv\"));\n        DAWN_TRY(LoadProc(getProc, &TexCoordP4ui, \"glTexCoordP4ui\"));\n        DAWN_TRY(LoadProc(getProc, &TexCoordP4uiv, \"glTexCoordP4uiv\"));\n        DAWN_TRY(LoadProc(getProc, &MultiTexCoordP1ui, \"glMultiTexCoordP1ui\"));\n        DAWN_TRY(LoadProc(getProc, &MultiTexCoordP1uiv, \"glMultiTexCoordP1uiv\"));\n        DAWN_TRY(LoadProc(getProc, &MultiTexCoordP2ui, \"glMultiTexCoordP2ui\"));\n        DAWN_TRY(LoadProc(getProc, &MultiTexCoordP2uiv, \"glMultiTexCoordP2uiv\"));\n        DAWN_TRY(LoadProc(getProc, &MultiTexCoordP3ui, \"glMultiTexCoordP3ui\"));\n        DAWN_TRY(LoadProc(getProc, &MultiTexCoordP3uiv, \"glMultiTexCoordP3uiv\"));\n        DAWN_TRY(LoadProc(getProc, &MultiTexCoordP4ui, \"glMultiTexCoordP4ui\"));\n        DAWN_TRY(LoadProc(getProc, &MultiTexCoordP4uiv, \"glMultiTexCoordP4uiv\"));\n        DAWN_TRY(LoadProc(getProc, &NormalP3ui, \"glNormalP3ui\"));\n        DAWN_TRY(LoadProc(getProc, &NormalP3uiv, \"glNormalP3uiv\"));\n        DAWN_TRY(LoadProc(getProc, &ColorP3ui, \"glColorP3ui\"));\n        DAWN_TRY(LoadProc(getProc, &ColorP3uiv, \"glColorP3uiv\"));\n        DAWN_TRY(LoadProc(getProc, &ColorP4ui, \"glColorP4ui\"));\n        DAWN_TRY(LoadProc(getProc, &ColorP4uiv, \"glColorP4uiv\"));\n        DAWN_TRY(LoadProc(getProc, &SecondaryColorP3ui, \"glSecondaryColorP3ui\"));\n        DAWN_TRY(LoadProc(getProc, &SecondaryColorP3uiv, \"glSecondaryColorP3uiv\"));\n    }\n\n    // Desktop OpenGL 4.0\n    if (majorVersion > 4 || (majorVersion == 4 && minorVersion >= 0)) {\n        DAWN_TRY(LoadProc(getProc, &MinSampleShading, \"glMinSampleShading\"));\n        DAWN_TRY(LoadProc(getProc, &BlendEquationi, \"glBlendEquationi\"));\n        DAWN_TRY(LoadProc(getProc, &BlendEquationSeparatei, \"glBlendEquationSeparatei\"));\n        DAWN_TRY(LoadProc(getProc, &BlendFunci, \"glBlendFunci\"));\n        DAWN_TRY(LoadProc(getProc, &BlendFuncSeparatei, \"glBlendFuncSeparatei\"));\n        DAWN_TRY(LoadProc(getProc, &DrawArraysIndirect, \"glDrawArraysIndirect\"));\n        DAWN_TRY(LoadProc(getProc, &DrawElementsIndirect, \"glDrawElementsIndirect\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1d, \"glUniform1d\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2d, \"glUniform2d\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3d, \"glUniform3d\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4d, \"glUniform4d\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform1dv, \"glUniform1dv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform2dv, \"glUniform2dv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform3dv, \"glUniform3dv\"));\n        DAWN_TRY(LoadProc(getProc, &Uniform4dv, \"glUniform4dv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix2dv, \"glUniformMatrix2dv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix3dv, \"glUniformMatrix3dv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix4dv, \"glUniformMatrix4dv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix2x3dv, \"glUniformMatrix2x3dv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix2x4dv, \"glUniformMatrix2x4dv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix3x2dv, \"glUniformMatrix3x2dv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix3x4dv, \"glUniformMatrix3x4dv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix4x2dv, \"glUniformMatrix4x2dv\"));\n        DAWN_TRY(LoadProc(getProc, &UniformMatrix4x3dv, \"glUniformMatrix4x3dv\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformdv, \"glGetUniformdv\"));\n        DAWN_TRY(LoadProc(getProc, &GetSubroutineUniformLocation, \"glGetSubroutineUniformLocation\"));\n        DAWN_TRY(LoadProc(getProc, &GetSubroutineIndex, \"glGetSubroutineIndex\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveSubroutineUniformiv, \"glGetActiveSubroutineUniformiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveSubroutineUniformName, \"glGetActiveSubroutineUniformName\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveSubroutineName, \"glGetActiveSubroutineName\"));\n        DAWN_TRY(LoadProc(getProc, &UniformSubroutinesuiv, \"glUniformSubroutinesuiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetUniformSubroutineuiv, \"glGetUniformSubroutineuiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramStageiv, \"glGetProgramStageiv\"));\n        DAWN_TRY(LoadProc(getProc, &PatchParameteri, \"glPatchParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &PatchParameterfv, \"glPatchParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &BindTransformFeedback, \"glBindTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteTransformFeedbacks, \"glDeleteTransformFeedbacks\"));\n        DAWN_TRY(LoadProc(getProc, &GenTransformFeedbacks, \"glGenTransformFeedbacks\"));\n        DAWN_TRY(LoadProc(getProc, &IsTransformFeedback, \"glIsTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &PauseTransformFeedback, \"glPauseTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &ResumeTransformFeedback, \"glResumeTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &DrawTransformFeedback, \"glDrawTransformFeedback\"));\n        DAWN_TRY(LoadProc(getProc, &DrawTransformFeedbackStream, \"glDrawTransformFeedbackStream\"));\n        DAWN_TRY(LoadProc(getProc, &BeginQueryIndexed, \"glBeginQueryIndexed\"));\n        DAWN_TRY(LoadProc(getProc, &EndQueryIndexed, \"glEndQueryIndexed\"));\n        DAWN_TRY(LoadProc(getProc, &GetQueryIndexediv, \"glGetQueryIndexediv\"));\n    }\n\n    // Desktop OpenGL 4.1\n    if (majorVersion > 4 || (majorVersion == 4 && minorVersion >= 1)) {\n        DAWN_TRY(LoadProc(getProc, &ReleaseShaderCompiler, \"glReleaseShaderCompiler\"));\n        DAWN_TRY(LoadProc(getProc, &ShaderBinary, \"glShaderBinary\"));\n        DAWN_TRY(LoadProc(getProc, &GetShaderPrecisionFormat, \"glGetShaderPrecisionFormat\"));\n        DAWN_TRY(LoadProc(getProc, &DepthRangef, \"glDepthRangef\"));\n        DAWN_TRY(LoadProc(getProc, &ClearDepthf, \"glClearDepthf\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramBinary, \"glGetProgramBinary\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramBinary, \"glProgramBinary\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramParameteri, \"glProgramParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &UseProgramStages, \"glUseProgramStages\"));\n        DAWN_TRY(LoadProc(getProc, &ActiveShaderProgram, \"glActiveShaderProgram\"));\n        DAWN_TRY(LoadProc(getProc, &CreateShaderProgramv, \"glCreateShaderProgramv\"));\n        DAWN_TRY(LoadProc(getProc, &BindProgramPipeline, \"glBindProgramPipeline\"));\n        DAWN_TRY(LoadProc(getProc, &DeleteProgramPipelines, \"glDeleteProgramPipelines\"));\n        DAWN_TRY(LoadProc(getProc, &GenProgramPipelines, \"glGenProgramPipelines\"));\n        DAWN_TRY(LoadProc(getProc, &IsProgramPipeline, \"glIsProgramPipeline\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramPipelineiv, \"glGetProgramPipelineiv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramParameteri, \"glProgramParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1i, \"glProgramUniform1i\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1iv, \"glProgramUniform1iv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1f, \"glProgramUniform1f\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1fv, \"glProgramUniform1fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1d, \"glProgramUniform1d\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1dv, \"glProgramUniform1dv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1ui, \"glProgramUniform1ui\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform1uiv, \"glProgramUniform1uiv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2i, \"glProgramUniform2i\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2iv, \"glProgramUniform2iv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2f, \"glProgramUniform2f\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2fv, \"glProgramUniform2fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2d, \"glProgramUniform2d\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2dv, \"glProgramUniform2dv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2ui, \"glProgramUniform2ui\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform2uiv, \"glProgramUniform2uiv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3i, \"glProgramUniform3i\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3iv, \"glProgramUniform3iv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3f, \"glProgramUniform3f\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3fv, \"glProgramUniform3fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3d, \"glProgramUniform3d\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3dv, \"glProgramUniform3dv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3ui, \"glProgramUniform3ui\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform3uiv, \"glProgramUniform3uiv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4i, \"glProgramUniform4i\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4iv, \"glProgramUniform4iv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4f, \"glProgramUniform4f\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4fv, \"glProgramUniform4fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4d, \"glProgramUniform4d\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4dv, \"glProgramUniform4dv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4ui, \"glProgramUniform4ui\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniform4uiv, \"glProgramUniform4uiv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix2fv, \"glProgramUniformMatrix2fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix3fv, \"glProgramUniformMatrix3fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix4fv, \"glProgramUniformMatrix4fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix2dv, \"glProgramUniformMatrix2dv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix3dv, \"glProgramUniformMatrix3dv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix4dv, \"glProgramUniformMatrix4dv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix2x3fv, \"glProgramUniformMatrix2x3fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix3x2fv, \"glProgramUniformMatrix3x2fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix2x4fv, \"glProgramUniformMatrix2x4fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix4x2fv, \"glProgramUniformMatrix4x2fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix3x4fv, \"glProgramUniformMatrix3x4fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix4x3fv, \"glProgramUniformMatrix4x3fv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix2x3dv, \"glProgramUniformMatrix2x3dv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix3x2dv, \"glProgramUniformMatrix3x2dv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix2x4dv, \"glProgramUniformMatrix2x4dv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix4x2dv, \"glProgramUniformMatrix4x2dv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix3x4dv, \"glProgramUniformMatrix3x4dv\"));\n        DAWN_TRY(LoadProc(getProc, &ProgramUniformMatrix4x3dv, \"glProgramUniformMatrix4x3dv\"));\n        DAWN_TRY(LoadProc(getProc, &ValidateProgramPipeline, \"glValidateProgramPipeline\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramPipelineInfoLog, \"glGetProgramPipelineInfoLog\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribL1d, \"glVertexAttribL1d\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribL2d, \"glVertexAttribL2d\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribL3d, \"glVertexAttribL3d\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribL4d, \"glVertexAttribL4d\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribL1dv, \"glVertexAttribL1dv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribL2dv, \"glVertexAttribL2dv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribL3dv, \"glVertexAttribL3dv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribL4dv, \"glVertexAttribL4dv\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribLPointer, \"glVertexAttribLPointer\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexAttribLdv, \"glGetVertexAttribLdv\"));\n        DAWN_TRY(LoadProc(getProc, &ViewportArrayv, \"glViewportArrayv\"));\n        DAWN_TRY(LoadProc(getProc, &ViewportIndexedf, \"glViewportIndexedf\"));\n        DAWN_TRY(LoadProc(getProc, &ViewportIndexedfv, \"glViewportIndexedfv\"));\n        DAWN_TRY(LoadProc(getProc, &ScissorArrayv, \"glScissorArrayv\"));\n        DAWN_TRY(LoadProc(getProc, &ScissorIndexed, \"glScissorIndexed\"));\n        DAWN_TRY(LoadProc(getProc, &ScissorIndexedv, \"glScissorIndexedv\"));\n        DAWN_TRY(LoadProc(getProc, &DepthRangeArrayv, \"glDepthRangeArrayv\"));\n        DAWN_TRY(LoadProc(getProc, &DepthRangeIndexed, \"glDepthRangeIndexed\"));\n        DAWN_TRY(LoadProc(getProc, &GetFloati_v, \"glGetFloati_v\"));\n        DAWN_TRY(LoadProc(getProc, &GetDoublei_v, \"glGetDoublei_v\"));\n    }\n\n    // Desktop OpenGL 4.2\n    if (majorVersion > 4 || (majorVersion == 4 && minorVersion >= 2)) {\n        DAWN_TRY(LoadProc(getProc, &DrawArraysInstancedBaseInstance, \"glDrawArraysInstancedBaseInstance\"));\n        DAWN_TRY(LoadProc(getProc, &DrawElementsInstancedBaseInstance, \"glDrawElementsInstancedBaseInstance\"));\n        DAWN_TRY(LoadProc(getProc, &DrawElementsInstancedBaseVertexBaseInstance, \"glDrawElementsInstancedBaseVertexBaseInstance\"));\n        DAWN_TRY(LoadProc(getProc, &GetInternalformativ, \"glGetInternalformativ\"));\n        DAWN_TRY(LoadProc(getProc, &GetActiveAtomicCounterBufferiv, \"glGetActiveAtomicCounterBufferiv\"));\n        DAWN_TRY(LoadProc(getProc, &BindImageTexture, \"glBindImageTexture\"));\n        DAWN_TRY(LoadProc(getProc, &MemoryBarrier, \"glMemoryBarrier\"));\n        DAWN_TRY(LoadProc(getProc, &TexStorage1D, \"glTexStorage1D\"));\n        DAWN_TRY(LoadProc(getProc, &TexStorage2D, \"glTexStorage2D\"));\n        DAWN_TRY(LoadProc(getProc, &TexStorage3D, \"glTexStorage3D\"));\n        DAWN_TRY(LoadProc(getProc, &DrawTransformFeedbackInstanced, \"glDrawTransformFeedbackInstanced\"));\n        DAWN_TRY(LoadProc(getProc, &DrawTransformFeedbackStreamInstanced, \"glDrawTransformFeedbackStreamInstanced\"));\n    }\n\n    // Desktop OpenGL 4.3\n    if (majorVersion > 4 || (majorVersion == 4 && minorVersion >= 3)) {\n        DAWN_TRY(LoadProc(getProc, &ClearBufferData, \"glClearBufferData\"));\n        DAWN_TRY(LoadProc(getProc, &ClearBufferSubData, \"glClearBufferSubData\"));\n        DAWN_TRY(LoadProc(getProc, &DispatchCompute, \"glDispatchCompute\"));\n        DAWN_TRY(LoadProc(getProc, &DispatchComputeIndirect, \"glDispatchComputeIndirect\"));\n        DAWN_TRY(LoadProc(getProc, &CopyImageSubData, \"glCopyImageSubData\"));\n        DAWN_TRY(LoadProc(getProc, &FramebufferParameteri, \"glFramebufferParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &GetFramebufferParameteriv, \"glGetFramebufferParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetInternalformati64v, \"glGetInternalformati64v\"));\n        DAWN_TRY(LoadProc(getProc, &InvalidateTexSubImage, \"glInvalidateTexSubImage\"));\n        DAWN_TRY(LoadProc(getProc, &InvalidateTexImage, \"glInvalidateTexImage\"));\n        DAWN_TRY(LoadProc(getProc, &InvalidateBufferSubData, \"glInvalidateBufferSubData\"));\n        DAWN_TRY(LoadProc(getProc, &InvalidateBufferData, \"glInvalidateBufferData\"));\n        DAWN_TRY(LoadProc(getProc, &InvalidateFramebuffer, \"glInvalidateFramebuffer\"));\n        DAWN_TRY(LoadProc(getProc, &InvalidateSubFramebuffer, \"glInvalidateSubFramebuffer\"));\n        DAWN_TRY(LoadProc(getProc, &MultiDrawArraysIndirect, \"glMultiDrawArraysIndirect\"));\n        DAWN_TRY(LoadProc(getProc, &MultiDrawElementsIndirect, \"glMultiDrawElementsIndirect\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramInterfaceiv, \"glGetProgramInterfaceiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramResourceIndex, \"glGetProgramResourceIndex\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramResourceName, \"glGetProgramResourceName\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramResourceiv, \"glGetProgramResourceiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramResourceLocation, \"glGetProgramResourceLocation\"));\n        DAWN_TRY(LoadProc(getProc, &GetProgramResourceLocationIndex, \"glGetProgramResourceLocationIndex\"));\n        DAWN_TRY(LoadProc(getProc, &ShaderStorageBlockBinding, \"glShaderStorageBlockBinding\"));\n        DAWN_TRY(LoadProc(getProc, &TexBufferRange, \"glTexBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &TexStorage2DMultisample, \"glTexStorage2DMultisample\"));\n        DAWN_TRY(LoadProc(getProc, &TexStorage3DMultisample, \"glTexStorage3DMultisample\"));\n        DAWN_TRY(LoadProc(getProc, &TextureView, \"glTextureView\"));\n        DAWN_TRY(LoadProc(getProc, &BindVertexBuffer, \"glBindVertexBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribFormat, \"glVertexAttribFormat\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribIFormat, \"glVertexAttribIFormat\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribLFormat, \"glVertexAttribLFormat\"));\n        DAWN_TRY(LoadProc(getProc, &VertexAttribBinding, \"glVertexAttribBinding\"));\n        DAWN_TRY(LoadProc(getProc, &VertexBindingDivisor, \"glVertexBindingDivisor\"));\n        DAWN_TRY(LoadProc(getProc, &DebugMessageControl, \"glDebugMessageControl\"));\n        DAWN_TRY(LoadProc(getProc, &DebugMessageInsert, \"glDebugMessageInsert\"));\n        DAWN_TRY(LoadProc(getProc, &DebugMessageCallback, \"glDebugMessageCallback\"));\n        DAWN_TRY(LoadProc(getProc, &GetDebugMessageLog, \"glGetDebugMessageLog\"));\n        DAWN_TRY(LoadProc(getProc, &PushDebugGroup, \"glPushDebugGroup\"));\n        DAWN_TRY(LoadProc(getProc, &PopDebugGroup, \"glPopDebugGroup\"));\n        DAWN_TRY(LoadProc(getProc, &ObjectLabel, \"glObjectLabel\"));\n        DAWN_TRY(LoadProc(getProc, &GetObjectLabel, \"glGetObjectLabel\"));\n        DAWN_TRY(LoadProc(getProc, &ObjectPtrLabel, \"glObjectPtrLabel\"));\n        DAWN_TRY(LoadProc(getProc, &GetObjectPtrLabel, \"glGetObjectPtrLabel\"));\n    }\n\n    // Desktop OpenGL 4.4\n    if (majorVersion > 4 || (majorVersion == 4 && minorVersion >= 4)) {\n        DAWN_TRY(LoadProc(getProc, &BufferStorage, \"glBufferStorage\"));\n        DAWN_TRY(LoadProc(getProc, &ClearTexImage, \"glClearTexImage\"));\n        DAWN_TRY(LoadProc(getProc, &ClearTexSubImage, \"glClearTexSubImage\"));\n        DAWN_TRY(LoadProc(getProc, &BindBuffersBase, \"glBindBuffersBase\"));\n        DAWN_TRY(LoadProc(getProc, &BindBuffersRange, \"glBindBuffersRange\"));\n        DAWN_TRY(LoadProc(getProc, &BindTextures, \"glBindTextures\"));\n        DAWN_TRY(LoadProc(getProc, &BindSamplers, \"glBindSamplers\"));\n        DAWN_TRY(LoadProc(getProc, &BindImageTextures, \"glBindImageTextures\"));\n        DAWN_TRY(LoadProc(getProc, &BindVertexBuffers, \"glBindVertexBuffers\"));\n    }\n\n    // Desktop OpenGL 4.5\n    if (majorVersion > 4 || (majorVersion == 4 && minorVersion >= 5)) {\n        DAWN_TRY(LoadProc(getProc, &ClipControl, \"glClipControl\"));\n        DAWN_TRY(LoadProc(getProc, &CreateTransformFeedbacks, \"glCreateTransformFeedbacks\"));\n        DAWN_TRY(LoadProc(getProc, &TransformFeedbackBufferBase, \"glTransformFeedbackBufferBase\"));\n        DAWN_TRY(LoadProc(getProc, &TransformFeedbackBufferRange, \"glTransformFeedbackBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &GetTransformFeedbackiv, \"glGetTransformFeedbackiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTransformFeedbacki_v, \"glGetTransformFeedbacki_v\"));\n        DAWN_TRY(LoadProc(getProc, &GetTransformFeedbacki64_v, \"glGetTransformFeedbacki64_v\"));\n        DAWN_TRY(LoadProc(getProc, &CreateBuffers, \"glCreateBuffers\"));\n        DAWN_TRY(LoadProc(getProc, &NamedBufferStorage, \"glNamedBufferStorage\"));\n        DAWN_TRY(LoadProc(getProc, &NamedBufferData, \"glNamedBufferData\"));\n        DAWN_TRY(LoadProc(getProc, &NamedBufferSubData, \"glNamedBufferSubData\"));\n        DAWN_TRY(LoadProc(getProc, &CopyNamedBufferSubData, \"glCopyNamedBufferSubData\"));\n        DAWN_TRY(LoadProc(getProc, &ClearNamedBufferData, \"glClearNamedBufferData\"));\n        DAWN_TRY(LoadProc(getProc, &ClearNamedBufferSubData, \"glClearNamedBufferSubData\"));\n        DAWN_TRY(LoadProc(getProc, &MapNamedBuffer, \"glMapNamedBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &MapNamedBufferRange, \"glMapNamedBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &UnmapNamedBuffer, \"glUnmapNamedBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &FlushMappedNamedBufferRange, \"glFlushMappedNamedBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &GetNamedBufferParameteriv, \"glGetNamedBufferParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetNamedBufferParameteri64v, \"glGetNamedBufferParameteri64v\"));\n        DAWN_TRY(LoadProc(getProc, &GetNamedBufferPointerv, \"glGetNamedBufferPointerv\"));\n        DAWN_TRY(LoadProc(getProc, &GetNamedBufferSubData, \"glGetNamedBufferSubData\"));\n        DAWN_TRY(LoadProc(getProc, &CreateFramebuffers, \"glCreateFramebuffers\"));\n        DAWN_TRY(LoadProc(getProc, &NamedFramebufferRenderbuffer, \"glNamedFramebufferRenderbuffer\"));\n        DAWN_TRY(LoadProc(getProc, &NamedFramebufferParameteri, \"glNamedFramebufferParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &NamedFramebufferTexture, \"glNamedFramebufferTexture\"));\n        DAWN_TRY(LoadProc(getProc, &NamedFramebufferTextureLayer, \"glNamedFramebufferTextureLayer\"));\n        DAWN_TRY(LoadProc(getProc, &NamedFramebufferDrawBuffer, \"glNamedFramebufferDrawBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &NamedFramebufferDrawBuffers, \"glNamedFramebufferDrawBuffers\"));\n        DAWN_TRY(LoadProc(getProc, &NamedFramebufferReadBuffer, \"glNamedFramebufferReadBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &InvalidateNamedFramebufferData, \"glInvalidateNamedFramebufferData\"));\n        DAWN_TRY(LoadProc(getProc, &InvalidateNamedFramebufferSubData, \"glInvalidateNamedFramebufferSubData\"));\n        DAWN_TRY(LoadProc(getProc, &ClearNamedFramebufferiv, \"glClearNamedFramebufferiv\"));\n        DAWN_TRY(LoadProc(getProc, &ClearNamedFramebufferuiv, \"glClearNamedFramebufferuiv\"));\n        DAWN_TRY(LoadProc(getProc, &ClearNamedFramebufferfv, \"glClearNamedFramebufferfv\"));\n        DAWN_TRY(LoadProc(getProc, &ClearNamedFramebufferfi, \"glClearNamedFramebufferfi\"));\n        DAWN_TRY(LoadProc(getProc, &BlitNamedFramebuffer, \"glBlitNamedFramebuffer\"));\n        DAWN_TRY(LoadProc(getProc, &CheckNamedFramebufferStatus, \"glCheckNamedFramebufferStatus\"));\n        DAWN_TRY(LoadProc(getProc, &GetNamedFramebufferParameteriv, \"glGetNamedFramebufferParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetNamedFramebufferAttachmentParameteriv, \"glGetNamedFramebufferAttachmentParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &CreateRenderbuffers, \"glCreateRenderbuffers\"));\n        DAWN_TRY(LoadProc(getProc, &NamedRenderbufferStorage, \"glNamedRenderbufferStorage\"));\n        DAWN_TRY(LoadProc(getProc, &NamedRenderbufferStorageMultisample, \"glNamedRenderbufferStorageMultisample\"));\n        DAWN_TRY(LoadProc(getProc, &GetNamedRenderbufferParameteriv, \"glGetNamedRenderbufferParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &CreateTextures, \"glCreateTextures\"));\n        DAWN_TRY(LoadProc(getProc, &TextureBuffer, \"glTextureBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &TextureBufferRange, \"glTextureBufferRange\"));\n        DAWN_TRY(LoadProc(getProc, &TextureStorage1D, \"glTextureStorage1D\"));\n        DAWN_TRY(LoadProc(getProc, &TextureStorage2D, \"glTextureStorage2D\"));\n        DAWN_TRY(LoadProc(getProc, &TextureStorage3D, \"glTextureStorage3D\"));\n        DAWN_TRY(LoadProc(getProc, &TextureStorage2DMultisample, \"glTextureStorage2DMultisample\"));\n        DAWN_TRY(LoadProc(getProc, &TextureStorage3DMultisample, \"glTextureStorage3DMultisample\"));\n        DAWN_TRY(LoadProc(getProc, &TextureSubImage1D, \"glTextureSubImage1D\"));\n        DAWN_TRY(LoadProc(getProc, &TextureSubImage2D, \"glTextureSubImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &TextureSubImage3D, \"glTextureSubImage3D\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTextureSubImage1D, \"glCompressedTextureSubImage1D\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTextureSubImage2D, \"glCompressedTextureSubImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &CompressedTextureSubImage3D, \"glCompressedTextureSubImage3D\"));\n        DAWN_TRY(LoadProc(getProc, &CopyTextureSubImage1D, \"glCopyTextureSubImage1D\"));\n        DAWN_TRY(LoadProc(getProc, &CopyTextureSubImage2D, \"glCopyTextureSubImage2D\"));\n        DAWN_TRY(LoadProc(getProc, &CopyTextureSubImage3D, \"glCopyTextureSubImage3D\"));\n        DAWN_TRY(LoadProc(getProc, &TextureParameterf, \"glTextureParameterf\"));\n        DAWN_TRY(LoadProc(getProc, &TextureParameterfv, \"glTextureParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &TextureParameteri, \"glTextureParameteri\"));\n        DAWN_TRY(LoadProc(getProc, &TextureParameterIiv, \"glTextureParameterIiv\"));\n        DAWN_TRY(LoadProc(getProc, &TextureParameterIuiv, \"glTextureParameterIuiv\"));\n        DAWN_TRY(LoadProc(getProc, &TextureParameteriv, \"glTextureParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GenerateTextureMipmap, \"glGenerateTextureMipmap\"));\n        DAWN_TRY(LoadProc(getProc, &BindTextureUnit, \"glBindTextureUnit\"));\n        DAWN_TRY(LoadProc(getProc, &GetTextureImage, \"glGetTextureImage\"));\n        DAWN_TRY(LoadProc(getProc, &GetCompressedTextureImage, \"glGetCompressedTextureImage\"));\n        DAWN_TRY(LoadProc(getProc, &GetTextureLevelParameterfv, \"glGetTextureLevelParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTextureLevelParameteriv, \"glGetTextureLevelParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTextureParameterfv, \"glGetTextureParameterfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTextureParameterIiv, \"glGetTextureParameterIiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTextureParameterIuiv, \"glGetTextureParameterIuiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetTextureParameteriv, \"glGetTextureParameteriv\"));\n        DAWN_TRY(LoadProc(getProc, &CreateVertexArrays, \"glCreateVertexArrays\"));\n        DAWN_TRY(LoadProc(getProc, &DisableVertexArrayAttrib, \"glDisableVertexArrayAttrib\"));\n        DAWN_TRY(LoadProc(getProc, &EnableVertexArrayAttrib, \"glEnableVertexArrayAttrib\"));\n        DAWN_TRY(LoadProc(getProc, &VertexArrayElementBuffer, \"glVertexArrayElementBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &VertexArrayVertexBuffer, \"glVertexArrayVertexBuffer\"));\n        DAWN_TRY(LoadProc(getProc, &VertexArrayVertexBuffers, \"glVertexArrayVertexBuffers\"));\n        DAWN_TRY(LoadProc(getProc, &VertexArrayAttribBinding, \"glVertexArrayAttribBinding\"));\n        DAWN_TRY(LoadProc(getProc, &VertexArrayAttribFormat, \"glVertexArrayAttribFormat\"));\n        DAWN_TRY(LoadProc(getProc, &VertexArrayAttribIFormat, \"glVertexArrayAttribIFormat\"));\n        DAWN_TRY(LoadProc(getProc, &VertexArrayAttribLFormat, \"glVertexArrayAttribLFormat\"));\n        DAWN_TRY(LoadProc(getProc, &VertexArrayBindingDivisor, \"glVertexArrayBindingDivisor\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexArrayiv, \"glGetVertexArrayiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexArrayIndexediv, \"glGetVertexArrayIndexediv\"));\n        DAWN_TRY(LoadProc(getProc, &GetVertexArrayIndexed64iv, \"glGetVertexArrayIndexed64iv\"));\n        DAWN_TRY(LoadProc(getProc, &CreateSamplers, \"glCreateSamplers\"));\n        DAWN_TRY(LoadProc(getProc, &CreateProgramPipelines, \"glCreateProgramPipelines\"));\n        DAWN_TRY(LoadProc(getProc, &CreateQueries, \"glCreateQueries\"));\n        DAWN_TRY(LoadProc(getProc, &GetQueryBufferObjecti64v, \"glGetQueryBufferObjecti64v\"));\n        DAWN_TRY(LoadProc(getProc, &GetQueryBufferObjectiv, \"glGetQueryBufferObjectiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetQueryBufferObjectui64v, \"glGetQueryBufferObjectui64v\"));\n        DAWN_TRY(LoadProc(getProc, &GetQueryBufferObjectuiv, \"glGetQueryBufferObjectuiv\"));\n        DAWN_TRY(LoadProc(getProc, &MemoryBarrierByRegion, \"glMemoryBarrierByRegion\"));\n        DAWN_TRY(LoadProc(getProc, &GetTextureSubImage, \"glGetTextureSubImage\"));\n        DAWN_TRY(LoadProc(getProc, &GetCompressedTextureSubImage, \"glGetCompressedTextureSubImage\"));\n        DAWN_TRY(LoadProc(getProc, &GetGraphicsResetStatus, \"glGetGraphicsResetStatus\"));\n        DAWN_TRY(LoadProc(getProc, &GetnCompressedTexImage, \"glGetnCompressedTexImage\"));\n        DAWN_TRY(LoadProc(getProc, &GetnTexImage, \"glGetnTexImage\"));\n        DAWN_TRY(LoadProc(getProc, &GetnUniformdv, \"glGetnUniformdv\"));\n        DAWN_TRY(LoadProc(getProc, &GetnUniformfv, \"glGetnUniformfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetnUniformiv, \"glGetnUniformiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetnUniformuiv, \"glGetnUniformuiv\"));\n        DAWN_TRY(LoadProc(getProc, &ReadnPixels, \"glReadnPixels\"));\n        DAWN_TRY(LoadProc(getProc, &GetnMapdv, \"glGetnMapdv\"));\n        DAWN_TRY(LoadProc(getProc, &GetnMapfv, \"glGetnMapfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetnMapiv, \"glGetnMapiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetnPixelMapfv, \"glGetnPixelMapfv\"));\n        DAWN_TRY(LoadProc(getProc, &GetnPixelMapuiv, \"glGetnPixelMapuiv\"));\n        DAWN_TRY(LoadProc(getProc, &GetnPixelMapusv, \"glGetnPixelMapusv\"));\n        DAWN_TRY(LoadProc(getProc, &GetnPolygonStipple, \"glGetnPolygonStipple\"));\n        DAWN_TRY(LoadProc(getProc, &GetnColorTable, \"glGetnColorTable\"));\n        DAWN_TRY(LoadProc(getProc, &GetnConvolutionFilter, \"glGetnConvolutionFilter\"));\n        DAWN_TRY(LoadProc(getProc, &GetnSeparableFilter, \"glGetnSeparableFilter\"));\n        DAWN_TRY(LoadProc(getProc, &GetnHistogram, \"glGetnHistogram\"));\n        DAWN_TRY(LoadProc(getProc, &GetnMinmax, \"glGetnMinmax\"));\n        DAWN_TRY(LoadProc(getProc, &TextureBarrier, \"glTextureBarrier\"));\n    }\n\n    // Desktop OpenGL 4.6\n    if (majorVersion > 4 || (majorVersion == 4 && minorVersion >= 6)) {\n        DAWN_TRY(LoadProc(getProc, &SpecializeShader, \"glSpecializeShader\"));\n        DAWN_TRY(LoadProc(getProc, &MultiDrawArraysIndirectCount, \"glMultiDrawArraysIndirectCount\"));\n        DAWN_TRY(LoadProc(getProc, &MultiDrawElementsIndirectCount, \"glMultiDrawElementsIndirectCount\"));\n        DAWN_TRY(LoadProc(getProc, &PolygonOffsetClamp, \"glPolygonOffsetClamp\"));\n    }\n\n\n    InitializeSupportedGLExtensions();\n\n    // GL_EXT_texture_compression_s3tc\n    if (IsGLExtensionSupported(\"GL_EXT_texture_compression_s3tc\")) {\n    }\n\n    return {};\n}\n\nvoid OpenGLFunctionsBase::InitializeSupportedGLExtensions() {\n    int32_t numExtensions;\n    GetIntegerv(GL_NUM_EXTENSIONS, &numExtensions);\n\n    for (int32_t i = 0; i < numExtensions; ++i) {\n        const char* extensionName = reinterpret_cast<const char*>(GetStringi(GL_EXTENSIONS, i));\n        mSupportedGLExtensionsSet.insert(extensionName);\n    }\n}\n\nbool OpenGLFunctionsBase::IsGLExtensionSupported(const char* extension) const {\n    ASSERT(extension != nullptr);\n    return mSupportedGLExtensionsSet.count(extension) != 0;\n}\n\n}  // namespace dawn::native::opengl\n", "src/dawn/native/opengl/OpenGLFunctionsBase_autogen.h": "\n#ifndef DAWNNATIVE_OPENGL_OPENGLFUNCTIONSBASE_H_\n#define DAWNNATIVE_OPENGL_OPENGLFUNCTIONSBASE_H_\n\n#include <unordered_set>\n\n#include \"dawn/native/Error.h\"\n#include \"dawn/native/opengl/opengl_platform.h\"\n\nnamespace dawn::native::opengl {\n    using GetProcAddress = void* (*) (const char*);\n\n    struct OpenGLFunctionsBase {\n      public:\n        // OpenGL ES 2.0\n        PFNGLACTIVETEXTUREPROC ActiveTexture = nullptr;\n        PFNGLATTACHSHADERPROC AttachShader = nullptr;\n        PFNGLBINDATTRIBLOCATIONPROC BindAttribLocation = nullptr;\n        PFNGLBINDBUFFERPROC BindBuffer = nullptr;\n        PFNGLBINDFRAMEBUFFERPROC BindFramebuffer = nullptr;\n        PFNGLBINDRENDERBUFFERPROC BindRenderbuffer = nullptr;\n        PFNGLBINDTEXTUREPROC BindTexture = nullptr;\n        PFNGLBLENDCOLORPROC BlendColor = nullptr;\n        PFNGLBLENDEQUATIONPROC BlendEquation = nullptr;\n        PFNGLBLENDEQUATIONSEPARATEPROC BlendEquationSeparate = nullptr;\n        PFNGLBLENDFUNCPROC BlendFunc = nullptr;\n        PFNGLBLENDFUNCSEPARATEPROC BlendFuncSeparate = nullptr;\n        PFNGLBUFFERDATAPROC BufferData = nullptr;\n        PFNGLBUFFERSUBDATAPROC BufferSubData = nullptr;\n        PFNGLCHECKFRAMEBUFFERSTATUSPROC CheckFramebufferStatus = nullptr;\n        PFNGLCLEARPROC Clear = nullptr;\n        PFNGLCLEARCOLORPROC ClearColor = nullptr;\n        PFNGLCLEARDEPTHFPROC ClearDepthf = nullptr;\n        PFNGLCLEARSTENCILPROC ClearStencil = nullptr;\n        PFNGLCOLORMASKPROC ColorMask = nullptr;\n        PFNGLCOMPILESHADERPROC CompileShader = nullptr;\n        PFNGLCOMPRESSEDTEXIMAGE2DPROC CompressedTexImage2D = nullptr;\n        PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC CompressedTexSubImage2D = nullptr;\n        PFNGLCOPYTEXIMAGE2DPROC CopyTexImage2D = nullptr;\n        PFNGLCOPYTEXSUBIMAGE2DPROC CopyTexSubImage2D = nullptr;\n        PFNGLCREATEPROGRAMPROC CreateProgram = nullptr;\n        PFNGLCREATESHADERPROC CreateShader = nullptr;\n        PFNGLCULLFACEPROC CullFace = nullptr;\n        PFNGLDELETEBUFFERSPROC DeleteBuffers = nullptr;\n        PFNGLDELETEFRAMEBUFFERSPROC DeleteFramebuffers = nullptr;\n        PFNGLDELETEPROGRAMPROC DeleteProgram = nullptr;\n        PFNGLDELETERENDERBUFFERSPROC DeleteRenderbuffers = nullptr;\n        PFNGLDELETESHADERPROC DeleteShader = nullptr;\n        PFNGLDELETETEXTURESPROC DeleteTextures = nullptr;\n        PFNGLDEPTHFUNCPROC DepthFunc = nullptr;\n        PFNGLDEPTHMASKPROC DepthMask = nullptr;\n        PFNGLDEPTHRANGEFPROC DepthRangef = nullptr;\n        PFNGLDETACHSHADERPROC DetachShader = nullptr;\n        PFNGLDISABLEPROC Disable = nullptr;\n        PFNGLDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray = nullptr;\n        PFNGLDRAWARRAYSPROC DrawArrays = nullptr;\n        PFNGLDRAWELEMENTSPROC DrawElements = nullptr;\n        PFNGLENABLEPROC Enable = nullptr;\n        PFNGLENABLEVERTEXATTRIBARRAYPROC EnableVertexAttribArray = nullptr;\n        PFNGLFINISHPROC Finish = nullptr;\n        PFNGLFLUSHPROC Flush = nullptr;\n        PFNGLFRAMEBUFFERRENDERBUFFERPROC FramebufferRenderbuffer = nullptr;\n        PFNGLFRAMEBUFFERTEXTURE2DPROC FramebufferTexture2D = nullptr;\n        PFNGLFRONTFACEPROC FrontFace = nullptr;\n        PFNGLGENBUFFERSPROC GenBuffers = nullptr;\n        PFNGLGENERATEMIPMAPPROC GenerateMipmap = nullptr;\n        PFNGLGENFRAMEBUFFERSPROC GenFramebuffers = nullptr;\n        PFNGLGENRENDERBUFFERSPROC GenRenderbuffers = nullptr;\n        PFNGLGENTEXTURESPROC GenTextures = nullptr;\n        PFNGLGETACTIVEATTRIBPROC GetActiveAttrib = nullptr;\n        PFNGLGETACTIVEUNIFORMPROC GetActiveUniform = nullptr;\n        PFNGLGETATTACHEDSHADERSPROC GetAttachedShaders = nullptr;\n        PFNGLGETATTRIBLOCATIONPROC GetAttribLocation = nullptr;\n        PFNGLGETBOOLEANVPROC GetBooleanv = nullptr;\n        PFNGLGETBUFFERPARAMETERIVPROC GetBufferParameteriv = nullptr;\n        PFNGLGETERRORPROC GetError = nullptr;\n        PFNGLGETFLOATVPROC GetFloatv = nullptr;\n        PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC GetFramebufferAttachmentParameteriv = nullptr;\n        PFNGLGETINTEGERVPROC GetIntegerv = nullptr;\n        PFNGLGETPROGRAMIVPROC GetProgramiv = nullptr;\n        PFNGLGETPROGRAMINFOLOGPROC GetProgramInfoLog = nullptr;\n        PFNGLGETRENDERBUFFERPARAMETERIVPROC GetRenderbufferParameteriv = nullptr;\n        PFNGLGETSHADERIVPROC GetShaderiv = nullptr;\n        PFNGLGETSHADERINFOLOGPROC GetShaderInfoLog = nullptr;\n        PFNGLGETSHADERPRECISIONFORMATPROC GetShaderPrecisionFormat = nullptr;\n        PFNGLGETSHADERSOURCEPROC GetShaderSource = nullptr;\n        PFNGLGETSTRINGPROC GetString = nullptr;\n        PFNGLGETTEXPARAMETERFVPROC GetTexParameterfv = nullptr;\n        PFNGLGETTEXPARAMETERIVPROC GetTexParameteriv = nullptr;\n        PFNGLGETUNIFORMFVPROC GetUniformfv = nullptr;\n        PFNGLGETUNIFORMIVPROC GetUniformiv = nullptr;\n        PFNGLGETUNIFORMLOCATIONPROC GetUniformLocation = nullptr;\n        PFNGLGETVERTEXATTRIBFVPROC GetVertexAttribfv = nullptr;\n        PFNGLGETVERTEXATTRIBIVPROC GetVertexAttribiv = nullptr;\n        PFNGLGETVERTEXATTRIBPOINTERVPROC GetVertexAttribPointerv = nullptr;\n        PFNGLHINTPROC Hint = nullptr;\n        PFNGLISBUFFERPROC IsBuffer = nullptr;\n        PFNGLISENABLEDPROC IsEnabled = nullptr;\n        PFNGLISFRAMEBUFFERPROC IsFramebuffer = nullptr;\n        PFNGLISPROGRAMPROC IsProgram = nullptr;\n        PFNGLISRENDERBUFFERPROC IsRenderbuffer = nullptr;\n        PFNGLISSHADERPROC IsShader = nullptr;\n        PFNGLISTEXTUREPROC IsTexture = nullptr;\n        PFNGLLINEWIDTHPROC LineWidth = nullptr;\n        PFNGLLINKPROGRAMPROC LinkProgram = nullptr;\n        PFNGLPIXELSTOREIPROC PixelStorei = nullptr;\n        PFNGLPOLYGONOFFSETPROC PolygonOffset = nullptr;\n        PFNGLREADPIXELSPROC ReadPixels = nullptr;\n        PFNGLRELEASESHADERCOMPILERPROC ReleaseShaderCompiler = nullptr;\n        PFNGLRENDERBUFFERSTORAGEPROC RenderbufferStorage = nullptr;\n        PFNGLSAMPLECOVERAGEPROC SampleCoverage = nullptr;\n        PFNGLSCISSORPROC Scissor = nullptr;\n        PFNGLSHADERBINARYPROC ShaderBinary = nullptr;\n        PFNGLSHADERSOURCEPROC ShaderSource = nullptr;\n        PFNGLSTENCILFUNCPROC StencilFunc = nullptr;\n        PFNGLSTENCILFUNCSEPARATEPROC StencilFuncSeparate = nullptr;\n        PFNGLSTENCILMASKPROC StencilMask = nullptr;\n        PFNGLSTENCILMASKSEPARATEPROC StencilMaskSeparate = nullptr;\n        PFNGLSTENCILOPPROC StencilOp = nullptr;\n        PFNGLSTENCILOPSEPARATEPROC StencilOpSeparate = nullptr;\n        PFNGLTEXIMAGE2DPROC TexImage2D = nullptr;\n        PFNGLTEXPARAMETERFPROC TexParameterf = nullptr;\n        PFNGLTEXPARAMETERFVPROC TexParameterfv = nullptr;\n        PFNGLTEXPARAMETERIPROC TexParameteri = nullptr;\n        PFNGLTEXPARAMETERIVPROC TexParameteriv = nullptr;\n        PFNGLTEXSUBIMAGE2DPROC TexSubImage2D = nullptr;\n        PFNGLUNIFORM1FPROC Uniform1f = nullptr;\n        PFNGLUNIFORM1FVPROC Uniform1fv = nullptr;\n        PFNGLUNIFORM1IPROC Uniform1i = nullptr;\n        PFNGLUNIFORM1IVPROC Uniform1iv = nullptr;\n        PFNGLUNIFORM2FPROC Uniform2f = nullptr;\n        PFNGLUNIFORM2FVPROC Uniform2fv = nullptr;\n        PFNGLUNIFORM2IPROC Uniform2i = nullptr;\n        PFNGLUNIFORM2IVPROC Uniform2iv = nullptr;\n        PFNGLUNIFORM3FPROC Uniform3f = nullptr;\n        PFNGLUNIFORM3FVPROC Uniform3fv = nullptr;\n        PFNGLUNIFORM3IPROC Uniform3i = nullptr;\n        PFNGLUNIFORM3IVPROC Uniform3iv = nullptr;\n        PFNGLUNIFORM4FPROC Uniform4f = nullptr;\n        PFNGLUNIFORM4FVPROC Uniform4fv = nullptr;\n        PFNGLUNIFORM4IPROC Uniform4i = nullptr;\n        PFNGLUNIFORM4IVPROC Uniform4iv = nullptr;\n        PFNGLUNIFORMMATRIX2FVPROC UniformMatrix2fv = nullptr;\n        PFNGLUNIFORMMATRIX3FVPROC UniformMatrix3fv = nullptr;\n        PFNGLUNIFORMMATRIX4FVPROC UniformMatrix4fv = nullptr;\n        PFNGLUSEPROGRAMPROC UseProgram = nullptr;\n        PFNGLVALIDATEPROGRAMPROC ValidateProgram = nullptr;\n        PFNGLVERTEXATTRIB1FPROC VertexAttrib1f = nullptr;\n        PFNGLVERTEXATTRIB1FVPROC VertexAttrib1fv = nullptr;\n        PFNGLVERTEXATTRIB2FPROC VertexAttrib2f = nullptr;\n        PFNGLVERTEXATTRIB2FVPROC VertexAttrib2fv = nullptr;\n        PFNGLVERTEXATTRIB3FPROC VertexAttrib3f = nullptr;\n        PFNGLVERTEXATTRIB3FVPROC VertexAttrib3fv = nullptr;\n        PFNGLVERTEXATTRIB4FPROC VertexAttrib4f = nullptr;\n        PFNGLVERTEXATTRIB4FVPROC VertexAttrib4fv = nullptr;\n        PFNGLVERTEXATTRIBPOINTERPROC VertexAttribPointer = nullptr;\n        PFNGLVIEWPORTPROC Viewport = nullptr;\n\n        // OpenGL ES 3.0\n        PFNGLREADBUFFERPROC ReadBuffer = nullptr;\n        PFNGLDRAWRANGEELEMENTSPROC DrawRangeElements = nullptr;\n        PFNGLTEXIMAGE3DPROC TexImage3D = nullptr;\n        PFNGLTEXSUBIMAGE3DPROC TexSubImage3D = nullptr;\n        PFNGLCOPYTEXSUBIMAGE3DPROC CopyTexSubImage3D = nullptr;\n        PFNGLCOMPRESSEDTEXIMAGE3DPROC CompressedTexImage3D = nullptr;\n        PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC CompressedTexSubImage3D = nullptr;\n        PFNGLGENQUERIESPROC GenQueries = nullptr;\n        PFNGLDELETEQUERIESPROC DeleteQueries = nullptr;\n        PFNGLISQUERYPROC IsQuery = nullptr;\n        PFNGLBEGINQUERYPROC BeginQuery = nullptr;\n        PFNGLENDQUERYPROC EndQuery = nullptr;\n        PFNGLGETQUERYIVPROC GetQueryiv = nullptr;\n        PFNGLGETQUERYOBJECTUIVPROC GetQueryObjectuiv = nullptr;\n        PFNGLUNMAPBUFFERPROC UnmapBuffer = nullptr;\n        PFNGLGETBUFFERPOINTERVPROC GetBufferPointerv = nullptr;\n        PFNGLDRAWBUFFERSPROC DrawBuffers = nullptr;\n        PFNGLUNIFORMMATRIX2X3FVPROC UniformMatrix2x3fv = nullptr;\n        PFNGLUNIFORMMATRIX3X2FVPROC UniformMatrix3x2fv = nullptr;\n        PFNGLUNIFORMMATRIX2X4FVPROC UniformMatrix2x4fv = nullptr;\n        PFNGLUNIFORMMATRIX4X2FVPROC UniformMatrix4x2fv = nullptr;\n        PFNGLUNIFORMMATRIX3X4FVPROC UniformMatrix3x4fv = nullptr;\n        PFNGLUNIFORMMATRIX4X3FVPROC UniformMatrix4x3fv = nullptr;\n        PFNGLBLITFRAMEBUFFERPROC BlitFramebuffer = nullptr;\n        PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC RenderbufferStorageMultisample = nullptr;\n        PFNGLFRAMEBUFFERTEXTURELAYERPROC FramebufferTextureLayer = nullptr;\n        PFNGLMAPBUFFERRANGEPROC MapBufferRange = nullptr;\n        PFNGLFLUSHMAPPEDBUFFERRANGEPROC FlushMappedBufferRange = nullptr;\n        PFNGLBINDVERTEXARRAYPROC BindVertexArray = nullptr;\n        PFNGLDELETEVERTEXARRAYSPROC DeleteVertexArrays = nullptr;\n        PFNGLGENVERTEXARRAYSPROC GenVertexArrays = nullptr;\n        PFNGLISVERTEXARRAYPROC IsVertexArray = nullptr;\n        PFNGLGETINTEGERI_VPROC GetIntegeri_v = nullptr;\n        PFNGLBEGINTRANSFORMFEEDBACKPROC BeginTransformFeedback = nullptr;\n        PFNGLENDTRANSFORMFEEDBACKPROC EndTransformFeedback = nullptr;\n        PFNGLBINDBUFFERRANGEPROC BindBufferRange = nullptr;\n        PFNGLBINDBUFFERBASEPROC BindBufferBase = nullptr;\n        PFNGLTRANSFORMFEEDBACKVARYINGSPROC TransformFeedbackVaryings = nullptr;\n        PFNGLGETTRANSFORMFEEDBACKVARYINGPROC GetTransformFeedbackVarying = nullptr;\n        PFNGLVERTEXATTRIBIPOINTERPROC VertexAttribIPointer = nullptr;\n        PFNGLGETVERTEXATTRIBIIVPROC GetVertexAttribIiv = nullptr;\n        PFNGLGETVERTEXATTRIBIUIVPROC GetVertexAttribIuiv = nullptr;\n        PFNGLVERTEXATTRIBI4IPROC VertexAttribI4i = nullptr;\n        PFNGLVERTEXATTRIBI4UIPROC VertexAttribI4ui = nullptr;\n        PFNGLVERTEXATTRIBI4IVPROC VertexAttribI4iv = nullptr;\n        PFNGLVERTEXATTRIBI4UIVPROC VertexAttribI4uiv = nullptr;\n        PFNGLGETUNIFORMUIVPROC GetUniformuiv = nullptr;\n        PFNGLGETFRAGDATALOCATIONPROC GetFragDataLocation = nullptr;\n        PFNGLUNIFORM1UIPROC Uniform1ui = nullptr;\n        PFNGLUNIFORM2UIPROC Uniform2ui = nullptr;\n        PFNGLUNIFORM3UIPROC Uniform3ui = nullptr;\n        PFNGLUNIFORM4UIPROC Uniform4ui = nullptr;\n        PFNGLUNIFORM1UIVPROC Uniform1uiv = nullptr;\n        PFNGLUNIFORM2UIVPROC Uniform2uiv = nullptr;\n        PFNGLUNIFORM3UIVPROC Uniform3uiv = nullptr;\n        PFNGLUNIFORM4UIVPROC Uniform4uiv = nullptr;\n        PFNGLCLEARBUFFERIVPROC ClearBufferiv = nullptr;\n        PFNGLCLEARBUFFERUIVPROC ClearBufferuiv = nullptr;\n        PFNGLCLEARBUFFERFVPROC ClearBufferfv = nullptr;\n        PFNGLCLEARBUFFERFIPROC ClearBufferfi = nullptr;\n        PFNGLGETSTRINGIPROC GetStringi = nullptr;\n        PFNGLCOPYBUFFERSUBDATAPROC CopyBufferSubData = nullptr;\n        PFNGLGETUNIFORMINDICESPROC GetUniformIndices = nullptr;\n        PFNGLGETACTIVEUNIFORMSIVPROC GetActiveUniformsiv = nullptr;\n        PFNGLGETUNIFORMBLOCKINDEXPROC GetUniformBlockIndex = nullptr;\n        PFNGLGETACTIVEUNIFORMBLOCKIVPROC GetActiveUniformBlockiv = nullptr;\n        PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC GetActiveUniformBlockName = nullptr;\n        PFNGLUNIFORMBLOCKBINDINGPROC UniformBlockBinding = nullptr;\n        PFNGLDRAWARRAYSINSTANCEDPROC DrawArraysInstanced = nullptr;\n        PFNGLDRAWELEMENTSINSTANCEDPROC DrawElementsInstanced = nullptr;\n        PFNGLFENCESYNCPROC FenceSync = nullptr;\n        PFNGLISSYNCPROC IsSync = nullptr;\n        PFNGLDELETESYNCPROC DeleteSync = nullptr;\n        PFNGLCLIENTWAITSYNCPROC ClientWaitSync = nullptr;\n        PFNGLWAITSYNCPROC WaitSync = nullptr;\n        PFNGLGETINTEGER64VPROC GetInteger64v = nullptr;\n        PFNGLGETSYNCIVPROC GetSynciv = nullptr;\n        PFNGLGETINTEGER64I_VPROC GetInteger64i_v = nullptr;\n        PFNGLGETBUFFERPARAMETERI64VPROC GetBufferParameteri64v = nullptr;\n        PFNGLGENSAMPLERSPROC GenSamplers = nullptr;\n        PFNGLDELETESAMPLERSPROC DeleteSamplers = nullptr;\n        PFNGLISSAMPLERPROC IsSampler = nullptr;\n        PFNGLBINDSAMPLERPROC BindSampler = nullptr;\n        PFNGLSAMPLERPARAMETERIPROC SamplerParameteri = nullptr;\n        PFNGLSAMPLERPARAMETERIVPROC SamplerParameteriv = nullptr;\n        PFNGLSAMPLERPARAMETERFPROC SamplerParameterf = nullptr;\n        PFNGLSAMPLERPARAMETERFVPROC SamplerParameterfv = nullptr;\n        PFNGLGETSAMPLERPARAMETERIVPROC GetSamplerParameteriv = nullptr;\n        PFNGLGETSAMPLERPARAMETERFVPROC GetSamplerParameterfv = nullptr;\n        PFNGLVERTEXATTRIBDIVISORPROC VertexAttribDivisor = nullptr;\n        PFNGLBINDTRANSFORMFEEDBACKPROC BindTransformFeedback = nullptr;\n        PFNGLDELETETRANSFORMFEEDBACKSPROC DeleteTransformFeedbacks = nullptr;\n        PFNGLGENTRANSFORMFEEDBACKSPROC GenTransformFeedbacks = nullptr;\n        PFNGLISTRANSFORMFEEDBACKPROC IsTransformFeedback = nullptr;\n        PFNGLPAUSETRANSFORMFEEDBACKPROC PauseTransformFeedback = nullptr;\n        PFNGLRESUMETRANSFORMFEEDBACKPROC ResumeTransformFeedback = nullptr;\n        PFNGLGETPROGRAMBINARYPROC GetProgramBinary = nullptr;\n        PFNGLPROGRAMBINARYPROC ProgramBinary = nullptr;\n        PFNGLPROGRAMPARAMETERIPROC ProgramParameteri = nullptr;\n        PFNGLINVALIDATEFRAMEBUFFERPROC InvalidateFramebuffer = nullptr;\n        PFNGLINVALIDATESUBFRAMEBUFFERPROC InvalidateSubFramebuffer = nullptr;\n        PFNGLTEXSTORAGE2DPROC TexStorage2D = nullptr;\n        PFNGLTEXSTORAGE3DPROC TexStorage3D = nullptr;\n        PFNGLGETINTERNALFORMATIVPROC GetInternalformativ = nullptr;\n\n        // OpenGL ES 3.1\n        PFNGLDISPATCHCOMPUTEPROC DispatchCompute = nullptr;\n        PFNGLDISPATCHCOMPUTEINDIRECTPROC DispatchComputeIndirect = nullptr;\n        PFNGLDRAWARRAYSINDIRECTPROC DrawArraysIndirect = nullptr;\n        PFNGLDRAWELEMENTSINDIRECTPROC DrawElementsIndirect = nullptr;\n        PFNGLFRAMEBUFFERPARAMETERIPROC FramebufferParameteri = nullptr;\n        PFNGLGETFRAMEBUFFERPARAMETERIVPROC GetFramebufferParameteriv = nullptr;\n        PFNGLGETPROGRAMINTERFACEIVPROC GetProgramInterfaceiv = nullptr;\n        PFNGLGETPROGRAMRESOURCEINDEXPROC GetProgramResourceIndex = nullptr;\n        PFNGLGETPROGRAMRESOURCENAMEPROC GetProgramResourceName = nullptr;\n        PFNGLGETPROGRAMRESOURCEIVPROC GetProgramResourceiv = nullptr;\n        PFNGLGETPROGRAMRESOURCELOCATIONPROC GetProgramResourceLocation = nullptr;\n        PFNGLUSEPROGRAMSTAGESPROC UseProgramStages = nullptr;\n        PFNGLACTIVESHADERPROGRAMPROC ActiveShaderProgram = nullptr;\n        PFNGLCREATESHADERPROGRAMVPROC CreateShaderProgramv = nullptr;\n        PFNGLBINDPROGRAMPIPELINEPROC BindProgramPipeline = nullptr;\n        PFNGLDELETEPROGRAMPIPELINESPROC DeleteProgramPipelines = nullptr;\n        PFNGLGENPROGRAMPIPELINESPROC GenProgramPipelines = nullptr;\n        PFNGLISPROGRAMPIPELINEPROC IsProgramPipeline = nullptr;\n        PFNGLGETPROGRAMPIPELINEIVPROC GetProgramPipelineiv = nullptr;\n        PFNGLPROGRAMUNIFORM1IPROC ProgramUniform1i = nullptr;\n        PFNGLPROGRAMUNIFORM2IPROC ProgramUniform2i = nullptr;\n        PFNGLPROGRAMUNIFORM3IPROC ProgramUniform3i = nullptr;\n        PFNGLPROGRAMUNIFORM4IPROC ProgramUniform4i = nullptr;\n        PFNGLPROGRAMUNIFORM1UIPROC ProgramUniform1ui = nullptr;\n        PFNGLPROGRAMUNIFORM2UIPROC ProgramUniform2ui = nullptr;\n        PFNGLPROGRAMUNIFORM3UIPROC ProgramUniform3ui = nullptr;\n        PFNGLPROGRAMUNIFORM4UIPROC ProgramUniform4ui = nullptr;\n        PFNGLPROGRAMUNIFORM1FPROC ProgramUniform1f = nullptr;\n        PFNGLPROGRAMUNIFORM2FPROC ProgramUniform2f = nullptr;\n        PFNGLPROGRAMUNIFORM3FPROC ProgramUniform3f = nullptr;\n        PFNGLPROGRAMUNIFORM4FPROC ProgramUniform4f = nullptr;\n        PFNGLPROGRAMUNIFORM1IVPROC ProgramUniform1iv = nullptr;\n        PFNGLPROGRAMUNIFORM2IVPROC ProgramUniform2iv = nullptr;\n        PFNGLPROGRAMUNIFORM3IVPROC ProgramUniform3iv = nullptr;\n        PFNGLPROGRAMUNIFORM4IVPROC ProgramUniform4iv = nullptr;\n        PFNGLPROGRAMUNIFORM1UIVPROC ProgramUniform1uiv = nullptr;\n        PFNGLPROGRAMUNIFORM2UIVPROC ProgramUniform2uiv = nullptr;\n        PFNGLPROGRAMUNIFORM3UIVPROC ProgramUniform3uiv = nullptr;\n        PFNGLPROGRAMUNIFORM4UIVPROC ProgramUniform4uiv = nullptr;\n        PFNGLPROGRAMUNIFORM1FVPROC ProgramUniform1fv = nullptr;\n        PFNGLPROGRAMUNIFORM2FVPROC ProgramUniform2fv = nullptr;\n        PFNGLPROGRAMUNIFORM3FVPROC ProgramUniform3fv = nullptr;\n        PFNGLPROGRAMUNIFORM4FVPROC ProgramUniform4fv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX2FVPROC ProgramUniformMatrix2fv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX3FVPROC ProgramUniformMatrix3fv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX4FVPROC ProgramUniformMatrix4fv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC ProgramUniformMatrix2x3fv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC ProgramUniformMatrix3x2fv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC ProgramUniformMatrix2x4fv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC ProgramUniformMatrix4x2fv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC ProgramUniformMatrix3x4fv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC ProgramUniformMatrix4x3fv = nullptr;\n        PFNGLVALIDATEPROGRAMPIPELINEPROC ValidateProgramPipeline = nullptr;\n        PFNGLGETPROGRAMPIPELINEINFOLOGPROC GetProgramPipelineInfoLog = nullptr;\n        PFNGLBINDIMAGETEXTUREPROC BindImageTexture = nullptr;\n        PFNGLGETBOOLEANI_VPROC GetBooleani_v = nullptr;\n        PFNGLMEMORYBARRIERPROC MemoryBarrier = nullptr;\n        PFNGLMEMORYBARRIERBYREGIONPROC MemoryBarrierByRegion = nullptr;\n        PFNGLTEXSTORAGE2DMULTISAMPLEPROC TexStorage2DMultisample = nullptr;\n        PFNGLGETMULTISAMPLEFVPROC GetMultisamplefv = nullptr;\n        PFNGLSAMPLEMASKIPROC SampleMaski = nullptr;\n        PFNGLGETTEXLEVELPARAMETERIVPROC GetTexLevelParameteriv = nullptr;\n        PFNGLGETTEXLEVELPARAMETERFVPROC GetTexLevelParameterfv = nullptr;\n        PFNGLBINDVERTEXBUFFERPROC BindVertexBuffer = nullptr;\n        PFNGLVERTEXATTRIBFORMATPROC VertexAttribFormat = nullptr;\n        PFNGLVERTEXATTRIBIFORMATPROC VertexAttribIFormat = nullptr;\n        PFNGLVERTEXATTRIBBINDINGPROC VertexAttribBinding = nullptr;\n        PFNGLVERTEXBINDINGDIVISORPROC VertexBindingDivisor = nullptr;\n\n        // OpenGL ES 3.2\n        PFNGLBLENDBARRIERPROC BlendBarrier = nullptr;\n        PFNGLCOPYIMAGESUBDATAPROC CopyImageSubData = nullptr;\n        PFNGLDEBUGMESSAGECONTROLPROC DebugMessageControl = nullptr;\n        PFNGLDEBUGMESSAGEINSERTPROC DebugMessageInsert = nullptr;\n        PFNGLDEBUGMESSAGECALLBACKPROC DebugMessageCallback = nullptr;\n        PFNGLGETDEBUGMESSAGELOGPROC GetDebugMessageLog = nullptr;\n        PFNGLPUSHDEBUGGROUPPROC PushDebugGroup = nullptr;\n        PFNGLPOPDEBUGGROUPPROC PopDebugGroup = nullptr;\n        PFNGLOBJECTLABELPROC ObjectLabel = nullptr;\n        PFNGLGETOBJECTLABELPROC GetObjectLabel = nullptr;\n        PFNGLOBJECTPTRLABELPROC ObjectPtrLabel = nullptr;\n        PFNGLGETOBJECTPTRLABELPROC GetObjectPtrLabel = nullptr;\n        PFNGLGETPOINTERVPROC GetPointerv = nullptr;\n        PFNGLENABLEIPROC Enablei = nullptr;\n        PFNGLDISABLEIPROC Disablei = nullptr;\n        PFNGLBLENDEQUATIONIPROC BlendEquationi = nullptr;\n        PFNGLBLENDEQUATIONSEPARATEIPROC BlendEquationSeparatei = nullptr;\n        PFNGLBLENDFUNCIPROC BlendFunci = nullptr;\n        PFNGLBLENDFUNCSEPARATEIPROC BlendFuncSeparatei = nullptr;\n        PFNGLCOLORMASKIPROC ColorMaski = nullptr;\n        PFNGLISENABLEDIPROC IsEnabledi = nullptr;\n        PFNGLDRAWELEMENTSBASEVERTEXPROC DrawElementsBaseVertex = nullptr;\n        PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC DrawRangeElementsBaseVertex = nullptr;\n        PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC DrawElementsInstancedBaseVertex = nullptr;\n        PFNGLFRAMEBUFFERTEXTUREPROC FramebufferTexture = nullptr;\n        PFNGLPRIMITIVEBOUNDINGBOXPROC PrimitiveBoundingBox = nullptr;\n        PFNGLGETGRAPHICSRESETSTATUSPROC GetGraphicsResetStatus = nullptr;\n        PFNGLREADNPIXELSPROC ReadnPixels = nullptr;\n        PFNGLGETNUNIFORMFVPROC GetnUniformfv = nullptr;\n        PFNGLGETNUNIFORMIVPROC GetnUniformiv = nullptr;\n        PFNGLGETNUNIFORMUIVPROC GetnUniformuiv = nullptr;\n        PFNGLMINSAMPLESHADINGPROC MinSampleShading = nullptr;\n        PFNGLPATCHPARAMETERIPROC PatchParameteri = nullptr;\n        PFNGLTEXPARAMETERIIVPROC TexParameterIiv = nullptr;\n        PFNGLTEXPARAMETERIUIVPROC TexParameterIuiv = nullptr;\n        PFNGLGETTEXPARAMETERIIVPROC GetTexParameterIiv = nullptr;\n        PFNGLGETTEXPARAMETERIUIVPROC GetTexParameterIuiv = nullptr;\n        PFNGLSAMPLERPARAMETERIIVPROC SamplerParameterIiv = nullptr;\n        PFNGLSAMPLERPARAMETERIUIVPROC SamplerParameterIuiv = nullptr;\n        PFNGLGETSAMPLERPARAMETERIIVPROC GetSamplerParameterIiv = nullptr;\n        PFNGLGETSAMPLERPARAMETERIUIVPROC GetSamplerParameterIuiv = nullptr;\n        PFNGLTEXBUFFERPROC TexBuffer = nullptr;\n        PFNGLTEXBUFFERRANGEPROC TexBufferRange = nullptr;\n        PFNGLTEXSTORAGE3DMULTISAMPLEPROC TexStorage3DMultisample = nullptr;\n\n        // Desktop OpenGL 1.0\n        PFNGLPOINTSIZEPROC PointSize = nullptr;\n        PFNGLPOLYGONMODEPROC PolygonMode = nullptr;\n        PFNGLTEXIMAGE1DPROC TexImage1D = nullptr;\n        PFNGLDRAWBUFFERPROC DrawBuffer = nullptr;\n        PFNGLCLEARDEPTHPROC ClearDepth = nullptr;\n        PFNGLLOGICOPPROC LogicOp = nullptr;\n        PFNGLPIXELSTOREFPROC PixelStoref = nullptr;\n        PFNGLGETDOUBLEVPROC GetDoublev = nullptr;\n        PFNGLGETTEXIMAGEPROC GetTexImage = nullptr;\n        PFNGLDEPTHRANGEPROC DepthRange = nullptr;\n\n        // Desktop OpenGL 1.1\n        PFNGLCOPYTEXIMAGE1DPROC CopyTexImage1D = nullptr;\n        PFNGLCOPYTEXSUBIMAGE1DPROC CopyTexSubImage1D = nullptr;\n        PFNGLTEXSUBIMAGE1DPROC TexSubImage1D = nullptr;\n\n        // Desktop OpenGL 1.2\n\n        // Desktop OpenGL 1.3\n        PFNGLCOMPRESSEDTEXIMAGE1DPROC CompressedTexImage1D = nullptr;\n        PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC CompressedTexSubImage1D = nullptr;\n        PFNGLGETCOMPRESSEDTEXIMAGEPROC GetCompressedTexImage = nullptr;\n\n        // Desktop OpenGL 1.4\n        PFNGLMULTIDRAWARRAYSPROC MultiDrawArrays = nullptr;\n        PFNGLMULTIDRAWELEMENTSPROC MultiDrawElements = nullptr;\n        PFNGLPOINTPARAMETERFPROC PointParameterf = nullptr;\n        PFNGLPOINTPARAMETERFVPROC PointParameterfv = nullptr;\n        PFNGLPOINTPARAMETERIPROC PointParameteri = nullptr;\n        PFNGLPOINTPARAMETERIVPROC PointParameteriv = nullptr;\n\n        // Desktop OpenGL 1.5\n        PFNGLGETQUERYOBJECTIVPROC GetQueryObjectiv = nullptr;\n        PFNGLGETBUFFERSUBDATAPROC GetBufferSubData = nullptr;\n        PFNGLMAPBUFFERPROC MapBuffer = nullptr;\n\n        // Desktop OpenGL 2.0\n        PFNGLGETVERTEXATTRIBDVPROC GetVertexAttribdv = nullptr;\n        PFNGLVERTEXATTRIB1DPROC VertexAttrib1d = nullptr;\n        PFNGLVERTEXATTRIB1DVPROC VertexAttrib1dv = nullptr;\n        PFNGLVERTEXATTRIB1SPROC VertexAttrib1s = nullptr;\n        PFNGLVERTEXATTRIB1SVPROC VertexAttrib1sv = nullptr;\n        PFNGLVERTEXATTRIB2DPROC VertexAttrib2d = nullptr;\n        PFNGLVERTEXATTRIB2DVPROC VertexAttrib2dv = nullptr;\n        PFNGLVERTEXATTRIB2SPROC VertexAttrib2s = nullptr;\n        PFNGLVERTEXATTRIB2SVPROC VertexAttrib2sv = nullptr;\n        PFNGLVERTEXATTRIB3DPROC VertexAttrib3d = nullptr;\n        PFNGLVERTEXATTRIB3DVPROC VertexAttrib3dv = nullptr;\n        PFNGLVERTEXATTRIB3SPROC VertexAttrib3s = nullptr;\n        PFNGLVERTEXATTRIB3SVPROC VertexAttrib3sv = nullptr;\n        PFNGLVERTEXATTRIB4NBVPROC VertexAttrib4Nbv = nullptr;\n        PFNGLVERTEXATTRIB4NIVPROC VertexAttrib4Niv = nullptr;\n        PFNGLVERTEXATTRIB4NSVPROC VertexAttrib4Nsv = nullptr;\n        PFNGLVERTEXATTRIB4NUBPROC VertexAttrib4Nub = nullptr;\n        PFNGLVERTEXATTRIB4NUBVPROC VertexAttrib4Nubv = nullptr;\n        PFNGLVERTEXATTRIB4NUIVPROC VertexAttrib4Nuiv = nullptr;\n        PFNGLVERTEXATTRIB4NUSVPROC VertexAttrib4Nusv = nullptr;\n        PFNGLVERTEXATTRIB4BVPROC VertexAttrib4bv = nullptr;\n        PFNGLVERTEXATTRIB4DPROC VertexAttrib4d = nullptr;\n        PFNGLVERTEXATTRIB4DVPROC VertexAttrib4dv = nullptr;\n        PFNGLVERTEXATTRIB4IVPROC VertexAttrib4iv = nullptr;\n        PFNGLVERTEXATTRIB4SPROC VertexAttrib4s = nullptr;\n        PFNGLVERTEXATTRIB4SVPROC VertexAttrib4sv = nullptr;\n        PFNGLVERTEXATTRIB4UBVPROC VertexAttrib4ubv = nullptr;\n        PFNGLVERTEXATTRIB4UIVPROC VertexAttrib4uiv = nullptr;\n        PFNGLVERTEXATTRIB4USVPROC VertexAttrib4usv = nullptr;\n\n        // Desktop OpenGL 2.1\n\n        // Desktop OpenGL 3.0\n        PFNGLCLAMPCOLORPROC ClampColor = nullptr;\n        PFNGLBEGINCONDITIONALRENDERPROC BeginConditionalRender = nullptr;\n        PFNGLENDCONDITIONALRENDERPROC EndConditionalRender = nullptr;\n        PFNGLVERTEXATTRIBI1IPROC VertexAttribI1i = nullptr;\n        PFNGLVERTEXATTRIBI2IPROC VertexAttribI2i = nullptr;\n        PFNGLVERTEXATTRIBI3IPROC VertexAttribI3i = nullptr;\n        PFNGLVERTEXATTRIBI1UIPROC VertexAttribI1ui = nullptr;\n        PFNGLVERTEXATTRIBI2UIPROC VertexAttribI2ui = nullptr;\n        PFNGLVERTEXATTRIBI3UIPROC VertexAttribI3ui = nullptr;\n        PFNGLVERTEXATTRIBI1IVPROC VertexAttribI1iv = nullptr;\n        PFNGLVERTEXATTRIBI2IVPROC VertexAttribI2iv = nullptr;\n        PFNGLVERTEXATTRIBI3IVPROC VertexAttribI3iv = nullptr;\n        PFNGLVERTEXATTRIBI1UIVPROC VertexAttribI1uiv = nullptr;\n        PFNGLVERTEXATTRIBI2UIVPROC VertexAttribI2uiv = nullptr;\n        PFNGLVERTEXATTRIBI3UIVPROC VertexAttribI3uiv = nullptr;\n        PFNGLVERTEXATTRIBI4BVPROC VertexAttribI4bv = nullptr;\n        PFNGLVERTEXATTRIBI4SVPROC VertexAttribI4sv = nullptr;\n        PFNGLVERTEXATTRIBI4UBVPROC VertexAttribI4ubv = nullptr;\n        PFNGLVERTEXATTRIBI4USVPROC VertexAttribI4usv = nullptr;\n        PFNGLBINDFRAGDATALOCATIONPROC BindFragDataLocation = nullptr;\n        PFNGLFRAMEBUFFERTEXTURE1DPROC FramebufferTexture1D = nullptr;\n        PFNGLFRAMEBUFFERTEXTURE3DPROC FramebufferTexture3D = nullptr;\n\n        // Desktop OpenGL 3.1\n        PFNGLPRIMITIVERESTARTINDEXPROC PrimitiveRestartIndex = nullptr;\n        PFNGLGETACTIVEUNIFORMNAMEPROC GetActiveUniformName = nullptr;\n\n        // Desktop OpenGL 3.2\n        PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC MultiDrawElementsBaseVertex = nullptr;\n        PFNGLPROVOKINGVERTEXPROC ProvokingVertex = nullptr;\n        PFNGLTEXIMAGE2DMULTISAMPLEPROC TexImage2DMultisample = nullptr;\n        PFNGLTEXIMAGE3DMULTISAMPLEPROC TexImage3DMultisample = nullptr;\n\n        // Desktop OpenGL 3.3\n        PFNGLBINDFRAGDATALOCATIONINDEXEDPROC BindFragDataLocationIndexed = nullptr;\n        PFNGLGETFRAGDATAINDEXPROC GetFragDataIndex = nullptr;\n        PFNGLQUERYCOUNTERPROC QueryCounter = nullptr;\n        PFNGLGETQUERYOBJECTI64VPROC GetQueryObjecti64v = nullptr;\n        PFNGLGETQUERYOBJECTUI64VPROC GetQueryObjectui64v = nullptr;\n        PFNGLVERTEXATTRIBP1UIPROC VertexAttribP1ui = nullptr;\n        PFNGLVERTEXATTRIBP1UIVPROC VertexAttribP1uiv = nullptr;\n        PFNGLVERTEXATTRIBP2UIPROC VertexAttribP2ui = nullptr;\n        PFNGLVERTEXATTRIBP2UIVPROC VertexAttribP2uiv = nullptr;\n        PFNGLVERTEXATTRIBP3UIPROC VertexAttribP3ui = nullptr;\n        PFNGLVERTEXATTRIBP3UIVPROC VertexAttribP3uiv = nullptr;\n        PFNGLVERTEXATTRIBP4UIPROC VertexAttribP4ui = nullptr;\n        PFNGLVERTEXATTRIBP4UIVPROC VertexAttribP4uiv = nullptr;\n        PFNGLVERTEXP2UIPROC VertexP2ui = nullptr;\n        PFNGLVERTEXP2UIVPROC VertexP2uiv = nullptr;\n        PFNGLVERTEXP3UIPROC VertexP3ui = nullptr;\n        PFNGLVERTEXP3UIVPROC VertexP3uiv = nullptr;\n        PFNGLVERTEXP4UIPROC VertexP4ui = nullptr;\n        PFNGLVERTEXP4UIVPROC VertexP4uiv = nullptr;\n        PFNGLTEXCOORDP1UIPROC TexCoordP1ui = nullptr;\n        PFNGLTEXCOORDP1UIVPROC TexCoordP1uiv = nullptr;\n        PFNGLTEXCOORDP2UIPROC TexCoordP2ui = nullptr;\n        PFNGLTEXCOORDP2UIVPROC TexCoordP2uiv = nullptr;\n        PFNGLTEXCOORDP3UIPROC TexCoordP3ui = nullptr;\n        PFNGLTEXCOORDP3UIVPROC TexCoordP3uiv = nullptr;\n        PFNGLTEXCOORDP4UIPROC TexCoordP4ui = nullptr;\n        PFNGLTEXCOORDP4UIVPROC TexCoordP4uiv = nullptr;\n        PFNGLMULTITEXCOORDP1UIPROC MultiTexCoordP1ui = nullptr;\n        PFNGLMULTITEXCOORDP1UIVPROC MultiTexCoordP1uiv = nullptr;\n        PFNGLMULTITEXCOORDP2UIPROC MultiTexCoordP2ui = nullptr;\n        PFNGLMULTITEXCOORDP2UIVPROC MultiTexCoordP2uiv = nullptr;\n        PFNGLMULTITEXCOORDP3UIPROC MultiTexCoordP3ui = nullptr;\n        PFNGLMULTITEXCOORDP3UIVPROC MultiTexCoordP3uiv = nullptr;\n        PFNGLMULTITEXCOORDP4UIPROC MultiTexCoordP4ui = nullptr;\n        PFNGLMULTITEXCOORDP4UIVPROC MultiTexCoordP4uiv = nullptr;\n        PFNGLNORMALP3UIPROC NormalP3ui = nullptr;\n        PFNGLNORMALP3UIVPROC NormalP3uiv = nullptr;\n        PFNGLCOLORP3UIPROC ColorP3ui = nullptr;\n        PFNGLCOLORP3UIVPROC ColorP3uiv = nullptr;\n        PFNGLCOLORP4UIPROC ColorP4ui = nullptr;\n        PFNGLCOLORP4UIVPROC ColorP4uiv = nullptr;\n        PFNGLSECONDARYCOLORP3UIPROC SecondaryColorP3ui = nullptr;\n        PFNGLSECONDARYCOLORP3UIVPROC SecondaryColorP3uiv = nullptr;\n\n        // Desktop OpenGL 4.0\n        PFNGLUNIFORM1DPROC Uniform1d = nullptr;\n        PFNGLUNIFORM2DPROC Uniform2d = nullptr;\n        PFNGLUNIFORM3DPROC Uniform3d = nullptr;\n        PFNGLUNIFORM4DPROC Uniform4d = nullptr;\n        PFNGLUNIFORM1DVPROC Uniform1dv = nullptr;\n        PFNGLUNIFORM2DVPROC Uniform2dv = nullptr;\n        PFNGLUNIFORM3DVPROC Uniform3dv = nullptr;\n        PFNGLUNIFORM4DVPROC Uniform4dv = nullptr;\n        PFNGLUNIFORMMATRIX2DVPROC UniformMatrix2dv = nullptr;\n        PFNGLUNIFORMMATRIX3DVPROC UniformMatrix3dv = nullptr;\n        PFNGLUNIFORMMATRIX4DVPROC UniformMatrix4dv = nullptr;\n        PFNGLUNIFORMMATRIX2X3DVPROC UniformMatrix2x3dv = nullptr;\n        PFNGLUNIFORMMATRIX2X4DVPROC UniformMatrix2x4dv = nullptr;\n        PFNGLUNIFORMMATRIX3X2DVPROC UniformMatrix3x2dv = nullptr;\n        PFNGLUNIFORMMATRIX3X4DVPROC UniformMatrix3x4dv = nullptr;\n        PFNGLUNIFORMMATRIX4X2DVPROC UniformMatrix4x2dv = nullptr;\n        PFNGLUNIFORMMATRIX4X3DVPROC UniformMatrix4x3dv = nullptr;\n        PFNGLGETUNIFORMDVPROC GetUniformdv = nullptr;\n        PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC GetSubroutineUniformLocation = nullptr;\n        PFNGLGETSUBROUTINEINDEXPROC GetSubroutineIndex = nullptr;\n        PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC GetActiveSubroutineUniformiv = nullptr;\n        PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC GetActiveSubroutineUniformName = nullptr;\n        PFNGLGETACTIVESUBROUTINENAMEPROC GetActiveSubroutineName = nullptr;\n        PFNGLUNIFORMSUBROUTINESUIVPROC UniformSubroutinesuiv = nullptr;\n        PFNGLGETUNIFORMSUBROUTINEUIVPROC GetUniformSubroutineuiv = nullptr;\n        PFNGLGETPROGRAMSTAGEIVPROC GetProgramStageiv = nullptr;\n        PFNGLPATCHPARAMETERFVPROC PatchParameterfv = nullptr;\n        PFNGLDRAWTRANSFORMFEEDBACKPROC DrawTransformFeedback = nullptr;\n        PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC DrawTransformFeedbackStream = nullptr;\n        PFNGLBEGINQUERYINDEXEDPROC BeginQueryIndexed = nullptr;\n        PFNGLENDQUERYINDEXEDPROC EndQueryIndexed = nullptr;\n        PFNGLGETQUERYINDEXEDIVPROC GetQueryIndexediv = nullptr;\n\n        // Desktop OpenGL 4.1\n        PFNGLPROGRAMUNIFORM1DPROC ProgramUniform1d = nullptr;\n        PFNGLPROGRAMUNIFORM1DVPROC ProgramUniform1dv = nullptr;\n        PFNGLPROGRAMUNIFORM2DPROC ProgramUniform2d = nullptr;\n        PFNGLPROGRAMUNIFORM2DVPROC ProgramUniform2dv = nullptr;\n        PFNGLPROGRAMUNIFORM3DPROC ProgramUniform3d = nullptr;\n        PFNGLPROGRAMUNIFORM3DVPROC ProgramUniform3dv = nullptr;\n        PFNGLPROGRAMUNIFORM4DPROC ProgramUniform4d = nullptr;\n        PFNGLPROGRAMUNIFORM4DVPROC ProgramUniform4dv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX2DVPROC ProgramUniformMatrix2dv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX3DVPROC ProgramUniformMatrix3dv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX4DVPROC ProgramUniformMatrix4dv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC ProgramUniformMatrix2x3dv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC ProgramUniformMatrix3x2dv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC ProgramUniformMatrix2x4dv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC ProgramUniformMatrix4x2dv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC ProgramUniformMatrix3x4dv = nullptr;\n        PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC ProgramUniformMatrix4x3dv = nullptr;\n        PFNGLVERTEXATTRIBL1DPROC VertexAttribL1d = nullptr;\n        PFNGLVERTEXATTRIBL2DPROC VertexAttribL2d = nullptr;\n        PFNGLVERTEXATTRIBL3DPROC VertexAttribL3d = nullptr;\n        PFNGLVERTEXATTRIBL4DPROC VertexAttribL4d = nullptr;\n        PFNGLVERTEXATTRIBL1DVPROC VertexAttribL1dv = nullptr;\n        PFNGLVERTEXATTRIBL2DVPROC VertexAttribL2dv = nullptr;\n        PFNGLVERTEXATTRIBL3DVPROC VertexAttribL3dv = nullptr;\n        PFNGLVERTEXATTRIBL4DVPROC VertexAttribL4dv = nullptr;\n        PFNGLVERTEXATTRIBLPOINTERPROC VertexAttribLPointer = nullptr;\n        PFNGLGETVERTEXATTRIBLDVPROC GetVertexAttribLdv = nullptr;\n        PFNGLVIEWPORTARRAYVPROC ViewportArrayv = nullptr;\n        PFNGLVIEWPORTINDEXEDFPROC ViewportIndexedf = nullptr;\n        PFNGLVIEWPORTINDEXEDFVPROC ViewportIndexedfv = nullptr;\n        PFNGLSCISSORARRAYVPROC ScissorArrayv = nullptr;\n        PFNGLSCISSORINDEXEDPROC ScissorIndexed = nullptr;\n        PFNGLSCISSORINDEXEDVPROC ScissorIndexedv = nullptr;\n        PFNGLDEPTHRANGEARRAYVPROC DepthRangeArrayv = nullptr;\n        PFNGLDEPTHRANGEINDEXEDPROC DepthRangeIndexed = nullptr;\n        PFNGLGETFLOATI_VPROC GetFloati_v = nullptr;\n        PFNGLGETDOUBLEI_VPROC GetDoublei_v = nullptr;\n\n        // Desktop OpenGL 4.2\n        PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC DrawArraysInstancedBaseInstance = nullptr;\n        PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC DrawElementsInstancedBaseInstance = nullptr;\n        PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC DrawElementsInstancedBaseVertexBaseInstance = nullptr;\n        PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC GetActiveAtomicCounterBufferiv = nullptr;\n        PFNGLTEXSTORAGE1DPROC TexStorage1D = nullptr;\n        PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC DrawTransformFeedbackInstanced = nullptr;\n        PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC DrawTransformFeedbackStreamInstanced = nullptr;\n\n        // Desktop OpenGL 4.3\n        PFNGLCLEARBUFFERDATAPROC ClearBufferData = nullptr;\n        PFNGLCLEARBUFFERSUBDATAPROC ClearBufferSubData = nullptr;\n        PFNGLGETINTERNALFORMATI64VPROC GetInternalformati64v = nullptr;\n        PFNGLINVALIDATETEXSUBIMAGEPROC InvalidateTexSubImage = nullptr;\n        PFNGLINVALIDATETEXIMAGEPROC InvalidateTexImage = nullptr;\n        PFNGLINVALIDATEBUFFERSUBDATAPROC InvalidateBufferSubData = nullptr;\n        PFNGLINVALIDATEBUFFERDATAPROC InvalidateBufferData = nullptr;\n        PFNGLMULTIDRAWARRAYSINDIRECTPROC MultiDrawArraysIndirect = nullptr;\n        PFNGLMULTIDRAWELEMENTSINDIRECTPROC MultiDrawElementsIndirect = nullptr;\n        PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC GetProgramResourceLocationIndex = nullptr;\n        PFNGLSHADERSTORAGEBLOCKBINDINGPROC ShaderStorageBlockBinding = nullptr;\n        PFNGLTEXTUREVIEWPROC TextureView = nullptr;\n        PFNGLVERTEXATTRIBLFORMATPROC VertexAttribLFormat = nullptr;\n\n        // Desktop OpenGL 4.4\n        PFNGLBUFFERSTORAGEPROC BufferStorage = nullptr;\n        PFNGLCLEARTEXIMAGEPROC ClearTexImage = nullptr;\n        PFNGLCLEARTEXSUBIMAGEPROC ClearTexSubImage = nullptr;\n        PFNGLBINDBUFFERSBASEPROC BindBuffersBase = nullptr;\n        PFNGLBINDBUFFERSRANGEPROC BindBuffersRange = nullptr;\n        PFNGLBINDTEXTURESPROC BindTextures = nullptr;\n        PFNGLBINDSAMPLERSPROC BindSamplers = nullptr;\n        PFNGLBINDIMAGETEXTURESPROC BindImageTextures = nullptr;\n        PFNGLBINDVERTEXBUFFERSPROC BindVertexBuffers = nullptr;\n\n        // Desktop OpenGL 4.5\n        PFNGLCLIPCONTROLPROC ClipControl = nullptr;\n        PFNGLCREATETRANSFORMFEEDBACKSPROC CreateTransformFeedbacks = nullptr;\n        PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC TransformFeedbackBufferBase = nullptr;\n        PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC TransformFeedbackBufferRange = nullptr;\n        PFNGLGETTRANSFORMFEEDBACKIVPROC GetTransformFeedbackiv = nullptr;\n        PFNGLGETTRANSFORMFEEDBACKI_VPROC GetTransformFeedbacki_v = nullptr;\n        PFNGLGETTRANSFORMFEEDBACKI64_VPROC GetTransformFeedbacki64_v = nullptr;\n        PFNGLCREATEBUFFERSPROC CreateBuffers = nullptr;\n        PFNGLNAMEDBUFFERSTORAGEPROC NamedBufferStorage = nullptr;\n        PFNGLNAMEDBUFFERDATAPROC NamedBufferData = nullptr;\n        PFNGLNAMEDBUFFERSUBDATAPROC NamedBufferSubData = nullptr;\n        PFNGLCOPYNAMEDBUFFERSUBDATAPROC CopyNamedBufferSubData = nullptr;\n        PFNGLCLEARNAMEDBUFFERDATAPROC ClearNamedBufferData = nullptr;\n        PFNGLCLEARNAMEDBUFFERSUBDATAPROC ClearNamedBufferSubData = nullptr;\n        PFNGLMAPNAMEDBUFFERPROC MapNamedBuffer = nullptr;\n        PFNGLMAPNAMEDBUFFERRANGEPROC MapNamedBufferRange = nullptr;\n        PFNGLUNMAPNAMEDBUFFERPROC UnmapNamedBuffer = nullptr;\n        PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC FlushMappedNamedBufferRange = nullptr;\n        PFNGLGETNAMEDBUFFERPARAMETERIVPROC GetNamedBufferParameteriv = nullptr;\n        PFNGLGETNAMEDBUFFERPARAMETERI64VPROC GetNamedBufferParameteri64v = nullptr;\n        PFNGLGETNAMEDBUFFERPOINTERVPROC GetNamedBufferPointerv = nullptr;\n        PFNGLGETNAMEDBUFFERSUBDATAPROC GetNamedBufferSubData = nullptr;\n        PFNGLCREATEFRAMEBUFFERSPROC CreateFramebuffers = nullptr;\n        PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC NamedFramebufferRenderbuffer = nullptr;\n        PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC NamedFramebufferParameteri = nullptr;\n        PFNGLNAMEDFRAMEBUFFERTEXTUREPROC NamedFramebufferTexture = nullptr;\n        PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC NamedFramebufferTextureLayer = nullptr;\n        PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC NamedFramebufferDrawBuffer = nullptr;\n        PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC NamedFramebufferDrawBuffers = nullptr;\n        PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC NamedFramebufferReadBuffer = nullptr;\n        PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC InvalidateNamedFramebufferData = nullptr;\n        PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC InvalidateNamedFramebufferSubData = nullptr;\n        PFNGLCLEARNAMEDFRAMEBUFFERIVPROC ClearNamedFramebufferiv = nullptr;\n        PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC ClearNamedFramebufferuiv = nullptr;\n        PFNGLCLEARNAMEDFRAMEBUFFERFVPROC ClearNamedFramebufferfv = nullptr;\n        PFNGLCLEARNAMEDFRAMEBUFFERFIPROC ClearNamedFramebufferfi = nullptr;\n        PFNGLBLITNAMEDFRAMEBUFFERPROC BlitNamedFramebuffer = nullptr;\n        PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC CheckNamedFramebufferStatus = nullptr;\n        PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC GetNamedFramebufferParameteriv = nullptr;\n        PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC GetNamedFramebufferAttachmentParameteriv = nullptr;\n        PFNGLCREATERENDERBUFFERSPROC CreateRenderbuffers = nullptr;\n        PFNGLNAMEDRENDERBUFFERSTORAGEPROC NamedRenderbufferStorage = nullptr;\n        PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC NamedRenderbufferStorageMultisample = nullptr;\n        PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC GetNamedRenderbufferParameteriv = nullptr;\n        PFNGLCREATETEXTURESPROC CreateTextures = nullptr;\n        PFNGLTEXTUREBUFFERPROC TextureBuffer = nullptr;\n        PFNGLTEXTUREBUFFERRANGEPROC TextureBufferRange = nullptr;\n        PFNGLTEXTURESTORAGE1DPROC TextureStorage1D = nullptr;\n        PFNGLTEXTURESTORAGE2DPROC TextureStorage2D = nullptr;\n        PFNGLTEXTURESTORAGE3DPROC TextureStorage3D = nullptr;\n        PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC TextureStorage2DMultisample = nullptr;\n        PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC TextureStorage3DMultisample = nullptr;\n        PFNGLTEXTURESUBIMAGE1DPROC TextureSubImage1D = nullptr;\n        PFNGLTEXTURESUBIMAGE2DPROC TextureSubImage2D = nullptr;\n        PFNGLTEXTURESUBIMAGE3DPROC TextureSubImage3D = nullptr;\n        PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC CompressedTextureSubImage1D = nullptr;\n        PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC CompressedTextureSubImage2D = nullptr;\n        PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC CompressedTextureSubImage3D = nullptr;\n        PFNGLCOPYTEXTURESUBIMAGE1DPROC CopyTextureSubImage1D = nullptr;\n        PFNGLCOPYTEXTURESUBIMAGE2DPROC CopyTextureSubImage2D = nullptr;\n        PFNGLCOPYTEXTURESUBIMAGE3DPROC CopyTextureSubImage3D = nullptr;\n        PFNGLTEXTUREPARAMETERFPROC TextureParameterf = nullptr;\n        PFNGLTEXTUREPARAMETERFVPROC TextureParameterfv = nullptr;\n        PFNGLTEXTUREPARAMETERIPROC TextureParameteri = nullptr;\n        PFNGLTEXTUREPARAMETERIIVPROC TextureParameterIiv = nullptr;\n        PFNGLTEXTUREPARAMETERIUIVPROC TextureParameterIuiv = nullptr;\n        PFNGLTEXTUREPARAMETERIVPROC TextureParameteriv = nullptr;\n        PFNGLGENERATETEXTUREMIPMAPPROC GenerateTextureMipmap = nullptr;\n        PFNGLBINDTEXTUREUNITPROC BindTextureUnit = nullptr;\n        PFNGLGETTEXTUREIMAGEPROC GetTextureImage = nullptr;\n        PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC GetCompressedTextureImage = nullptr;\n        PFNGLGETTEXTURELEVELPARAMETERFVPROC GetTextureLevelParameterfv = nullptr;\n        PFNGLGETTEXTURELEVELPARAMETERIVPROC GetTextureLevelParameteriv = nullptr;\n        PFNGLGETTEXTUREPARAMETERFVPROC GetTextureParameterfv = nullptr;\n        PFNGLGETTEXTUREPARAMETERIIVPROC GetTextureParameterIiv = nullptr;\n        PFNGLGETTEXTUREPARAMETERIUIVPROC GetTextureParameterIuiv = nullptr;\n        PFNGLGETTEXTUREPARAMETERIVPROC GetTextureParameteriv = nullptr;\n        PFNGLCREATEVERTEXARRAYSPROC CreateVertexArrays = nullptr;\n        PFNGLDISABLEVERTEXARRAYATTRIBPROC DisableVertexArrayAttrib = nullptr;\n        PFNGLENABLEVERTEXARRAYATTRIBPROC EnableVertexArrayAttrib = nullptr;\n        PFNGLVERTEXARRAYELEMENTBUFFERPROC VertexArrayElementBuffer = nullptr;\n        PFNGLVERTEXARRAYVERTEXBUFFERPROC VertexArrayVertexBuffer = nullptr;\n        PFNGLVERTEXARRAYVERTEXBUFFERSPROC VertexArrayVertexBuffers = nullptr;\n        PFNGLVERTEXARRAYATTRIBBINDINGPROC VertexArrayAttribBinding = nullptr;\n        PFNGLVERTEXARRAYATTRIBFORMATPROC VertexArrayAttribFormat = nullptr;\n        PFNGLVERTEXARRAYATTRIBIFORMATPROC VertexArrayAttribIFormat = nullptr;\n        PFNGLVERTEXARRAYATTRIBLFORMATPROC VertexArrayAttribLFormat = nullptr;\n        PFNGLVERTEXARRAYBINDINGDIVISORPROC VertexArrayBindingDivisor = nullptr;\n        PFNGLGETVERTEXARRAYIVPROC GetVertexArrayiv = nullptr;\n        PFNGLGETVERTEXARRAYINDEXEDIVPROC GetVertexArrayIndexediv = nullptr;\n        PFNGLGETVERTEXARRAYINDEXED64IVPROC GetVertexArrayIndexed64iv = nullptr;\n        PFNGLCREATESAMPLERSPROC CreateSamplers = nullptr;\n        PFNGLCREATEPROGRAMPIPELINESPROC CreateProgramPipelines = nullptr;\n        PFNGLCREATEQUERIESPROC CreateQueries = nullptr;\n        PFNGLGETQUERYBUFFEROBJECTI64VPROC GetQueryBufferObjecti64v = nullptr;\n        PFNGLGETQUERYBUFFEROBJECTIVPROC GetQueryBufferObjectiv = nullptr;\n        PFNGLGETQUERYBUFFEROBJECTUI64VPROC GetQueryBufferObjectui64v = nullptr;\n        PFNGLGETQUERYBUFFEROBJECTUIVPROC GetQueryBufferObjectuiv = nullptr;\n        PFNGLGETTEXTURESUBIMAGEPROC GetTextureSubImage = nullptr;\n        PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC GetCompressedTextureSubImage = nullptr;\n        PFNGLGETNCOMPRESSEDTEXIMAGEPROC GetnCompressedTexImage = nullptr;\n        PFNGLGETNTEXIMAGEPROC GetnTexImage = nullptr;\n        PFNGLGETNUNIFORMDVPROC GetnUniformdv = nullptr;\n        PFNGLGETNMAPDVPROC GetnMapdv = nullptr;\n        PFNGLGETNMAPFVPROC GetnMapfv = nullptr;\n        PFNGLGETNMAPIVPROC GetnMapiv = nullptr;\n        PFNGLGETNPIXELMAPFVPROC GetnPixelMapfv = nullptr;\n        PFNGLGETNPIXELMAPUIVPROC GetnPixelMapuiv = nullptr;\n        PFNGLGETNPIXELMAPUSVPROC GetnPixelMapusv = nullptr;\n        PFNGLGETNPOLYGONSTIPPLEPROC GetnPolygonStipple = nullptr;\n        PFNGLGETNCOLORTABLEPROC GetnColorTable = nullptr;\n        PFNGLGETNCONVOLUTIONFILTERPROC GetnConvolutionFilter = nullptr;\n        PFNGLGETNSEPARABLEFILTERPROC GetnSeparableFilter = nullptr;\n        PFNGLGETNHISTOGRAMPROC GetnHistogram = nullptr;\n        PFNGLGETNMINMAXPROC GetnMinmax = nullptr;\n        PFNGLTEXTUREBARRIERPROC TextureBarrier = nullptr;\n\n        // Desktop OpenGL 4.6\n        PFNGLSPECIALIZESHADERPROC SpecializeShader = nullptr;\n        PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC MultiDrawArraysIndirectCount = nullptr;\n        PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC MultiDrawElementsIndirectCount = nullptr;\n        PFNGLPOLYGONOFFSETCLAMPPROC PolygonOffsetClamp = nullptr;\n\n        // GL_EXT_texture_compression_s3tc\n\n        // GL_EXT_texture_compression_s3tc_srgb\n\n        // GL_OES_EGL_image\n        PFNGLEGLIMAGETARGETTEXTURE2DOESPROC EGLImageTargetTexture2DOES = nullptr;\n        PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC EGLImageTargetRenderbufferStorageOES = nullptr;\n\n        // GL_EXT_texture_format_BGRA8888\n\n        // GL_APPLE_texture_format_BGRA8888\n\n\n        // GL_ANGLE_base_vertex_base_instance\n        // See crbug.com/dawn/1715 for why this is embedded\n        PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEANGLEPROC DrawArraysInstancedBaseInstanceANGLE = nullptr;\n        PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEANGLEPROC DrawElementsInstancedBaseVertexBaseInstanceANGLE = nullptr;\n        PFNGLMULTIDRAWARRAYSINSTANCEDBASEINSTANCEANGLEPROC MultiDrawArraysInstancedBaseInstanceANGLE = nullptr;\n        PFNGLMULTIDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEANGLEPROC MultiDrawElementsInstancedBaseVertexBaseInstanceANGLE = nullptr;\n\n        bool IsGLExtensionSupported(const char* extension) const;\n\n      protected:\n        MaybeError LoadDesktopGLProcs(GetProcAddress getProc, int majorVersion, int minorVersion);\n        MaybeError LoadOpenGLESProcs(GetProcAddress getProc, int majorVersion, int minorVersion);\n\n      private:\n        template<typename T>\n        MaybeError LoadProc(GetProcAddress getProc, T* memberProc, const char* name);\n        void InitializeSupportedGLExtensions();\n\n        std::unordered_set<std::string> mSupportedGLExtensionsSet;\n    };\n\n}  // namespace dawn::native::opengl\n\n#endif // DAWNNATIVE_OPENGL_OPENGLFUNCTIONSBASE_H_\n", "src/dawn/native/opengl/opengl_platform_autogen.h": "\n#include <KHR/khrplatform.h>\n\nusing GLvoid = void;\nusing GLchar = char;\nusing GLenum = unsigned int;\nusing GLboolean = unsigned char;\nusing GLbitfield = unsigned int;\nusing GLbyte = khronos_int8_t;\nusing GLshort = short;\nusing GLint = int;\nusing GLsizei = int;\nusing GLubyte = khronos_uint8_t;\nusing GLushort = unsigned short;\nusing GLuint = unsigned int;\nusing GLfloat = khronos_float_t;\nusing GLclampf = khronos_float_t;\nusing GLdouble = double;\nusing GLclampd = double;\nusing GLfixed = khronos_int32_t;\nusing GLintptr = khronos_intptr_t;\nusing GLsizeiptr = khronos_ssize_t;\nusing GLhalf = unsigned short;\nusing GLint64 = khronos_int64_t;\nusing GLuint64 = khronos_uint64_t;\nusing GLsync = struct __GLsync*;\nusing GLeglImageOES = void*;\nusing GLDEBUGPROC = void(KHRONOS_APIENTRY*)(GLenum source,\n                                            GLenum type,\n                                            GLuint id,\n                                            GLenum severity,\n                                            GLsizei length,\n                                            const GLchar* message,\n                                            const void* userParam);\nusing GLDEBUGPROCARB = GLDEBUGPROC;\nusing GLDEBUGPROCKHR = GLDEBUGPROC;\nusing GLDEBUGPROCAMD = void(KHRONOS_APIENTRY*)(GLuint id,\n                                               GLenum category,\n                                               GLenum severity,\n                                               GLsizei length,\n                                               const GLchar* message,\n                                               void* userParam);\n\n// OpenGL ES 2.0\n#define GL_DEPTH_BUFFER_BIT 0x00000100\n#define GL_STENCIL_BUFFER_BIT 0x00000400\n#define GL_COLOR_BUFFER_BIT 0x00004000\n#define GL_FALSE 0\n#define GL_TRUE 1\n#define GL_POINTS 0x0000\n#define GL_LINES 0x0001\n#define GL_LINE_LOOP 0x0002\n#define GL_LINE_STRIP 0x0003\n#define GL_TRIANGLES 0x0004\n#define GL_TRIANGLE_STRIP 0x0005\n#define GL_TRIANGLE_FAN 0x0006\n#define GL_ZERO 0\n#define GL_ONE 1\n#define GL_SRC_COLOR 0x0300\n#define GL_ONE_MINUS_SRC_COLOR 0x0301\n#define GL_SRC_ALPHA 0x0302\n#define GL_ONE_MINUS_SRC_ALPHA 0x0303\n#define GL_DST_ALPHA 0x0304\n#define GL_ONE_MINUS_DST_ALPHA 0x0305\n#define GL_DST_COLOR 0x0306\n#define GL_ONE_MINUS_DST_COLOR 0x0307\n#define GL_SRC_ALPHA_SATURATE 0x0308\n#define GL_FUNC_ADD 0x8006\n#define GL_BLEND_EQUATION 0x8009\n#define GL_BLEND_EQUATION_RGB 0x8009\n#define GL_BLEND_EQUATION_ALPHA 0x883D\n#define GL_FUNC_SUBTRACT 0x800A\n#define GL_FUNC_REVERSE_SUBTRACT 0x800B\n#define GL_BLEND_DST_RGB 0x80C8\n#define GL_BLEND_SRC_RGB 0x80C9\n#define GL_BLEND_DST_ALPHA 0x80CA\n#define GL_BLEND_SRC_ALPHA 0x80CB\n#define GL_CONSTANT_COLOR 0x8001\n#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002\n#define GL_CONSTANT_ALPHA 0x8003\n#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004\n#define GL_BLEND_COLOR 0x8005\n#define GL_ARRAY_BUFFER 0x8892\n#define GL_ELEMENT_ARRAY_BUFFER 0x8893\n#define GL_ARRAY_BUFFER_BINDING 0x8894\n#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895\n#define GL_STREAM_DRAW 0x88E0\n#define GL_STATIC_DRAW 0x88E4\n#define GL_DYNAMIC_DRAW 0x88E8\n#define GL_BUFFER_SIZE 0x8764\n#define GL_BUFFER_USAGE 0x8765\n#define GL_CURRENT_VERTEX_ATTRIB 0x8626\n#define GL_FRONT 0x0404\n#define GL_BACK 0x0405\n#define GL_FRONT_AND_BACK 0x0408\n#define GL_TEXTURE_2D 0x0DE1\n#define GL_CULL_FACE 0x0B44\n#define GL_BLEND 0x0BE2\n#define GL_DITHER 0x0BD0\n#define GL_STENCIL_TEST 0x0B90\n#define GL_DEPTH_TEST 0x0B71\n#define GL_SCISSOR_TEST 0x0C11\n#define GL_POLYGON_OFFSET_FILL 0x8037\n#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E\n#define GL_SAMPLE_COVERAGE 0x80A0\n#define GL_NO_ERROR 0\n#define GL_INVALID_ENUM 0x0500\n#define GL_INVALID_VALUE 0x0501\n#define GL_INVALID_OPERATION 0x0502\n#define GL_OUT_OF_MEMORY 0x0505\n#define GL_CW 0x0900\n#define GL_CCW 0x0901\n#define GL_LINE_WIDTH 0x0B21\n#define GL_ALIASED_POINT_SIZE_RANGE 0x846D\n#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E\n#define GL_CULL_FACE_MODE 0x0B45\n#define GL_FRONT_FACE 0x0B46\n#define GL_DEPTH_RANGE 0x0B70\n#define GL_DEPTH_WRITEMASK 0x0B72\n#define GL_DEPTH_CLEAR_VALUE 0x0B73\n#define GL_DEPTH_FUNC 0x0B74\n#define GL_STENCIL_CLEAR_VALUE 0x0B91\n#define GL_STENCIL_FUNC 0x0B92\n#define GL_STENCIL_FAIL 0x0B94\n#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95\n#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96\n#define GL_STENCIL_REF 0x0B97\n#define GL_STENCIL_VALUE_MASK 0x0B93\n#define GL_STENCIL_WRITEMASK 0x0B98\n#define GL_STENCIL_BACK_FUNC 0x8800\n#define GL_STENCIL_BACK_FAIL 0x8801\n#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802\n#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803\n#define GL_STENCIL_BACK_REF 0x8CA3\n#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4\n#define GL_STENCIL_BACK_WRITEMASK 0x8CA5\n#define GL_VIEWPORT 0x0BA2\n#define GL_SCISSOR_BOX 0x0C10\n#define GL_COLOR_CLEAR_VALUE 0x0C22\n#define GL_COLOR_WRITEMASK 0x0C23\n#define GL_UNPACK_ALIGNMENT 0x0CF5\n#define GL_PACK_ALIGNMENT 0x0D05\n#define GL_MAX_TEXTURE_SIZE 0x0D33\n#define GL_MAX_VIEWPORT_DIMS 0x0D3A\n#define GL_SUBPIXEL_BITS 0x0D50\n#define GL_RED_BITS 0x0D52\n#define GL_GREEN_BITS 0x0D53\n#define GL_BLUE_BITS 0x0D54\n#define GL_ALPHA_BITS 0x0D55\n#define GL_DEPTH_BITS 0x0D56\n#define GL_STENCIL_BITS 0x0D57\n#define GL_POLYGON_OFFSET_UNITS 0x2A00\n#define GL_POLYGON_OFFSET_FACTOR 0x8038\n#define GL_TEXTURE_BINDING_2D 0x8069\n#define GL_SAMPLE_BUFFERS 0x80A8\n#define GL_SAMPLES 0x80A9\n#define GL_SAMPLE_COVERAGE_VALUE 0x80AA\n#define GL_SAMPLE_COVERAGE_INVERT 0x80AB\n#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2\n#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3\n#define GL_DONT_CARE 0x1100\n#define GL_FASTEST 0x1101\n#define GL_NICEST 0x1102\n#define GL_GENERATE_MIPMAP_HINT 0x8192\n#define GL_BYTE 0x1400\n#define GL_UNSIGNED_BYTE 0x1401\n#define GL_SHORT 0x1402\n#define GL_UNSIGNED_SHORT 0x1403\n#define GL_INT 0x1404\n#define GL_UNSIGNED_INT 0x1405\n#define GL_FLOAT 0x1406\n#define GL_FIXED 0x140C\n#define GL_DEPTH_COMPONENT 0x1902\n#define GL_ALPHA 0x1906\n#define GL_RGB 0x1907\n#define GL_RGBA 0x1908\n#define GL_LUMINANCE 0x1909\n#define GL_LUMINANCE_ALPHA 0x190A\n#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033\n#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034\n#define GL_UNSIGNED_SHORT_5_6_5 0x8363\n#define GL_FRAGMENT_SHADER 0x8B30\n#define GL_VERTEX_SHADER 0x8B31\n#define GL_MAX_VERTEX_ATTRIBS 0x8869\n#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB\n#define GL_MAX_VARYING_VECTORS 0x8DFC\n#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D\n#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C\n#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872\n#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD\n#define GL_SHADER_TYPE 0x8B4F\n#define GL_DELETE_STATUS 0x8B80\n#define GL_LINK_STATUS 0x8B82\n#define GL_VALIDATE_STATUS 0x8B83\n#define GL_ATTACHED_SHADERS 0x8B85\n#define GL_ACTIVE_UNIFORMS 0x8B86\n#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87\n#define GL_ACTIVE_ATTRIBUTES 0x8B89\n#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A\n#define GL_SHADING_LANGUAGE_VERSION 0x8B8C\n#define GL_CURRENT_PROGRAM 0x8B8D\n#define GL_NEVER 0x0200\n#define GL_LESS 0x0201\n#define GL_EQUAL 0x0202\n#define GL_LEQUAL 0x0203\n#define GL_GREATER 0x0204\n#define GL_NOTEQUAL 0x0205\n#define GL_GEQUAL 0x0206\n#define GL_ALWAYS 0x0207\n#define GL_KEEP 0x1E00\n#define GL_REPLACE 0x1E01\n#define GL_INCR 0x1E02\n#define GL_DECR 0x1E03\n#define GL_INVERT 0x150A\n#define GL_INCR_WRAP 0x8507\n#define GL_DECR_WRAP 0x8508\n#define GL_VENDOR 0x1F00\n#define GL_RENDERER 0x1F01\n#define GL_VERSION 0x1F02\n#define GL_EXTENSIONS 0x1F03\n#define GL_NEAREST 0x2600\n#define GL_LINEAR 0x2601\n#define GL_NEAREST_MIPMAP_NEAREST 0x2700\n#define GL_LINEAR_MIPMAP_NEAREST 0x2701\n#define GL_NEAREST_MIPMAP_LINEAR 0x2702\n#define GL_LINEAR_MIPMAP_LINEAR 0x2703\n#define GL_TEXTURE_MAG_FILTER 0x2800\n#define GL_TEXTURE_MIN_FILTER 0x2801\n#define GL_TEXTURE_WRAP_S 0x2802\n#define GL_TEXTURE_WRAP_T 0x2803\n#define GL_TEXTURE 0x1702\n#define GL_TEXTURE_CUBE_MAP 0x8513\n#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514\n#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515\n#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516\n#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517\n#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518\n#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519\n#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A\n#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C\n#define GL_TEXTURE0 0x84C0\n#define GL_TEXTURE1 0x84C1\n#define GL_TEXTURE2 0x84C2\n#define GL_TEXTURE3 0x84C3\n#define GL_TEXTURE4 0x84C4\n#define GL_TEXTURE5 0x84C5\n#define GL_TEXTURE6 0x84C6\n#define GL_TEXTURE7 0x84C7\n#define GL_TEXTURE8 0x84C8\n#define GL_TEXTURE9 0x84C9\n#define GL_TEXTURE10 0x84CA\n#define GL_TEXTURE11 0x84CB\n#define GL_TEXTURE12 0x84CC\n#define GL_TEXTURE13 0x84CD\n#define GL_TEXTURE14 0x84CE\n#define GL_TEXTURE15 0x84CF\n#define GL_TEXTURE16 0x84D0\n#define GL_TEXTURE17 0x84D1\n#define GL_TEXTURE18 0x84D2\n#define GL_TEXTURE19 0x84D3\n#define GL_TEXTURE20 0x84D4\n#define GL_TEXTURE21 0x84D5\n#define GL_TEXTURE22 0x84D6\n#define GL_TEXTURE23 0x84D7\n#define GL_TEXTURE24 0x84D8\n#define GL_TEXTURE25 0x84D9\n#define GL_TEXTURE26 0x84DA\n#define GL_TEXTURE27 0x84DB\n#define GL_TEXTURE28 0x84DC\n#define GL_TEXTURE29 0x84DD\n#define GL_TEXTURE30 0x84DE\n#define GL_TEXTURE31 0x84DF\n#define GL_ACTIVE_TEXTURE 0x84E0\n#define GL_REPEAT 0x2901\n#define GL_CLAMP_TO_EDGE 0x812F\n#define GL_MIRRORED_REPEAT 0x8370\n#define GL_FLOAT_VEC2 0x8B50\n#define GL_FLOAT_VEC3 0x8B51\n#define GL_FLOAT_VEC4 0x8B52\n#define GL_INT_VEC2 0x8B53\n#define GL_INT_VEC3 0x8B54\n#define GL_INT_VEC4 0x8B55\n#define GL_BOOL 0x8B56\n#define GL_BOOL_VEC2 0x8B57\n#define GL_BOOL_VEC3 0x8B58\n#define GL_BOOL_VEC4 0x8B59\n#define GL_FLOAT_MAT2 0x8B5A\n#define GL_FLOAT_MAT3 0x8B5B\n#define GL_FLOAT_MAT4 0x8B5C\n#define GL_SAMPLER_2D 0x8B5E\n#define GL_SAMPLER_CUBE 0x8B60\n#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622\n#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623\n#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624\n#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625\n#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A\n#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645\n#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F\n#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A\n#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B\n#define GL_COMPILE_STATUS 0x8B81\n#define GL_INFO_LOG_LENGTH 0x8B84\n#define GL_SHADER_SOURCE_LENGTH 0x8B88\n#define GL_SHADER_COMPILER 0x8DFA\n#define GL_SHADER_BINARY_FORMATS 0x8DF8\n#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9\n#define GL_LOW_FLOAT 0x8DF0\n#define GL_MEDIUM_FLOAT 0x8DF1\n#define GL_HIGH_FLOAT 0x8DF2\n#define GL_LOW_INT 0x8DF3\n#define GL_MEDIUM_INT 0x8DF4\n#define GL_HIGH_INT 0x8DF5\n#define GL_FRAMEBUFFER 0x8D40\n#define GL_RENDERBUFFER 0x8D41\n#define GL_RGBA4 0x8056\n#define GL_RGB5_A1 0x8057\n#define GL_RGB565 0x8D62\n#define GL_DEPTH_COMPONENT16 0x81A5\n#define GL_STENCIL_INDEX8 0x8D48\n#define GL_RENDERBUFFER_WIDTH 0x8D42\n#define GL_RENDERBUFFER_HEIGHT 0x8D43\n#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44\n#define GL_RENDERBUFFER_RED_SIZE 0x8D50\n#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51\n#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52\n#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53\n#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54\n#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55\n#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0\n#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1\n#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2\n#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3\n#define GL_COLOR_ATTACHMENT0 0x8CE0\n#define GL_DEPTH_ATTACHMENT 0x8D00\n#define GL_STENCIL_ATTACHMENT 0x8D20\n#define GL_NONE 0\n#define GL_FRAMEBUFFER_COMPLETE 0x8CD5\n#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6\n#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7\n#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9\n#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD\n#define GL_FRAMEBUFFER_BINDING 0x8CA6\n#define GL_RENDERBUFFER_BINDING 0x8CA7\n#define GL_MAX_RENDERBUFFER_SIZE 0x84E8\n#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506\n\nusing PFNGLACTIVETEXTUREPROC = void(KHRONOS_APIENTRY *)(GLenum texture);\nusing PFNGLATTACHSHADERPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint shader);\nusing PFNGLBINDATTRIBLOCATIONPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint index, const GLchar * name);\nusing PFNGLBINDBUFFERPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint buffer);\nusing PFNGLBINDFRAMEBUFFERPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint framebuffer);\nusing PFNGLBINDRENDERBUFFERPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint renderbuffer);\nusing PFNGLBINDTEXTUREPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint texture);\nusing PFNGLBLENDCOLORPROC = void(KHRONOS_APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);\nusing PFNGLBLENDEQUATIONPROC = void(KHRONOS_APIENTRY *)(GLenum mode);\nusing PFNGLBLENDEQUATIONSEPARATEPROC = void(KHRONOS_APIENTRY *)(GLenum modeRGB, GLenum modeAlpha);\nusing PFNGLBLENDFUNCPROC = void(KHRONOS_APIENTRY *)(GLenum sfactor, GLenum dfactor);\nusing PFNGLBLENDFUNCSEPARATEPROC = void(KHRONOS_APIENTRY *)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);\nusing PFNGLBUFFERDATAPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizeiptr size, const void * data, GLenum usage);\nusing PFNGLBUFFERSUBDATAPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);\nusing PFNGLCHECKFRAMEBUFFERSTATUSPROC = GLenum(KHRONOS_APIENTRY *)(GLenum target);\nusing PFNGLCLEARPROC = void(KHRONOS_APIENTRY *)(GLbitfield mask);\nusing PFNGLCLEARCOLORPROC = void(KHRONOS_APIENTRY *)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);\nusing PFNGLCLEARDEPTHFPROC = void(KHRONOS_APIENTRY *)(GLfloat d);\nusing PFNGLCLEARSTENCILPROC = void(KHRONOS_APIENTRY *)(GLint s);\nusing PFNGLCOLORMASKPROC = void(KHRONOS_APIENTRY *)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);\nusing PFNGLCOMPILESHADERPROC = void(KHRONOS_APIENTRY *)(GLuint shader);\nusing PFNGLCOMPRESSEDTEXIMAGE2DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);\nusing PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);\nusing PFNGLCOPYTEXIMAGE2DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);\nusing PFNGLCOPYTEXSUBIMAGE2DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);\nusing PFNGLCREATEPROGRAMPROC = GLuint(KHRONOS_APIENTRY *)();\nusing PFNGLCREATESHADERPROC = GLuint(KHRONOS_APIENTRY *)(GLenum type);\nusing PFNGLCULLFACEPROC = void(KHRONOS_APIENTRY *)(GLenum mode);\nusing PFNGLDELETEBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, const GLuint * buffers);\nusing PFNGLDELETEFRAMEBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, const GLuint * framebuffers);\nusing PFNGLDELETEPROGRAMPROC = void(KHRONOS_APIENTRY *)(GLuint program);\nusing PFNGLDELETERENDERBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, const GLuint * renderbuffers);\nusing PFNGLDELETESHADERPROC = void(KHRONOS_APIENTRY *)(GLuint shader);\nusing PFNGLDELETETEXTURESPROC = void(KHRONOS_APIENTRY *)(GLsizei n, const GLuint * textures);\nusing PFNGLDEPTHFUNCPROC = void(KHRONOS_APIENTRY *)(GLenum func);\nusing PFNGLDEPTHMASKPROC = void(KHRONOS_APIENTRY *)(GLboolean flag);\nusing PFNGLDEPTHRANGEFPROC = void(KHRONOS_APIENTRY *)(GLfloat n, GLfloat f);\nusing PFNGLDETACHSHADERPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint shader);\nusing PFNGLDISABLEPROC = void(KHRONOS_APIENTRY *)(GLenum cap);\nusing PFNGLDISABLEVERTEXATTRIBARRAYPROC = void(KHRONOS_APIENTRY *)(GLuint index);\nusing PFNGLDRAWARRAYSPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLint first, GLsizei count);\nusing PFNGLDRAWELEMENTSPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const void * indices);\nusing PFNGLENABLEPROC = void(KHRONOS_APIENTRY *)(GLenum cap);\nusing PFNGLENABLEVERTEXATTRIBARRAYPROC = void(KHRONOS_APIENTRY *)(GLuint index);\nusing PFNGLFINISHPROC = void(KHRONOS_APIENTRY *)();\nusing PFNGLFLUSHPROC = void(KHRONOS_APIENTRY *)();\nusing PFNGLFRAMEBUFFERRENDERBUFFERPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);\nusing PFNGLFRAMEBUFFERTEXTURE2DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\nusing PFNGLFRONTFACEPROC = void(KHRONOS_APIENTRY *)(GLenum mode);\nusing PFNGLGENBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * buffers);\nusing PFNGLGENERATEMIPMAPPROC = void(KHRONOS_APIENTRY *)(GLenum target);\nusing PFNGLGENFRAMEBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * framebuffers);\nusing PFNGLGENRENDERBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * renderbuffers);\nusing PFNGLGENTEXTURESPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * textures);\nusing PFNGLGETACTIVEATTRIBPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);\nusing PFNGLGETACTIVEUNIFORMPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);\nusing PFNGLGETATTACHEDSHADERSPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);\nusing PFNGLGETATTRIBLOCATIONPROC = GLint(KHRONOS_APIENTRY *)(GLuint program, const GLchar * name);\nusing PFNGLGETBOOLEANVPROC = void(KHRONOS_APIENTRY *)(GLenum pname, GLboolean * data);\nusing PFNGLGETBUFFERPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, GLint * params);\nusing PFNGLGETERRORPROC = GLenum(KHRONOS_APIENTRY *)();\nusing PFNGLGETFLOATVPROC = void(KHRONOS_APIENTRY *)(GLenum pname, GLfloat * data);\nusing PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum attachment, GLenum pname, GLint * params);\nusing PFNGLGETINTEGERVPROC = void(KHRONOS_APIENTRY *)(GLenum pname, GLint * data);\nusing PFNGLGETPROGRAMIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLenum pname, GLint * params);\nusing PFNGLGETPROGRAMINFOLOGPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);\nusing PFNGLGETRENDERBUFFERPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, GLint * params);\nusing PFNGLGETSHADERIVPROC = void(KHRONOS_APIENTRY *)(GLuint shader, GLenum pname, GLint * params);\nusing PFNGLGETSHADERINFOLOGPROC = void(KHRONOS_APIENTRY *)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);\nusing PFNGLGETSHADERPRECISIONFORMATPROC = void(KHRONOS_APIENTRY *)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);\nusing PFNGLGETSHADERSOURCEPROC = void(KHRONOS_APIENTRY *)(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);\nusing PFNGLGETSTRINGPROC = const GLubyte *(KHRONOS_APIENTRY *)(GLenum name);\nusing PFNGLGETTEXPARAMETERFVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, GLfloat * params);\nusing PFNGLGETTEXPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, GLint * params);\nusing PFNGLGETUNIFORMFVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLfloat * params);\nusing PFNGLGETUNIFORMIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLint * params);\nusing PFNGLGETUNIFORMLOCATIONPROC = GLint(KHRONOS_APIENTRY *)(GLuint program, const GLchar * name);\nusing PFNGLGETVERTEXATTRIBFVPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum pname, GLfloat * params);\nusing PFNGLGETVERTEXATTRIBIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum pname, GLint * params);\nusing PFNGLGETVERTEXATTRIBPOINTERVPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum pname, void ** pointer);\nusing PFNGLHINTPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum mode);\nusing PFNGLISBUFFERPROC = GLboolean(KHRONOS_APIENTRY *)(GLuint buffer);\nusing PFNGLISENABLEDPROC = GLboolean(KHRONOS_APIENTRY *)(GLenum cap);\nusing PFNGLISFRAMEBUFFERPROC = GLboolean(KHRONOS_APIENTRY *)(GLuint framebuffer);\nusing PFNGLISPROGRAMPROC = GLboolean(KHRONOS_APIENTRY *)(GLuint program);\nusing PFNGLISRENDERBUFFERPROC = GLboolean(KHRONOS_APIENTRY *)(GLuint renderbuffer);\nusing PFNGLISSHADERPROC = GLboolean(KHRONOS_APIENTRY *)(GLuint shader);\nusing PFNGLISTEXTUREPROC = GLboolean(KHRONOS_APIENTRY *)(GLuint texture);\nusing PFNGLLINEWIDTHPROC = void(KHRONOS_APIENTRY *)(GLfloat width);\nusing PFNGLLINKPROGRAMPROC = void(KHRONOS_APIENTRY *)(GLuint program);\nusing PFNGLPIXELSTOREIPROC = void(KHRONOS_APIENTRY *)(GLenum pname, GLint param);\nusing PFNGLPOLYGONOFFSETPROC = void(KHRONOS_APIENTRY *)(GLfloat factor, GLfloat units);\nusing PFNGLREADPIXELSPROC = void(KHRONOS_APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels);\nusing PFNGLRELEASESHADERCOMPILERPROC = void(KHRONOS_APIENTRY *)();\nusing PFNGLRENDERBUFFERSTORAGEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);\nusing PFNGLSAMPLECOVERAGEPROC = void(KHRONOS_APIENTRY *)(GLfloat value, GLboolean invert);\nusing PFNGLSCISSORPROC = void(KHRONOS_APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height);\nusing PFNGLSHADERBINARYPROC = void(KHRONOS_APIENTRY *)(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length);\nusing PFNGLSHADERSOURCEPROC = void(KHRONOS_APIENTRY *)(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);\nusing PFNGLSTENCILFUNCPROC = void(KHRONOS_APIENTRY *)(GLenum func, GLint ref, GLuint mask);\nusing PFNGLSTENCILFUNCSEPARATEPROC = void(KHRONOS_APIENTRY *)(GLenum face, GLenum func, GLint ref, GLuint mask);\nusing PFNGLSTENCILMASKPROC = void(KHRONOS_APIENTRY *)(GLuint mask);\nusing PFNGLSTENCILMASKSEPARATEPROC = void(KHRONOS_APIENTRY *)(GLenum face, GLuint mask);\nusing PFNGLSTENCILOPPROC = void(KHRONOS_APIENTRY *)(GLenum fail, GLenum zfail, GLenum zpass);\nusing PFNGLSTENCILOPSEPARATEPROC = void(KHRONOS_APIENTRY *)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);\nusing PFNGLTEXIMAGE2DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels);\nusing PFNGLTEXPARAMETERFPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, GLfloat param);\nusing PFNGLTEXPARAMETERFVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, const GLfloat * params);\nusing PFNGLTEXPARAMETERIPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, GLint param);\nusing PFNGLTEXPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, const GLint * params);\nusing PFNGLTEXSUBIMAGE2DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);\nusing PFNGLUNIFORM1FPROC = void(KHRONOS_APIENTRY *)(GLint location, GLfloat v0);\nusing PFNGLUNIFORM1FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLfloat * value);\nusing PFNGLUNIFORM1IPROC = void(KHRONOS_APIENTRY *)(GLint location, GLint v0);\nusing PFNGLUNIFORM1IVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLint * value);\nusing PFNGLUNIFORM2FPROC = void(KHRONOS_APIENTRY *)(GLint location, GLfloat v0, GLfloat v1);\nusing PFNGLUNIFORM2FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLfloat * value);\nusing PFNGLUNIFORM2IPROC = void(KHRONOS_APIENTRY *)(GLint location, GLint v0, GLint v1);\nusing PFNGLUNIFORM2IVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLint * value);\nusing PFNGLUNIFORM3FPROC = void(KHRONOS_APIENTRY *)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);\nusing PFNGLUNIFORM3FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLfloat * value);\nusing PFNGLUNIFORM3IPROC = void(KHRONOS_APIENTRY *)(GLint location, GLint v0, GLint v1, GLint v2);\nusing PFNGLUNIFORM3IVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLint * value);\nusing PFNGLUNIFORM4FPROC = void(KHRONOS_APIENTRY *)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);\nusing PFNGLUNIFORM4FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLfloat * value);\nusing PFNGLUNIFORM4IPROC = void(KHRONOS_APIENTRY *)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);\nusing PFNGLUNIFORM4IVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLint * value);\nusing PFNGLUNIFORMMATRIX2FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLUNIFORMMATRIX3FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLUNIFORMMATRIX4FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLUSEPROGRAMPROC = void(KHRONOS_APIENTRY *)(GLuint program);\nusing PFNGLVALIDATEPROGRAMPROC = void(KHRONOS_APIENTRY *)(GLuint program);\nusing PFNGLVERTEXATTRIB1FPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLfloat x);\nusing PFNGLVERTEXATTRIB1FVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLfloat * v);\nusing PFNGLVERTEXATTRIB2FPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLfloat x, GLfloat y);\nusing PFNGLVERTEXATTRIB2FVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLfloat * v);\nusing PFNGLVERTEXATTRIB3FPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z);\nusing PFNGLVERTEXATTRIB3FVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLfloat * v);\nusing PFNGLVERTEXATTRIB4FPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);\nusing PFNGLVERTEXATTRIB4FVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLfloat * v);\nusing PFNGLVERTEXATTRIBPOINTERPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);\nusing PFNGLVIEWPORTPROC = void(KHRONOS_APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height);\n\n// OpenGL ES 3.0\n#define GL_READ_BUFFER 0x0C02\n#define GL_UNPACK_ROW_LENGTH 0x0CF2\n#define GL_UNPACK_SKIP_ROWS 0x0CF3\n#define GL_UNPACK_SKIP_PIXELS 0x0CF4\n#define GL_PACK_ROW_LENGTH 0x0D02\n#define GL_PACK_SKIP_ROWS 0x0D03\n#define GL_PACK_SKIP_PIXELS 0x0D04\n#define GL_COLOR 0x1800\n#define GL_DEPTH 0x1801\n#define GL_STENCIL 0x1802\n#define GL_RED 0x1903\n#define GL_RGB8 0x8051\n#define GL_RGBA8 0x8058\n#define GL_RGB10_A2 0x8059\n#define GL_TEXTURE_BINDING_3D 0x806A\n#define GL_UNPACK_SKIP_IMAGES 0x806D\n#define GL_UNPACK_IMAGE_HEIGHT 0x806E\n#define GL_TEXTURE_3D 0x806F\n#define GL_TEXTURE_WRAP_R 0x8072\n#define GL_MAX_3D_TEXTURE_SIZE 0x8073\n#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368\n#define GL_MAX_ELEMENTS_VERTICES 0x80E8\n#define GL_MAX_ELEMENTS_INDICES 0x80E9\n#define GL_TEXTURE_MIN_LOD 0x813A\n#define GL_TEXTURE_MAX_LOD 0x813B\n#define GL_TEXTURE_BASE_LEVEL 0x813C\n#define GL_TEXTURE_MAX_LEVEL 0x813D\n#define GL_MIN 0x8007\n#define GL_MAX 0x8008\n#define GL_DEPTH_COMPONENT24 0x81A6\n#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD\n#define GL_TEXTURE_COMPARE_MODE 0x884C\n#define GL_TEXTURE_COMPARE_FUNC 0x884D\n#define GL_CURRENT_QUERY 0x8865\n#define GL_QUERY_RESULT 0x8866\n#define GL_QUERY_RESULT_AVAILABLE 0x8867\n#define GL_BUFFER_MAPPED 0x88BC\n#define GL_BUFFER_MAP_POINTER 0x88BD\n#define GL_STREAM_READ 0x88E1\n#define GL_STREAM_COPY 0x88E2\n#define GL_STATIC_READ 0x88E5\n#define GL_STATIC_COPY 0x88E6\n#define GL_DYNAMIC_READ 0x88E9\n#define GL_DYNAMIC_COPY 0x88EA\n#define GL_MAX_DRAW_BUFFERS 0x8824\n#define GL_DRAW_BUFFER0 0x8825\n#define GL_DRAW_BUFFER1 0x8826\n#define GL_DRAW_BUFFER2 0x8827\n#define GL_DRAW_BUFFER3 0x8828\n#define GL_DRAW_BUFFER4 0x8829\n#define GL_DRAW_BUFFER5 0x882A\n#define GL_DRAW_BUFFER6 0x882B\n#define GL_DRAW_BUFFER7 0x882C\n#define GL_DRAW_BUFFER8 0x882D\n#define GL_DRAW_BUFFER9 0x882E\n#define GL_DRAW_BUFFER10 0x882F\n#define GL_DRAW_BUFFER11 0x8830\n#define GL_DRAW_BUFFER12 0x8831\n#define GL_DRAW_BUFFER13 0x8832\n#define GL_DRAW_BUFFER14 0x8833\n#define GL_DRAW_BUFFER15 0x8834\n#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49\n#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A\n#define GL_SAMPLER_3D 0x8B5F\n#define GL_SAMPLER_2D_SHADOW 0x8B62\n#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B\n#define GL_PIXEL_PACK_BUFFER 0x88EB\n#define GL_PIXEL_UNPACK_BUFFER 0x88EC\n#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED\n#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF\n#define GL_FLOAT_MAT2x3 0x8B65\n#define GL_FLOAT_MAT2x4 0x8B66\n#define GL_FLOAT_MAT3x2 0x8B67\n#define GL_FLOAT_MAT3x4 0x8B68\n#define GL_FLOAT_MAT4x2 0x8B69\n#define GL_FLOAT_MAT4x3 0x8B6A\n#define GL_SRGB 0x8C40\n#define GL_SRGB8 0x8C41\n#define GL_SRGB8_ALPHA8 0x8C43\n#define GL_COMPARE_REF_TO_TEXTURE 0x884E\n#define GL_MAJOR_VERSION 0x821B\n#define GL_MINOR_VERSION 0x821C\n#define GL_NUM_EXTENSIONS 0x821D\n#define GL_RGBA32F 0x8814\n#define GL_RGB32F 0x8815\n#define GL_RGBA16F 0x881A\n#define GL_RGB16F 0x881B\n#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD\n#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF\n#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904\n#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905\n#define GL_MAX_VARYING_COMPONENTS 0x8B4B\n#define GL_TEXTURE_2D_ARRAY 0x8C1A\n#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D\n#define GL_R11F_G11F_B10F 0x8C3A\n#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B\n#define GL_RGB9_E5 0x8C3D\n#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E\n#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76\n#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F\n#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80\n#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83\n#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84\n#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85\n#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88\n#define GL_RASTERIZER_DISCARD 0x8C89\n#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A\n#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B\n#define GL_INTERLEAVED_ATTRIBS 0x8C8C\n#define GL_SEPARATE_ATTRIBS 0x8C8D\n#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E\n#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F\n#define GL_RGBA32UI 0x8D70\n#define GL_RGB32UI 0x8D71\n#define GL_RGBA16UI 0x8D76\n#define GL_RGB16UI 0x8D77\n#define GL_RGBA8UI 0x8D7C\n#define GL_RGB8UI 0x8D7D\n#define GL_RGBA32I 0x8D82\n#define GL_RGB32I 0x8D83\n#define GL_RGBA16I 0x8D88\n#define GL_RGB16I 0x8D89\n#define GL_RGBA8I 0x8D8E\n#define GL_RGB8I 0x8D8F\n#define GL_RED_INTEGER 0x8D94\n#define GL_RGB_INTEGER 0x8D98\n#define GL_RGBA_INTEGER 0x8D99\n#define GL_SAMPLER_2D_ARRAY 0x8DC1\n#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4\n#define GL_SAMPLER_CUBE_SHADOW 0x8DC5\n#define GL_UNSIGNED_INT_VEC2 0x8DC6\n#define GL_UNSIGNED_INT_VEC3 0x8DC7\n#define GL_UNSIGNED_INT_VEC4 0x8DC8\n#define GL_INT_SAMPLER_2D 0x8DCA\n#define GL_INT_SAMPLER_3D 0x8DCB\n#define GL_INT_SAMPLER_CUBE 0x8DCC\n#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF\n#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2\n#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3\n#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4\n#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7\n#define GL_BUFFER_ACCESS_FLAGS 0x911F\n#define GL_BUFFER_MAP_LENGTH 0x9120\n#define GL_BUFFER_MAP_OFFSET 0x9121\n#define GL_DEPTH_COMPONENT32F 0x8CAC\n#define GL_DEPTH32F_STENCIL8 0x8CAD\n#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD\n#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210\n#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211\n#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212\n#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213\n#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214\n#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215\n#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216\n#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217\n#define GL_FRAMEBUFFER_DEFAULT 0x8218\n#define GL_FRAMEBUFFER_UNDEFINED 0x8219\n#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A\n#define GL_DEPTH_STENCIL 0x84F9\n#define GL_UNSIGNED_INT_24_8 0x84FA\n#define GL_DEPTH24_STENCIL8 0x88F0\n#define GL_UNSIGNED_NORMALIZED 0x8C17\n#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6\n#define GL_READ_FRAMEBUFFER 0x8CA8\n#define GL_DRAW_FRAMEBUFFER 0x8CA9\n#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA\n#define GL_RENDERBUFFER_SAMPLES 0x8CAB\n#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4\n#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF\n#define GL_COLOR_ATTACHMENT1 0x8CE1\n#define GL_COLOR_ATTACHMENT2 0x8CE2\n#define GL_COLOR_ATTACHMENT3 0x8CE3\n#define GL_COLOR_ATTACHMENT4 0x8CE4\n#define GL_COLOR_ATTACHMENT5 0x8CE5\n#define GL_COLOR_ATTACHMENT6 0x8CE6\n#define GL_COLOR_ATTACHMENT7 0x8CE7\n#define GL_COLOR_ATTACHMENT8 0x8CE8\n#define GL_COLOR_ATTACHMENT9 0x8CE9\n#define GL_COLOR_ATTACHMENT10 0x8CEA\n#define GL_COLOR_ATTACHMENT11 0x8CEB\n#define GL_COLOR_ATTACHMENT12 0x8CEC\n#define GL_COLOR_ATTACHMENT13 0x8CED\n#define GL_COLOR_ATTACHMENT14 0x8CEE\n#define GL_COLOR_ATTACHMENT15 0x8CEF\n#define GL_COLOR_ATTACHMENT16 0x8CF0\n#define GL_COLOR_ATTACHMENT17 0x8CF1\n#define GL_COLOR_ATTACHMENT18 0x8CF2\n#define GL_COLOR_ATTACHMENT19 0x8CF3\n#define GL_COLOR_ATTACHMENT20 0x8CF4\n#define GL_COLOR_ATTACHMENT21 0x8CF5\n#define GL_COLOR_ATTACHMENT22 0x8CF6\n#define GL_COLOR_ATTACHMENT23 0x8CF7\n#define GL_COLOR_ATTACHMENT24 0x8CF8\n#define GL_COLOR_ATTACHMENT25 0x8CF9\n#define GL_COLOR_ATTACHMENT26 0x8CFA\n#define GL_COLOR_ATTACHMENT27 0x8CFB\n#define GL_COLOR_ATTACHMENT28 0x8CFC\n#define GL_COLOR_ATTACHMENT29 0x8CFD\n#define GL_COLOR_ATTACHMENT30 0x8CFE\n#define GL_COLOR_ATTACHMENT31 0x8CFF\n#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56\n#define GL_MAX_SAMPLES 0x8D57\n#define GL_HALF_FLOAT 0x140B\n#define GL_MAP_READ_BIT 0x0001\n#define GL_MAP_WRITE_BIT 0x0002\n#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004\n#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008\n#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010\n#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020\n#define GL_RG 0x8227\n#define GL_RG_INTEGER 0x8228\n#define GL_R8 0x8229\n#define GL_RG8 0x822B\n#define GL_R16F 0x822D\n#define GL_R32F 0x822E\n#define GL_RG16F 0x822F\n#define GL_RG32F 0x8230\n#define GL_R8I 0x8231\n#define GL_R8UI 0x8232\n#define GL_R16I 0x8233\n#define GL_R16UI 0x8234\n#define GL_R32I 0x8235\n#define GL_R32UI 0x8236\n#define GL_RG8I 0x8237\n#define GL_RG8UI 0x8238\n#define GL_RG16I 0x8239\n#define GL_RG16UI 0x823A\n#define GL_RG32I 0x823B\n#define GL_RG32UI 0x823C\n#define GL_VERTEX_ARRAY_BINDING 0x85B5\n#define GL_R8_SNORM 0x8F94\n#define GL_RG8_SNORM 0x8F95\n#define GL_RGB8_SNORM 0x8F96\n#define GL_RGBA8_SNORM 0x8F97\n#define GL_SIGNED_NORMALIZED 0x8F9C\n#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69\n#define GL_COPY_READ_BUFFER 0x8F36\n#define GL_COPY_WRITE_BUFFER 0x8F37\n#define GL_COPY_READ_BUFFER_BINDING 0x8F36\n#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37\n#define GL_UNIFORM_BUFFER 0x8A11\n#define GL_UNIFORM_BUFFER_BINDING 0x8A28\n#define GL_UNIFORM_BUFFER_START 0x8A29\n#define GL_UNIFORM_BUFFER_SIZE 0x8A2A\n#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B\n#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D\n#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E\n#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F\n#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30\n#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31\n#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33\n#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34\n#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35\n#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36\n#define GL_UNIFORM_TYPE 0x8A37\n#define GL_UNIFORM_SIZE 0x8A38\n#define GL_UNIFORM_NAME_LENGTH 0x8A39\n#define GL_UNIFORM_BLOCK_INDEX 0x8A3A\n#define GL_UNIFORM_OFFSET 0x8A3B\n#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C\n#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D\n#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E\n#define GL_UNIFORM_BLOCK_BINDING 0x8A3F\n#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40\n#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41\n#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42\n#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43\n#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44\n#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46\n#define GL_INVALID_INDEX 0xFFFFFFFF\n#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122\n#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125\n#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111\n#define GL_OBJECT_TYPE 0x9112\n#define GL_SYNC_CONDITION 0x9113\n#define GL_SYNC_STATUS 0x9114\n#define GL_SYNC_FLAGS 0x9115\n#define GL_SYNC_FENCE 0x9116\n#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117\n#define GL_UNSIGNALED 0x9118\n#define GL_SIGNALED 0x9119\n#define GL_ALREADY_SIGNALED 0x911A\n#define GL_TIMEOUT_EXPIRED 0x911B\n#define GL_CONDITION_SATISFIED 0x911C\n#define GL_WAIT_FAILED 0x911D\n#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001\n#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF\n#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE\n#define GL_ANY_SAMPLES_PASSED 0x8C2F\n#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A\n#define GL_SAMPLER_BINDING 0x8919\n#define GL_RGB10_A2UI 0x906F\n#define GL_TEXTURE_SWIZZLE_R 0x8E42\n#define GL_TEXTURE_SWIZZLE_G 0x8E43\n#define GL_TEXTURE_SWIZZLE_B 0x8E44\n#define GL_TEXTURE_SWIZZLE_A 0x8E45\n#define GL_GREEN 0x1904\n#define GL_BLUE 0x1905\n#define GL_INT_2_10_10_10_REV 0x8D9F\n#define GL_TRANSFORM_FEEDBACK 0x8E22\n#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23\n#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24\n#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25\n#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257\n#define GL_PROGRAM_BINARY_LENGTH 0x8741\n#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE\n#define GL_PROGRAM_BINARY_FORMATS 0x87FF\n#define GL_COMPRESSED_R11_EAC 0x9270\n#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271\n#define GL_COMPRESSED_RG11_EAC 0x9272\n#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273\n#define GL_COMPRESSED_RGB8_ETC2 0x9274\n#define GL_COMPRESSED_SRGB8_ETC2 0x9275\n#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276\n#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277\n#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278\n#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279\n#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F\n#define GL_MAX_ELEMENT_INDEX 0x8D6B\n#define GL_NUM_SAMPLE_COUNTS 0x9380\n#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF\n\nusing PFNGLREADBUFFERPROC = void(KHRONOS_APIENTRY *)(GLenum src);\nusing PFNGLDRAWRANGEELEMENTSPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);\nusing PFNGLTEXIMAGE3DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);\nusing PFNGLTEXSUBIMAGE3DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);\nusing PFNGLCOPYTEXSUBIMAGE3DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);\nusing PFNGLCOMPRESSEDTEXIMAGE3DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);\nusing PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);\nusing PFNGLGENQUERIESPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * ids);\nusing PFNGLDELETEQUERIESPROC = void(KHRONOS_APIENTRY *)(GLsizei n, const GLuint * ids);\nusing PFNGLISQUERYPROC = GLboolean(KHRONOS_APIENTRY *)(GLuint id);\nusing PFNGLBEGINQUERYPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint id);\nusing PFNGLENDQUERYPROC = void(KHRONOS_APIENTRY *)(GLenum target);\nusing PFNGLGETQUERYIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, GLint * params);\nusing PFNGLGETQUERYOBJECTUIVPROC = void(KHRONOS_APIENTRY *)(GLuint id, GLenum pname, GLuint * params);\nusing PFNGLUNMAPBUFFERPROC = GLboolean(KHRONOS_APIENTRY *)(GLenum target);\nusing PFNGLGETBUFFERPOINTERVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, void ** params);\nusing PFNGLDRAWBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, const GLenum * bufs);\nusing PFNGLUNIFORMMATRIX2X3FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLUNIFORMMATRIX3X2FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLUNIFORMMATRIX2X4FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLUNIFORMMATRIX4X2FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLUNIFORMMATRIX3X4FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLUNIFORMMATRIX4X3FVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLBLITFRAMEBUFFERPROC = void(KHRONOS_APIENTRY *)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\nusing PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\nusing PFNGLFRAMEBUFFERTEXTURELAYERPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);\nusing PFNGLMAPBUFFERRANGEPROC = void *(KHRONOS_APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);\nusing PFNGLFLUSHMAPPEDBUFFERRANGEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr length);\nusing PFNGLBINDVERTEXARRAYPROC = void(KHRONOS_APIENTRY *)(GLuint array);\nusing PFNGLDELETEVERTEXARRAYSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, const GLuint * arrays);\nusing PFNGLGENVERTEXARRAYSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * arrays);\nusing PFNGLISVERTEXARRAYPROC = GLboolean(KHRONOS_APIENTRY *)(GLuint array);\nusing PFNGLGETINTEGERI_VPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint index, GLint * data);\nusing PFNGLBEGINTRANSFORMFEEDBACKPROC = void(KHRONOS_APIENTRY *)(GLenum primitiveMode);\nusing PFNGLENDTRANSFORMFEEDBACKPROC = void(KHRONOS_APIENTRY *)();\nusing PFNGLBINDBUFFERRANGEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);\nusing PFNGLBINDBUFFERBASEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint index, GLuint buffer);\nusing PFNGLTRANSFORMFEEDBACKVARYINGSPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);\nusing PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);\nusing PFNGLVERTEXATTRIBIPOINTERPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);\nusing PFNGLGETVERTEXATTRIBIIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum pname, GLint * params);\nusing PFNGLGETVERTEXATTRIBIUIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum pname, GLuint * params);\nusing PFNGLVERTEXATTRIBI4IPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLint x, GLint y, GLint z, GLint w);\nusing PFNGLVERTEXATTRIBI4UIPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);\nusing PFNGLVERTEXATTRIBI4IVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLint * v);\nusing PFNGLVERTEXATTRIBI4UIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLuint * v);\nusing PFNGLGETUNIFORMUIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLuint * params);\nusing PFNGLGETFRAGDATALOCATIONPROC = GLint(KHRONOS_APIENTRY *)(GLuint program, const GLchar * name);\nusing PFNGLUNIFORM1UIPROC = void(KHRONOS_APIENTRY *)(GLint location, GLuint v0);\nusing PFNGLUNIFORM2UIPROC = void(KHRONOS_APIENTRY *)(GLint location, GLuint v0, GLuint v1);\nusing PFNGLUNIFORM3UIPROC = void(KHRONOS_APIENTRY *)(GLint location, GLuint v0, GLuint v1, GLuint v2);\nusing PFNGLUNIFORM4UIPROC = void(KHRONOS_APIENTRY *)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);\nusing PFNGLUNIFORM1UIVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLuint * value);\nusing PFNGLUNIFORM2UIVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLuint * value);\nusing PFNGLUNIFORM3UIVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLuint * value);\nusing PFNGLUNIFORM4UIVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLuint * value);\nusing PFNGLCLEARBUFFERIVPROC = void(KHRONOS_APIENTRY *)(GLenum buffer, GLint drawbuffer, const GLint * value);\nusing PFNGLCLEARBUFFERUIVPROC = void(KHRONOS_APIENTRY *)(GLenum buffer, GLint drawbuffer, const GLuint * value);\nusing PFNGLCLEARBUFFERFVPROC = void(KHRONOS_APIENTRY *)(GLenum buffer, GLint drawbuffer, const GLfloat * value);\nusing PFNGLCLEARBUFFERFIPROC = void(KHRONOS_APIENTRY *)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);\nusing PFNGLGETSTRINGIPROC = const GLubyte *(KHRONOS_APIENTRY *)(GLenum name, GLuint index);\nusing PFNGLCOPYBUFFERSUBDATAPROC = void(KHRONOS_APIENTRY *)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);\nusing PFNGLGETUNIFORMINDICESPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);\nusing PFNGLGETACTIVEUNIFORMSIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);\nusing PFNGLGETUNIFORMBLOCKINDEXPROC = GLuint(KHRONOS_APIENTRY *)(GLuint program, const GLchar * uniformBlockName);\nusing PFNGLGETACTIVEUNIFORMBLOCKIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);\nusing PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);\nusing PFNGLUNIFORMBLOCKBINDINGPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);\nusing PFNGLDRAWARRAYSINSTANCEDPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);\nusing PFNGLDRAWELEMENTSINSTANCEDPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);\nusing PFNGLFENCESYNCPROC = GLsync(KHRONOS_APIENTRY *)(GLenum condition, GLbitfield flags);\nusing PFNGLISSYNCPROC = GLboolean(KHRONOS_APIENTRY *)(GLsync sync);\nusing PFNGLDELETESYNCPROC = void(KHRONOS_APIENTRY *)(GLsync sync);\nusing PFNGLCLIENTWAITSYNCPROC = GLenum(KHRONOS_APIENTRY *)(GLsync sync, GLbitfield flags, GLuint64 timeout);\nusing PFNGLWAITSYNCPROC = void(KHRONOS_APIENTRY *)(GLsync sync, GLbitfield flags, GLuint64 timeout);\nusing PFNGLGETINTEGER64VPROC = void(KHRONOS_APIENTRY *)(GLenum pname, GLint64 * data);\nusing PFNGLGETSYNCIVPROC = void(KHRONOS_APIENTRY *)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values);\nusing PFNGLGETINTEGER64I_VPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint index, GLint64 * data);\nusing PFNGLGETBUFFERPARAMETERI64VPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, GLint64 * params);\nusing PFNGLGENSAMPLERSPROC = void(KHRONOS_APIENTRY *)(GLsizei count, GLuint * samplers);\nusing PFNGLDELETESAMPLERSPROC = void(KHRONOS_APIENTRY *)(GLsizei count, const GLuint * samplers);\nusing PFNGLISSAMPLERPROC = GLboolean(KHRONOS_APIENTRY *)(GLuint sampler);\nusing PFNGLBINDSAMPLERPROC = void(KHRONOS_APIENTRY *)(GLuint unit, GLuint sampler);\nusing PFNGLSAMPLERPARAMETERIPROC = void(KHRONOS_APIENTRY *)(GLuint sampler, GLenum pname, GLint param);\nusing PFNGLSAMPLERPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLuint sampler, GLenum pname, const GLint * param);\nusing PFNGLSAMPLERPARAMETERFPROC = void(KHRONOS_APIENTRY *)(GLuint sampler, GLenum pname, GLfloat param);\nusing PFNGLSAMPLERPARAMETERFVPROC = void(KHRONOS_APIENTRY *)(GLuint sampler, GLenum pname, const GLfloat * param);\nusing PFNGLGETSAMPLERPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLuint sampler, GLenum pname, GLint * params);\nusing PFNGLGETSAMPLERPARAMETERFVPROC = void(KHRONOS_APIENTRY *)(GLuint sampler, GLenum pname, GLfloat * params);\nusing PFNGLVERTEXATTRIBDIVISORPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLuint divisor);\nusing PFNGLBINDTRANSFORMFEEDBACKPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint id);\nusing PFNGLDELETETRANSFORMFEEDBACKSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, const GLuint * ids);\nusing PFNGLGENTRANSFORMFEEDBACKSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * ids);\nusing PFNGLISTRANSFORMFEEDBACKPROC = GLboolean(KHRONOS_APIENTRY *)(GLuint id);\nusing PFNGLPAUSETRANSFORMFEEDBACKPROC = void(KHRONOS_APIENTRY *)();\nusing PFNGLRESUMETRANSFORMFEEDBACKPROC = void(KHRONOS_APIENTRY *)();\nusing PFNGLGETPROGRAMBINARYPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);\nusing PFNGLPROGRAMBINARYPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);\nusing PFNGLPROGRAMPARAMETERIPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLenum pname, GLint value);\nusing PFNGLINVALIDATEFRAMEBUFFERPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizei numAttachments, const GLenum * attachments);\nusing PFNGLINVALIDATESUBFRAMEBUFFERPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);\nusing PFNGLTEXSTORAGE2DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);\nusing PFNGLTEXSTORAGE3DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);\nusing PFNGLGETINTERNALFORMATIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params);\n\n// OpenGL ES 3.1\n#define GL_COMPUTE_SHADER 0x91B9\n#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB\n#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC\n#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD\n#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262\n#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263\n#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264\n#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265\n#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266\n#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB\n#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE\n#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF\n#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267\n#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE\n#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF\n#define GL_COMPUTE_SHADER_BIT 0x00000020\n#define GL_DRAW_INDIRECT_BUFFER 0x8F3F\n#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43\n#define GL_MAX_UNIFORM_LOCATIONS 0x826E\n#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310\n#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311\n#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313\n#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314\n#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315\n#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316\n#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318\n#define GL_UNIFORM 0x92E1\n#define GL_UNIFORM_BLOCK 0x92E2\n#define GL_PROGRAM_INPUT 0x92E3\n#define GL_PROGRAM_OUTPUT 0x92E4\n#define GL_BUFFER_VARIABLE 0x92E5\n#define GL_SHADER_STORAGE_BLOCK 0x92E6\n#define GL_ATOMIC_COUNTER_BUFFER 0x92C0\n#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4\n#define GL_ACTIVE_RESOURCES 0x92F5\n#define GL_MAX_NAME_LENGTH 0x92F6\n#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7\n#define GL_NAME_LENGTH 0x92F9\n#define GL_TYPE 0x92FA\n#define GL_ARRAY_SIZE 0x92FB\n#define GL_OFFSET 0x92FC\n#define GL_BLOCK_INDEX 0x92FD\n#define GL_ARRAY_STRIDE 0x92FE\n#define GL_MATRIX_STRIDE 0x92FF\n#define GL_IS_ROW_MAJOR 0x9300\n#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301\n#define GL_BUFFER_BINDING 0x9302\n#define GL_BUFFER_DATA_SIZE 0x9303\n#define GL_NUM_ACTIVE_VARIABLES 0x9304\n#define GL_ACTIVE_VARIABLES 0x9305\n#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306\n#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A\n#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B\n#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C\n#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D\n#define GL_LOCATION 0x930E\n#define GL_VERTEX_SHADER_BIT 0x00000001\n#define GL_FRAGMENT_SHADER_BIT 0x00000002\n#define GL_ALL_SHADER_BITS 0xFFFFFFFF\n#define GL_PROGRAM_SEPARABLE 0x8258\n#define GL_ACTIVE_PROGRAM 0x8259\n#define GL_PROGRAM_PIPELINE_BINDING 0x825A\n#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1\n#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2\n#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3\n#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC\n#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0\n#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1\n#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2\n#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6\n#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7\n#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8\n#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC\n#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9\n#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB\n#define GL_MAX_IMAGE_UNITS 0x8F38\n#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA\n#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE\n#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF\n#define GL_IMAGE_BINDING_NAME 0x8F3A\n#define GL_IMAGE_BINDING_LEVEL 0x8F3B\n#define GL_IMAGE_BINDING_LAYERED 0x8F3C\n#define GL_IMAGE_BINDING_LAYER 0x8F3D\n#define GL_IMAGE_BINDING_ACCESS 0x8F3E\n#define GL_IMAGE_BINDING_FORMAT 0x906E\n#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001\n#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002\n#define GL_UNIFORM_BARRIER_BIT 0x00000004\n#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008\n#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020\n#define GL_COMMAND_BARRIER_BIT 0x00000040\n#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080\n#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100\n#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200\n#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400\n#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800\n#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000\n#define GL_ALL_BARRIER_BITS 0xFFFFFFFF\n#define GL_IMAGE_2D 0x904D\n#define GL_IMAGE_3D 0x904E\n#define GL_IMAGE_CUBE 0x9050\n#define GL_IMAGE_2D_ARRAY 0x9053\n#define GL_INT_IMAGE_2D 0x9058\n#define GL_INT_IMAGE_3D 0x9059\n#define GL_INT_IMAGE_CUBE 0x905B\n#define GL_INT_IMAGE_2D_ARRAY 0x905E\n#define GL_UNSIGNED_INT_IMAGE_2D 0x9063\n#define GL_UNSIGNED_INT_IMAGE_3D 0x9064\n#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066\n#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069\n#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7\n#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8\n#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9\n#define GL_READ_ONLY 0x88B8\n#define GL_WRITE_ONLY 0x88B9\n#define GL_READ_WRITE 0x88BA\n#define GL_SHADER_STORAGE_BUFFER 0x90D2\n#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3\n#define GL_SHADER_STORAGE_BUFFER_START 0x90D4\n#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5\n#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6\n#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA\n#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB\n#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC\n#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD\n#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE\n#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF\n#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000\n#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39\n#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA\n#define GL_STENCIL_INDEX 0x1901\n#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E\n#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F\n#define GL_SAMPLE_POSITION 0x8E50\n#define GL_SAMPLE_MASK 0x8E51\n#define GL_SAMPLE_MASK_VALUE 0x8E52\n#define GL_TEXTURE_2D_MULTISAMPLE 0x9100\n#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59\n#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E\n#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F\n#define GL_MAX_INTEGER_SAMPLES 0x9110\n#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104\n#define GL_TEXTURE_SAMPLES 0x9106\n#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107\n#define GL_TEXTURE_WIDTH 0x1000\n#define GL_TEXTURE_HEIGHT 0x1001\n#define GL_TEXTURE_DEPTH 0x8071\n#define GL_TEXTURE_INTERNAL_FORMAT 0x1003\n#define GL_TEXTURE_RED_SIZE 0x805C\n#define GL_TEXTURE_GREEN_SIZE 0x805D\n#define GL_TEXTURE_BLUE_SIZE 0x805E\n#define GL_TEXTURE_ALPHA_SIZE 0x805F\n#define GL_TEXTURE_DEPTH_SIZE 0x884A\n#define GL_TEXTURE_STENCIL_SIZE 0x88F1\n#define GL_TEXTURE_SHARED_SIZE 0x8C3F\n#define GL_TEXTURE_RED_TYPE 0x8C10\n#define GL_TEXTURE_GREEN_TYPE 0x8C11\n#define GL_TEXTURE_BLUE_TYPE 0x8C12\n#define GL_TEXTURE_ALPHA_TYPE 0x8C13\n#define GL_TEXTURE_DEPTH_TYPE 0x8C16\n#define GL_TEXTURE_COMPRESSED 0x86A1\n#define GL_SAMPLER_2D_MULTISAMPLE 0x9108\n#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109\n#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A\n#define GL_VERTEX_ATTRIB_BINDING 0x82D4\n#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5\n#define GL_VERTEX_BINDING_DIVISOR 0x82D6\n#define GL_VERTEX_BINDING_OFFSET 0x82D7\n#define GL_VERTEX_BINDING_STRIDE 0x82D8\n#define GL_VERTEX_BINDING_BUFFER 0x8F4F\n#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9\n#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA\n#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5\n\nusing PFNGLDISPATCHCOMPUTEPROC = void(KHRONOS_APIENTRY *)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);\nusing PFNGLDISPATCHCOMPUTEINDIRECTPROC = void(KHRONOS_APIENTRY *)(GLintptr indirect);\nusing PFNGLDRAWARRAYSINDIRECTPROC = void(KHRONOS_APIENTRY *)(GLenum mode, const void * indirect);\nusing PFNGLDRAWELEMENTSINDIRECTPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLenum type, const void * indirect);\nusing PFNGLFRAMEBUFFERPARAMETERIPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, GLint param);\nusing PFNGLGETFRAMEBUFFERPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, GLint * params);\nusing PFNGLGETPROGRAMINTERFACEIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLenum programInterface, GLenum pname, GLint * params);\nusing PFNGLGETPROGRAMRESOURCEINDEXPROC = GLuint(KHRONOS_APIENTRY *)(GLuint program, GLenum programInterface, const GLchar * name);\nusing PFNGLGETPROGRAMRESOURCENAMEPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);\nusing PFNGLGETPROGRAMRESOURCEIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params);\nusing PFNGLGETPROGRAMRESOURCELOCATIONPROC = GLint(KHRONOS_APIENTRY *)(GLuint program, GLenum programInterface, const GLchar * name);\nusing PFNGLUSEPROGRAMSTAGESPROC = void(KHRONOS_APIENTRY *)(GLuint pipeline, GLbitfield stages, GLuint program);\nusing PFNGLACTIVESHADERPROGRAMPROC = void(KHRONOS_APIENTRY *)(GLuint pipeline, GLuint program);\nusing PFNGLCREATESHADERPROGRAMVPROC = GLuint(KHRONOS_APIENTRY *)(GLenum type, GLsizei count, const GLchar *const* strings);\nusing PFNGLBINDPROGRAMPIPELINEPROC = void(KHRONOS_APIENTRY *)(GLuint pipeline);\nusing PFNGLDELETEPROGRAMPIPELINESPROC = void(KHRONOS_APIENTRY *)(GLsizei n, const GLuint * pipelines);\nusing PFNGLGENPROGRAMPIPELINESPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * pipelines);\nusing PFNGLISPROGRAMPIPELINEPROC = GLboolean(KHRONOS_APIENTRY *)(GLuint pipeline);\nusing PFNGLGETPROGRAMPIPELINEIVPROC = void(KHRONOS_APIENTRY *)(GLuint pipeline, GLenum pname, GLint * params);\nusing PFNGLPROGRAMUNIFORM1IPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLint v0);\nusing PFNGLPROGRAMUNIFORM2IPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLint v0, GLint v1);\nusing PFNGLPROGRAMUNIFORM3IPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);\nusing PFNGLPROGRAMUNIFORM4IPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);\nusing PFNGLPROGRAMUNIFORM1UIPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLuint v0);\nusing PFNGLPROGRAMUNIFORM2UIPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLuint v0, GLuint v1);\nusing PFNGLPROGRAMUNIFORM3UIPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);\nusing PFNGLPROGRAMUNIFORM4UIPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);\nusing PFNGLPROGRAMUNIFORM1FPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLfloat v0);\nusing PFNGLPROGRAMUNIFORM2FPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLfloat v0, GLfloat v1);\nusing PFNGLPROGRAMUNIFORM3FPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);\nusing PFNGLPROGRAMUNIFORM4FPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);\nusing PFNGLPROGRAMUNIFORM1IVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint * value);\nusing PFNGLPROGRAMUNIFORM2IVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint * value);\nusing PFNGLPROGRAMUNIFORM3IVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint * value);\nusing PFNGLPROGRAMUNIFORM4IVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLint * value);\nusing PFNGLPROGRAMUNIFORM1UIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint * value);\nusing PFNGLPROGRAMUNIFORM2UIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint * value);\nusing PFNGLPROGRAMUNIFORM3UIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint * value);\nusing PFNGLPROGRAMUNIFORM4UIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLuint * value);\nusing PFNGLPROGRAMUNIFORM1FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLfloat * value);\nusing PFNGLPROGRAMUNIFORM2FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLfloat * value);\nusing PFNGLPROGRAMUNIFORM3FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLfloat * value);\nusing PFNGLPROGRAMUNIFORM4FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLfloat * value);\nusing PFNGLPROGRAMUNIFORMMATRIX2FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLPROGRAMUNIFORMMATRIX3FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLPROGRAMUNIFORMMATRIX4FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);\nusing PFNGLVALIDATEPROGRAMPIPELINEPROC = void(KHRONOS_APIENTRY *)(GLuint pipeline);\nusing PFNGLGETPROGRAMPIPELINEINFOLOGPROC = void(KHRONOS_APIENTRY *)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);\nusing PFNGLBINDIMAGETEXTUREPROC = void(KHRONOS_APIENTRY *)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);\nusing PFNGLGETBOOLEANI_VPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint index, GLboolean * data);\nusing PFNGLMEMORYBARRIERPROC = void(KHRONOS_APIENTRY *)(GLbitfield barriers);\nusing PFNGLMEMORYBARRIERBYREGIONPROC = void(KHRONOS_APIENTRY *)(GLbitfield barriers);\nusing PFNGLTEXSTORAGE2DMULTISAMPLEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);\nusing PFNGLGETMULTISAMPLEFVPROC = void(KHRONOS_APIENTRY *)(GLenum pname, GLuint index, GLfloat * val);\nusing PFNGLSAMPLEMASKIPROC = void(KHRONOS_APIENTRY *)(GLuint maskNumber, GLbitfield mask);\nusing PFNGLGETTEXLEVELPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLenum pname, GLint * params);\nusing PFNGLGETTEXLEVELPARAMETERFVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLenum pname, GLfloat * params);\nusing PFNGLBINDVERTEXBUFFERPROC = void(KHRONOS_APIENTRY *)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);\nusing PFNGLVERTEXATTRIBFORMATPROC = void(KHRONOS_APIENTRY *)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);\nusing PFNGLVERTEXATTRIBIFORMATPROC = void(KHRONOS_APIENTRY *)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);\nusing PFNGLVERTEXATTRIBBINDINGPROC = void(KHRONOS_APIENTRY *)(GLuint attribindex, GLuint bindingindex);\nusing PFNGLVERTEXBINDINGDIVISORPROC = void(KHRONOS_APIENTRY *)(GLuint bindingindex, GLuint divisor);\n\n// OpenGL ES 3.2\n#define GL_MULTISAMPLE_LINE_WIDTH_RANGE 0x9381\n#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY 0x9382\n#define GL_MULTIPLY 0x9294\n#define GL_SCREEN 0x9295\n#define GL_OVERLAY 0x9296\n#define GL_DARKEN 0x9297\n#define GL_LIGHTEN 0x9298\n#define GL_COLORDODGE 0x9299\n#define GL_COLORBURN 0x929A\n#define GL_HARDLIGHT 0x929B\n#define GL_SOFTLIGHT 0x929C\n#define GL_DIFFERENCE 0x929E\n#define GL_EXCLUSION 0x92A0\n#define GL_HSL_HUE 0x92AD\n#define GL_HSL_SATURATION 0x92AE\n#define GL_HSL_COLOR 0x92AF\n#define GL_HSL_LUMINOSITY 0x92B0\n#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242\n#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243\n#define GL_DEBUG_CALLBACK_FUNCTION 0x8244\n#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245\n#define GL_DEBUG_SOURCE_API 0x8246\n#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247\n#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248\n#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249\n#define GL_DEBUG_SOURCE_APPLICATION 0x824A\n#define GL_DEBUG_SOURCE_OTHER 0x824B\n#define GL_DEBUG_TYPE_ERROR 0x824C\n#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D\n#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E\n#define GL_DEBUG_TYPE_PORTABILITY 0x824F\n#define GL_DEBUG_TYPE_PERFORMANCE 0x8250\n#define GL_DEBUG_TYPE_OTHER 0x8251\n#define GL_DEBUG_TYPE_MARKER 0x8268\n#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269\n#define GL_DEBUG_TYPE_POP_GROUP 0x826A\n#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B\n#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C\n#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D\n#define GL_BUFFER 0x82E0\n#define GL_SHADER 0x82E1\n#define GL_PROGRAM 0x82E2\n#define GL_VERTEX_ARRAY 0x8074\n#define GL_QUERY 0x82E3\n#define GL_PROGRAM_PIPELINE 0x82E4\n#define GL_SAMPLER 0x82E6\n#define GL_MAX_LABEL_LENGTH 0x82E8\n#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143\n#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144\n#define GL_DEBUG_LOGGED_MESSAGES 0x9145\n#define GL_DEBUG_SEVERITY_HIGH 0x9146\n#define GL_DEBUG_SEVERITY_MEDIUM 0x9147\n#define GL_DEBUG_SEVERITY_LOW 0x9148\n#define GL_DEBUG_OUTPUT 0x92E0\n#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002\n#define GL_STACK_OVERFLOW 0x0503\n#define GL_STACK_UNDERFLOW 0x0504\n#define GL_GEOMETRY_SHADER 0x8DD9\n#define GL_GEOMETRY_SHADER_BIT 0x00000004\n#define GL_GEOMETRY_VERTICES_OUT 0x8916\n#define GL_GEOMETRY_INPUT_TYPE 0x8917\n#define GL_GEOMETRY_OUTPUT_TYPE 0x8918\n#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F\n#define GL_LAYER_PROVOKING_VERTEX 0x825E\n#define GL_LINES_ADJACENCY 0x000A\n#define GL_LINE_STRIP_ADJACENCY 0x000B\n#define GL_TRIANGLES_ADJACENCY 0x000C\n#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D\n#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF\n#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C\n#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32\n#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123\n#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124\n#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0\n#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1\n#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A\n#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29\n#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF\n#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5\n#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD\n#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7\n#define GL_FIRST_VERTEX_CONVENTION 0x8E4D\n#define GL_LAST_VERTEX_CONVENTION 0x8E4E\n#define GL_UNDEFINED_VERTEX 0x8260\n#define GL_PRIMITIVES_GENERATED 0x8C87\n#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312\n#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317\n#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8\n#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7\n#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309\n#define GL_PRIMITIVE_BOUNDING_BOX 0x92BE\n#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004\n#define GL_CONTEXT_FLAGS 0x821E\n#define GL_LOSE_CONTEXT_ON_RESET 0x8252\n#define GL_GUILTY_CONTEXT_RESET 0x8253\n#define GL_INNOCENT_CONTEXT_RESET 0x8254\n#define GL_UNKNOWN_CONTEXT_RESET 0x8255\n#define GL_RESET_NOTIFICATION_STRATEGY 0x8256\n#define GL_NO_RESET_NOTIFICATION 0x8261\n#define GL_CONTEXT_LOST 0x0507\n#define GL_SAMPLE_SHADING 0x8C36\n#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37\n#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B\n#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C\n#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D\n#define GL_PATCHES 0x000E\n#define GL_PATCH_VERTICES 0x8E72\n#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75\n#define GL_TESS_GEN_MODE 0x8E76\n#define GL_TESS_GEN_SPACING 0x8E77\n#define GL_TESS_GEN_VERTEX_ORDER 0x8E78\n#define GL_TESS_GEN_POINT_MODE 0x8E79\n#define GL_ISOLINES 0x8E7A\n#define GL_QUADS 0x0007\n#define GL_FRACTIONAL_ODD 0x8E7B\n#define GL_FRACTIONAL_EVEN 0x8E7C\n#define GL_MAX_PATCH_VERTICES 0x8E7D\n#define GL_MAX_TESS_GEN_LEVEL 0x8E7E\n#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F\n#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80\n#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81\n#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82\n#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83\n#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84\n#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85\n#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86\n#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89\n#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A\n#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C\n#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D\n#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E\n#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F\n#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD\n#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE\n#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3\n#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4\n#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB\n#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC\n#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8\n#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9\n#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221\n#define GL_IS_PER_PATCH 0x92E7\n#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307\n#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308\n#define GL_TESS_CONTROL_SHADER 0x8E88\n#define GL_TESS_EVALUATION_SHADER 0x8E87\n#define GL_TESS_CONTROL_SHADER_BIT 0x00000008\n#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010\n#define GL_TEXTURE_BORDER_COLOR 0x1004\n#define GL_CLAMP_TO_BORDER 0x812D\n#define GL_TEXTURE_BUFFER 0x8C2A\n#define GL_TEXTURE_BUFFER_BINDING 0x8C2A\n#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B\n#define GL_TEXTURE_BINDING_BUFFER 0x8C2C\n#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D\n#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F\n#define GL_SAMPLER_BUFFER 0x8DC2\n#define GL_INT_SAMPLER_BUFFER 0x8DD0\n#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8\n#define GL_IMAGE_BUFFER 0x9051\n#define GL_INT_IMAGE_BUFFER 0x905C\n#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067\n#define GL_TEXTURE_BUFFER_OFFSET 0x919D\n#define GL_TEXTURE_BUFFER_SIZE 0x919E\n#define GL_COMPRESSED_RGBA_ASTC_4x4 0x93B0\n#define GL_COMPRESSED_RGBA_ASTC_5x4 0x93B1\n#define GL_COMPRESSED_RGBA_ASTC_5x5 0x93B2\n#define GL_COMPRESSED_RGBA_ASTC_6x5 0x93B3\n#define GL_COMPRESSED_RGBA_ASTC_6x6 0x93B4\n#define GL_COMPRESSED_RGBA_ASTC_8x5 0x93B5\n#define GL_COMPRESSED_RGBA_ASTC_8x6 0x93B6\n#define GL_COMPRESSED_RGBA_ASTC_8x8 0x93B7\n#define GL_COMPRESSED_RGBA_ASTC_10x5 0x93B8\n#define GL_COMPRESSED_RGBA_ASTC_10x6 0x93B9\n#define GL_COMPRESSED_RGBA_ASTC_10x8 0x93BA\n#define GL_COMPRESSED_RGBA_ASTC_10x10 0x93BB\n#define GL_COMPRESSED_RGBA_ASTC_12x10 0x93BC\n#define GL_COMPRESSED_RGBA_ASTC_12x12 0x93BD\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 0x93D0\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 0x93D1\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 0x93D2\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 0x93D3\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 0x93D4\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 0x93D5\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 0x93D6\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 0x93D7\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 0x93D8\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 0x93D9\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 0x93DA\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 0x93DB\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 0x93DC\n#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 0x93DD\n#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009\n#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A\n#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C\n#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D\n#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E\n#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F\n#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054\n#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F\n#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A\n#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102\n#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105\n#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B\n#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C\n#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D\n\nusing PFNGLBLENDBARRIERPROC = void(KHRONOS_APIENTRY *)();\nusing PFNGLCOPYIMAGESUBDATAPROC = void(KHRONOS_APIENTRY *)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);\nusing PFNGLDEBUGMESSAGECONTROLPROC = void(KHRONOS_APIENTRY *)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);\nusing PFNGLDEBUGMESSAGEINSERTPROC = void(KHRONOS_APIENTRY *)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);\nusing PFNGLDEBUGMESSAGECALLBACKPROC = void(KHRONOS_APIENTRY *)(GLDEBUGPROC callback, const void * userParam);\nusing PFNGLGETDEBUGMESSAGELOGPROC = GLuint(KHRONOS_APIENTRY *)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);\nusing PFNGLPUSHDEBUGGROUPPROC = void(KHRONOS_APIENTRY *)(GLenum source, GLuint id, GLsizei length, const GLchar * message);\nusing PFNGLPOPDEBUGGROUPPROC = void(KHRONOS_APIENTRY *)();\nusing PFNGLOBJECTLABELPROC = void(KHRONOS_APIENTRY *)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);\nusing PFNGLGETOBJECTLABELPROC = void(KHRONOS_APIENTRY *)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);\nusing PFNGLOBJECTPTRLABELPROC = void(KHRONOS_APIENTRY *)(const void * ptr, GLsizei length, const GLchar * label);\nusing PFNGLGETOBJECTPTRLABELPROC = void(KHRONOS_APIENTRY *)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);\nusing PFNGLGETPOINTERVPROC = void(KHRONOS_APIENTRY *)(GLenum pname, void ** params);\nusing PFNGLENABLEIPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint index);\nusing PFNGLDISABLEIPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint index);\nusing PFNGLBLENDEQUATIONIPROC = void(KHRONOS_APIENTRY *)(GLuint buf, GLenum mode);\nusing PFNGLBLENDEQUATIONSEPARATEIPROC = void(KHRONOS_APIENTRY *)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);\nusing PFNGLBLENDFUNCIPROC = void(KHRONOS_APIENTRY *)(GLuint buf, GLenum src, GLenum dst);\nusing PFNGLBLENDFUNCSEPARATEIPROC = void(KHRONOS_APIENTRY *)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);\nusing PFNGLCOLORMASKIPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);\nusing PFNGLISENABLEDIPROC = GLboolean(KHRONOS_APIENTRY *)(GLenum target, GLuint index);\nusing PFNGLDRAWELEMENTSBASEVERTEXPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);\nusing PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);\nusing PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);\nusing PFNGLFRAMEBUFFERTEXTUREPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum attachment, GLuint texture, GLint level);\nusing PFNGLPRIMITIVEBOUNDINGBOXPROC = void(KHRONOS_APIENTRY *)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);\nusing PFNGLGETGRAPHICSRESETSTATUSPROC = GLenum(KHRONOS_APIENTRY *)();\nusing PFNGLREADNPIXELSPROC = void(KHRONOS_APIENTRY *)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);\nusing PFNGLGETNUNIFORMFVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);\nusing PFNGLGETNUNIFORMIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLint * params);\nusing PFNGLGETNUNIFORMUIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);\nusing PFNGLMINSAMPLESHADINGPROC = void(KHRONOS_APIENTRY *)(GLfloat value);\nusing PFNGLPATCHPARAMETERIPROC = void(KHRONOS_APIENTRY *)(GLenum pname, GLint value);\nusing PFNGLTEXPARAMETERIIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, const GLint * params);\nusing PFNGLTEXPARAMETERIUIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, const GLuint * params);\nusing PFNGLGETTEXPARAMETERIIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, GLint * params);\nusing PFNGLGETTEXPARAMETERIUIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum pname, GLuint * params);\nusing PFNGLSAMPLERPARAMETERIIVPROC = void(KHRONOS_APIENTRY *)(GLuint sampler, GLenum pname, const GLint * param);\nusing PFNGLSAMPLERPARAMETERIUIVPROC = void(KHRONOS_APIENTRY *)(GLuint sampler, GLenum pname, const GLuint * param);\nusing PFNGLGETSAMPLERPARAMETERIIVPROC = void(KHRONOS_APIENTRY *)(GLuint sampler, GLenum pname, GLint * params);\nusing PFNGLGETSAMPLERPARAMETERIUIVPROC = void(KHRONOS_APIENTRY *)(GLuint sampler, GLenum pname, GLuint * params);\nusing PFNGLTEXBUFFERPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum internalformat, GLuint buffer);\nusing PFNGLTEXBUFFERRANGEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);\nusing PFNGLTEXSTORAGE3DMULTISAMPLEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);\n\n// Desktop OpenGL 1.0\n#define GL_FRONT_LEFT 0x0400\n#define GL_FRONT_RIGHT 0x0401\n#define GL_BACK_LEFT 0x0402\n#define GL_BACK_RIGHT 0x0403\n#define GL_LEFT 0x0406\n#define GL_RIGHT 0x0407\n#define GL_POINT_SIZE 0x0B11\n#define GL_POINT_SIZE_RANGE 0x0B12\n#define GL_POINT_SIZE_GRANULARITY 0x0B13\n#define GL_LINE_SMOOTH 0x0B20\n#define GL_LINE_WIDTH_RANGE 0x0B22\n#define GL_LINE_WIDTH_GRANULARITY 0x0B23\n#define GL_POLYGON_MODE 0x0B40\n#define GL_POLYGON_SMOOTH 0x0B41\n#define GL_BLEND_DST 0x0BE0\n#define GL_BLEND_SRC 0x0BE1\n#define GL_LOGIC_OP_MODE 0x0BF0\n#define GL_DRAW_BUFFER 0x0C01\n#define GL_DOUBLEBUFFER 0x0C32\n#define GL_STEREO 0x0C33\n#define GL_LINE_SMOOTH_HINT 0x0C52\n#define GL_POLYGON_SMOOTH_HINT 0x0C53\n#define GL_UNPACK_SWAP_BYTES 0x0CF0\n#define GL_UNPACK_LSB_FIRST 0x0CF1\n#define GL_PACK_SWAP_BYTES 0x0D00\n#define GL_PACK_LSB_FIRST 0x0D01\n#define GL_TEXTURE_1D 0x0DE0\n#define GL_CLEAR 0x1500\n#define GL_AND 0x1501\n#define GL_AND_REVERSE 0x1502\n#define GL_COPY 0x1503\n#define GL_AND_INVERTED 0x1504\n#define GL_NOOP 0x1505\n#define GL_XOR 0x1506\n#define GL_OR 0x1507\n#define GL_NOR 0x1508\n#define GL_EQUIV 0x1509\n#define GL_OR_REVERSE 0x150B\n#define GL_COPY_INVERTED 0x150C\n#define GL_OR_INVERTED 0x150D\n#define GL_NAND 0x150E\n#define GL_SET 0x150F\n#define GL_POINT 0x1B00\n#define GL_LINE 0x1B01\n#define GL_FILL 0x1B02\n#define GL_CURRENT_BIT 0x00000001\n#define GL_POINT_BIT 0x00000002\n#define GL_LINE_BIT 0x00000004\n#define GL_POLYGON_BIT 0x00000008\n#define GL_POLYGON_STIPPLE_BIT 0x00000010\n#define GL_PIXEL_MODE_BIT 0x00000020\n#define GL_LIGHTING_BIT 0x00000040\n#define GL_FOG_BIT 0x00000080\n#define GL_ACCUM_BUFFER_BIT 0x00000200\n#define GL_VIEWPORT_BIT 0x00000800\n#define GL_TRANSFORM_BIT 0x00001000\n#define GL_ENABLE_BIT 0x00002000\n#define GL_HINT_BIT 0x00008000\n#define GL_EVAL_BIT 0x00010000\n#define GL_LIST_BIT 0x00020000\n#define GL_TEXTURE_BIT 0x00040000\n#define GL_SCISSOR_BIT 0x00080000\n#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF\n#define GL_QUAD_STRIP 0x0008\n#define GL_POLYGON 0x0009\n#define GL_ACCUM 0x0100\n#define GL_LOAD 0x0101\n#define GL_RETURN 0x0102\n#define GL_MULT 0x0103\n#define GL_ADD 0x0104\n#define GL_AUX0 0x0409\n#define GL_AUX1 0x040A\n#define GL_AUX2 0x040B\n#define GL_AUX3 0x040C\n#define GL_2D 0x0600\n#define GL_3D 0x0601\n#define GL_3D_COLOR 0x0602\n#define GL_3D_COLOR_TEXTURE 0x0603\n#define GL_4D_COLOR_TEXTURE 0x0604\n#define GL_PASS_THROUGH_TOKEN 0x0700\n#define GL_POINT_TOKEN 0x0701\n#define GL_LINE_TOKEN 0x0702\n#define GL_POLYGON_TOKEN 0x0703\n#define GL_BITMAP_TOKEN 0x0704\n#define GL_DRAW_PIXEL_TOKEN 0x0705\n#define GL_COPY_PIXEL_TOKEN 0x0706\n#define GL_LINE_RESET_TOKEN 0x0707\n#define GL_EXP 0x0800\n#define GL_EXP2 0x0801\n#define GL_COEFF 0x0A00\n#define GL_ORDER 0x0A01\n#define GL_DOMAIN 0x0A02\n#define GL_PIXEL_MAP_I_TO_I 0x0C70\n#define GL_PIXEL_MAP_S_TO_S 0x0C71\n#define GL_PIXEL_MAP_I_TO_R 0x0C72\n#define GL_PIXEL_MAP_I_TO_G 0x0C73\n#define GL_PIXEL_MAP_I_TO_B 0x0C74\n#define GL_PIXEL_MAP_I_TO_A 0x0C75\n#define GL_PIXEL_MAP_R_TO_R 0x0C76\n#define GL_PIXEL_MAP_G_TO_G 0x0C77\n#define GL_PIXEL_MAP_B_TO_B 0x0C78\n#define GL_PIXEL_MAP_A_TO_A 0x0C79\n#define GL_CURRENT_COLOR 0x0B00\n#define GL_CURRENT_INDEX 0x0B01\n#define GL_CURRENT_NORMAL 0x0B02\n#define GL_CURRENT_TEXTURE_COORDS 0x0B03\n#define GL_CURRENT_RASTER_COLOR 0x0B04\n#define GL_CURRENT_RASTER_INDEX 0x0B05\n#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06\n#define GL_CURRENT_RASTER_POSITION 0x0B07\n#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08\n#define GL_CURRENT_RASTER_DISTANCE 0x0B09\n#define GL_POINT_SMOOTH 0x0B10\n#define GL_LINE_STIPPLE 0x0B24\n#define GL_LINE_STIPPLE_PATTERN 0x0B25\n#define GL_LINE_STIPPLE_REPEAT 0x0B26\n#define GL_LIST_MODE 0x0B30\n#define GL_MAX_LIST_NESTING 0x0B31\n#define GL_LIST_BASE 0x0B32\n#define GL_LIST_INDEX 0x0B33\n#define GL_POLYGON_STIPPLE 0x0B42\n#define GL_EDGE_FLAG 0x0B43\n#define GL_LIGHTING 0x0B50\n#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51\n#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52\n#define GL_LIGHT_MODEL_AMBIENT 0x0B53\n#define GL_SHADE_MODEL 0x0B54\n#define GL_COLOR_MATERIAL_FACE 0x0B55\n#define GL_COLOR_MATERIAL_PARAMETER 0x0B56\n#define GL_COLOR_MATERIAL 0x0B57\n#define GL_FOG 0x0B60\n#define GL_FOG_INDEX 0x0B61\n#define GL_FOG_DENSITY 0x0B62\n#define GL_FOG_START 0x0B63\n#define GL_FOG_END 0x0B64\n#define GL_FOG_MODE 0x0B65\n#define GL_FOG_COLOR 0x0B66\n#define GL_ACCUM_CLEAR_VALUE 0x0B80\n#define GL_MATRIX_MODE 0x0BA0\n#define GL_NORMALIZE 0x0BA1\n#define GL_MODELVIEW_STACK_DEPTH 0x0BA3\n#define GL_PROJECTION_STACK_DEPTH 0x0BA4\n#define GL_TEXTURE_STACK_DEPTH 0x0BA5\n#define GL_MODELVIEW_MATRIX 0x0BA6\n#define GL_PROJECTION_MATRIX 0x0BA7\n#define GL_TEXTURE_MATRIX 0x0BA8\n#define GL_ATTRIB_STACK_DEPTH 0x0BB0\n#define GL_ALPHA_TEST 0x0BC0\n#define GL_ALPHA_TEST_FUNC 0x0BC1\n#define GL_ALPHA_TEST_REF 0x0BC2\n#define GL_LOGIC_OP 0x0BF1\n#define GL_AUX_BUFFERS 0x0C00\n#define GL_INDEX_CLEAR_VALUE 0x0C20\n#define GL_INDEX_WRITEMASK 0x0C21\n#define GL_INDEX_MODE 0x0C30\n#define GL_RGBA_MODE 0x0C31\n#define GL_RENDER_MODE 0x0C40\n#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50\n#define GL_POINT_SMOOTH_HINT 0x0C51\n#define GL_FOG_HINT 0x0C54\n#define GL_TEXTURE_GEN_S 0x0C60\n#define GL_TEXTURE_GEN_T 0x0C61\n#define GL_TEXTURE_GEN_R 0x0C62\n#define GL_TEXTURE_GEN_Q 0x0C63\n#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0\n#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1\n#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2\n#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3\n#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4\n#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5\n#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6\n#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7\n#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8\n#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9\n#define GL_MAP_COLOR 0x0D10\n#define GL_MAP_STENCIL 0x0D11\n#define GL_INDEX_SHIFT 0x0D12\n#define GL_INDEX_OFFSET 0x0D13\n#define GL_RED_SCALE 0x0D14\n#define GL_RED_BIAS 0x0D15\n#define GL_ZOOM_X 0x0D16\n#define GL_ZOOM_Y 0x0D17\n#define GL_GREEN_SCALE 0x0D18\n#define GL_GREEN_BIAS 0x0D19\n#define GL_BLUE_SCALE 0x0D1A\n#define GL_BLUE_BIAS 0x0D1B\n#define GL_ALPHA_SCALE 0x0D1C\n#define GL_ALPHA_BIAS 0x0D1D\n#define GL_DEPTH_SCALE 0x0D1E\n#define GL_DEPTH_BIAS 0x0D1F\n#define GL_MAX_EVAL_ORDER 0x0D30\n#define GL_MAX_LIGHTS 0x0D31\n#define GL_MAX_CLIP_PLANES 0x0D32\n#define GL_MAX_PIXEL_MAP_TABLE 0x0D34\n#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35\n#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36\n#define GL_MAX_NAME_STACK_DEPTH 0x0D37\n#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38\n#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39\n#define GL_INDEX_BITS 0x0D51\n#define GL_ACCUM_RED_BITS 0x0D58\n#define GL_ACCUM_GREEN_BITS 0x0D59\n#define GL_ACCUM_BLUE_BITS 0x0D5A\n#define GL_ACCUM_ALPHA_BITS 0x0D5B\n#define GL_NAME_STACK_DEPTH 0x0D70\n#define GL_AUTO_NORMAL 0x0D80\n#define GL_MAP1_COLOR_4 0x0D90\n#define GL_MAP1_INDEX 0x0D91\n#define GL_MAP1_NORMAL 0x0D92\n#define GL_MAP1_TEXTURE_COORD_1 0x0D93\n#define GL_MAP1_TEXTURE_COORD_2 0x0D94\n#define GL_MAP1_TEXTURE_COORD_3 0x0D95\n#define GL_MAP1_TEXTURE_COORD_4 0x0D96\n#define GL_MAP1_VERTEX_3 0x0D97\n#define GL_MAP1_VERTEX_4 0x0D98\n#define GL_MAP2_COLOR_4 0x0DB0\n#define GL_MAP2_INDEX 0x0DB1\n#define GL_MAP2_NORMAL 0x0DB2\n#define GL_MAP2_TEXTURE_COORD_1 0x0DB3\n#define GL_MAP2_TEXTURE_COORD_2 0x0DB4\n#define GL_MAP2_TEXTURE_COORD_3 0x0DB5\n#define GL_MAP2_TEXTURE_COORD_4 0x0DB6\n#define GL_MAP2_VERTEX_3 0x0DB7\n#define GL_MAP2_VERTEX_4 0x0DB8\n#define GL_MAP1_GRID_DOMAIN 0x0DD0\n#define GL_MAP1_GRID_SEGMENTS 0x0DD1\n#define GL_MAP2_GRID_DOMAIN 0x0DD2\n#define GL_MAP2_GRID_SEGMENTS 0x0DD3\n#define GL_TEXTURE_COMPONENTS 0x1003\n#define GL_TEXTURE_BORDER 0x1005\n#define GL_AMBIENT 0x1200\n#define GL_DIFFUSE 0x1201\n#define GL_SPECULAR 0x1202\n#define GL_POSITION 0x1203\n#define GL_SPOT_DIRECTION 0x1204\n#define GL_SPOT_EXPONENT 0x1205\n#define GL_SPOT_CUTOFF 0x1206\n#define GL_CONSTANT_ATTENUATION 0x1207\n#define GL_LINEAR_ATTENUATION 0x1208\n#define GL_QUADRATIC_ATTENUATION 0x1209\n#define GL_COMPILE 0x1300\n#define GL_COMPILE_AND_EXECUTE 0x1301\n#define GL_2_BYTES 0x1407\n#define GL_3_BYTES 0x1408\n#define GL_4_BYTES 0x1409\n#define GL_EMISSION 0x1600\n#define GL_SHININESS 0x1601\n#define GL_AMBIENT_AND_DIFFUSE 0x1602\n#define GL_COLOR_INDEXES 0x1603\n#define GL_MODELVIEW 0x1700\n#define GL_PROJECTION 0x1701\n#define GL_COLOR_INDEX 0x1900\n#define GL_BITMAP 0x1A00\n#define GL_RENDER 0x1C00\n#define GL_FEEDBACK 0x1C01\n#define GL_SELECT 0x1C02\n#define GL_FLAT 0x1D00\n#define GL_SMOOTH 0x1D01\n#define GL_S 0x2000\n#define GL_T 0x2001\n#define GL_R 0x2002\n#define GL_Q 0x2003\n#define GL_MODULATE 0x2100\n#define GL_DECAL 0x2101\n#define GL_TEXTURE_ENV_MODE 0x2200\n#define GL_TEXTURE_ENV_COLOR 0x2201\n#define GL_TEXTURE_ENV 0x2300\n#define GL_EYE_LINEAR 0x2400\n#define GL_OBJECT_LINEAR 0x2401\n#define GL_SPHERE_MAP 0x2402\n#define GL_TEXTURE_GEN_MODE 0x2500\n#define GL_OBJECT_PLANE 0x2501\n#define GL_EYE_PLANE 0x2502\n#define GL_CLAMP 0x2900\n#define GL_CLIP_PLANE0 0x3000\n#define GL_CLIP_PLANE1 0x3001\n#define GL_CLIP_PLANE2 0x3002\n#define GL_CLIP_PLANE3 0x3003\n#define GL_CLIP_PLANE4 0x3004\n#define GL_CLIP_PLANE5 0x3005\n#define GL_LIGHT0 0x4000\n#define GL_LIGHT1 0x4001\n#define GL_LIGHT2 0x4002\n#define GL_LIGHT3 0x4003\n#define GL_LIGHT4 0x4004\n#define GL_LIGHT5 0x4005\n#define GL_LIGHT6 0x4006\n#define GL_LIGHT7 0x4007\n\nusing PFNGLPOINTSIZEPROC = void(KHRONOS_APIENTRY *)(GLfloat size);\nusing PFNGLPOLYGONMODEPROC = void(KHRONOS_APIENTRY *)(GLenum face, GLenum mode);\nusing PFNGLTEXIMAGE1DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels);\nusing PFNGLDRAWBUFFERPROC = void(KHRONOS_APIENTRY *)(GLenum buf);\nusing PFNGLCLEARDEPTHPROC = void(KHRONOS_APIENTRY *)(GLdouble depth);\nusing PFNGLLOGICOPPROC = void(KHRONOS_APIENTRY *)(GLenum opcode);\nusing PFNGLPIXELSTOREFPROC = void(KHRONOS_APIENTRY *)(GLenum pname, GLfloat param);\nusing PFNGLGETDOUBLEVPROC = void(KHRONOS_APIENTRY *)(GLenum pname, GLdouble * data);\nusing PFNGLGETTEXIMAGEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLenum format, GLenum type, void * pixels);\nusing PFNGLDEPTHRANGEPROC = void(KHRONOS_APIENTRY *)(GLdouble n, GLdouble f);\n\n// Desktop OpenGL 1.1\n#define GL_COLOR_LOGIC_OP 0x0BF2\n#define GL_POLYGON_OFFSET_POINT 0x2A01\n#define GL_POLYGON_OFFSET_LINE 0x2A02\n#define GL_TEXTURE_BINDING_1D 0x8068\n#define GL_DOUBLE 0x140A\n#define GL_PROXY_TEXTURE_1D 0x8063\n#define GL_PROXY_TEXTURE_2D 0x8064\n#define GL_R3_G3_B2 0x2A10\n#define GL_RGB4 0x804F\n#define GL_RGB5 0x8050\n#define GL_RGB10 0x8052\n#define GL_RGB12 0x8053\n#define GL_RGB16 0x8054\n#define GL_RGBA2 0x8055\n#define GL_RGBA12 0x805A\n#define GL_RGBA16 0x805B\n#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001\n#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002\n#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF\n#define GL_VERTEX_ARRAY_POINTER 0x808E\n#define GL_NORMAL_ARRAY_POINTER 0x808F\n#define GL_COLOR_ARRAY_POINTER 0x8090\n#define GL_INDEX_ARRAY_POINTER 0x8091\n#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092\n#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093\n#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0\n#define GL_SELECTION_BUFFER_POINTER 0x0DF3\n#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1\n#define GL_INDEX_LOGIC_OP 0x0BF1\n#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B\n#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1\n#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2\n#define GL_SELECTION_BUFFER_SIZE 0x0DF4\n#define GL_NORMAL_ARRAY 0x8075\n#define GL_COLOR_ARRAY 0x8076\n#define GL_INDEX_ARRAY 0x8077\n#define GL_TEXTURE_COORD_ARRAY 0x8078\n#define GL_EDGE_FLAG_ARRAY 0x8079\n#define GL_VERTEX_ARRAY_SIZE 0x807A\n#define GL_VERTEX_ARRAY_TYPE 0x807B\n#define GL_VERTEX_ARRAY_STRIDE 0x807C\n#define GL_NORMAL_ARRAY_TYPE 0x807E\n#define GL_NORMAL_ARRAY_STRIDE 0x807F\n#define GL_COLOR_ARRAY_SIZE 0x8081\n#define GL_COLOR_ARRAY_TYPE 0x8082\n#define GL_COLOR_ARRAY_STRIDE 0x8083\n#define GL_INDEX_ARRAY_TYPE 0x8085\n#define GL_INDEX_ARRAY_STRIDE 0x8086\n#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088\n#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089\n#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A\n#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C\n#define GL_TEXTURE_LUMINANCE_SIZE 0x8060\n#define GL_TEXTURE_INTENSITY_SIZE 0x8061\n#define GL_TEXTURE_PRIORITY 0x8066\n#define GL_TEXTURE_RESIDENT 0x8067\n#define GL_ALPHA4 0x803B\n#define GL_ALPHA8 0x803C\n#define GL_ALPHA12 0x803D\n#define GL_ALPHA16 0x803E\n#define GL_LUMINANCE4 0x803F\n#define GL_LUMINANCE8 0x8040\n#define GL_LUMINANCE12 0x8041\n#define GL_LUMINANCE16 0x8042\n#define GL_LUMINANCE4_ALPHA4 0x8043\n#define GL_LUMINANCE6_ALPHA2 0x8044\n#define GL_LUMINANCE8_ALPHA8 0x8045\n#define GL_LUMINANCE12_ALPHA4 0x8046\n#define GL_LUMINANCE12_ALPHA12 0x8047\n#define GL_LUMINANCE16_ALPHA16 0x8048\n#define GL_INTENSITY 0x8049\n#define GL_INTENSITY4 0x804A\n#define GL_INTENSITY8 0x804B\n#define GL_INTENSITY12 0x804C\n#define GL_INTENSITY16 0x804D\n#define GL_V2F 0x2A20\n#define GL_V3F 0x2A21\n#define GL_C4UB_V2F 0x2A22\n#define GL_C4UB_V3F 0x2A23\n#define GL_C3F_V3F 0x2A24\n#define GL_N3F_V3F 0x2A25\n#define GL_C4F_N3F_V3F 0x2A26\n#define GL_T2F_V3F 0x2A27\n#define GL_T4F_V4F 0x2A28\n#define GL_T2F_C4UB_V3F 0x2A29\n#define GL_T2F_C3F_V3F 0x2A2A\n#define GL_T2F_N3F_V3F 0x2A2B\n#define GL_T2F_C4F_N3F_V3F 0x2A2C\n#define GL_T4F_C4F_N3F_V4F 0x2A2D\n\nusing PFNGLCOPYTEXIMAGE1DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);\nusing PFNGLCOPYTEXSUBIMAGE1DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);\nusing PFNGLTEXSUBIMAGE1DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);\n\n// Desktop OpenGL 1.2\n#define GL_UNSIGNED_BYTE_3_3_2 0x8032\n#define GL_UNSIGNED_INT_8_8_8_8 0x8035\n#define GL_UNSIGNED_INT_10_10_10_2 0x8036\n#define GL_PACK_SKIP_IMAGES 0x806B\n#define GL_PACK_IMAGE_HEIGHT 0x806C\n#define GL_PROXY_TEXTURE_3D 0x8070\n#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362\n#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364\n#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365\n#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366\n#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367\n#define GL_BGR 0x80E0\n#define GL_BGRA 0x80E1\n#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12\n#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13\n#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22\n#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23\n#define GL_RESCALE_NORMAL 0x803A\n#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8\n#define GL_SINGLE_COLOR 0x81F9\n#define GL_SEPARATE_SPECULAR_COLOR 0x81FA\n\n\n// Desktop OpenGL 1.3\n#define GL_MULTISAMPLE 0x809D\n#define GL_SAMPLE_ALPHA_TO_ONE 0x809F\n#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B\n#define GL_COMPRESSED_RGB 0x84ED\n#define GL_COMPRESSED_RGBA 0x84EE\n#define GL_TEXTURE_COMPRESSION_HINT 0x84EF\n#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0\n#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1\n#define GL_MAX_TEXTURE_UNITS 0x84E2\n#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3\n#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4\n#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5\n#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6\n#define GL_MULTISAMPLE_BIT 0x20000000\n#define GL_NORMAL_MAP 0x8511\n#define GL_REFLECTION_MAP 0x8512\n#define GL_COMPRESSED_ALPHA 0x84E9\n#define GL_COMPRESSED_LUMINANCE 0x84EA\n#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB\n#define GL_COMPRESSED_INTENSITY 0x84EC\n#define GL_COMBINE 0x8570\n#define GL_COMBINE_RGB 0x8571\n#define GL_COMBINE_ALPHA 0x8572\n#define GL_SOURCE0_RGB 0x8580\n#define GL_SOURCE1_RGB 0x8581\n#define GL_SOURCE2_RGB 0x8582\n#define GL_SOURCE0_ALPHA 0x8588\n#define GL_SOURCE1_ALPHA 0x8589\n#define GL_SOURCE2_ALPHA 0x858A\n#define GL_OPERAND0_RGB 0x8590\n#define GL_OPERAND1_RGB 0x8591\n#define GL_OPERAND2_RGB 0x8592\n#define GL_OPERAND0_ALPHA 0x8598\n#define GL_OPERAND1_ALPHA 0x8599\n#define GL_OPERAND2_ALPHA 0x859A\n#define GL_RGB_SCALE 0x8573\n#define GL_ADD_SIGNED 0x8574\n#define GL_INTERPOLATE 0x8575\n#define GL_SUBTRACT 0x84E7\n#define GL_CONSTANT 0x8576\n#define GL_PRIMARY_COLOR 0x8577\n#define GL_PREVIOUS 0x8578\n#define GL_DOT3_RGB 0x86AE\n#define GL_DOT3_RGBA 0x86AF\n\nusing PFNGLCOMPRESSEDTEXIMAGE1DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);\nusing PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);\nusing PFNGLGETCOMPRESSEDTEXIMAGEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, void * img);\n\n// Desktop OpenGL 1.4\n#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128\n#define GL_DEPTH_COMPONENT32 0x81A7\n#define GL_TEXTURE_LOD_BIAS 0x8501\n#define GL_POINT_SIZE_MIN 0x8126\n#define GL_POINT_SIZE_MAX 0x8127\n#define GL_POINT_DISTANCE_ATTENUATION 0x8129\n#define GL_GENERATE_MIPMAP 0x8191\n#define GL_FOG_COORDINATE_SOURCE 0x8450\n#define GL_FOG_COORDINATE 0x8451\n#define GL_FRAGMENT_DEPTH 0x8452\n#define GL_CURRENT_FOG_COORDINATE 0x8453\n#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454\n#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455\n#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456\n#define GL_FOG_COORDINATE_ARRAY 0x8457\n#define GL_COLOR_SUM 0x8458\n#define GL_CURRENT_SECONDARY_COLOR 0x8459\n#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A\n#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B\n#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C\n#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D\n#define GL_SECONDARY_COLOR_ARRAY 0x845E\n#define GL_TEXTURE_FILTER_CONTROL 0x8500\n#define GL_DEPTH_TEXTURE_MODE 0x884B\n#define GL_COMPARE_R_TO_TEXTURE 0x884E\n\nusing PFNGLMULTIDRAWARRAYSPROC = void(KHRONOS_APIENTRY *)(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);\nusing PFNGLMULTIDRAWELEMENTSPROC = void(KHRONOS_APIENTRY *)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);\nusing PFNGLPOINTPARAMETERFPROC = void(KHRONOS_APIENTRY *)(GLenum pname, GLfloat param);\nusing PFNGLPOINTPARAMETERFVPROC = void(KHRONOS_APIENTRY *)(GLenum pname, const GLfloat * params);\nusing PFNGLPOINTPARAMETERIPROC = void(KHRONOS_APIENTRY *)(GLenum pname, GLint param);\nusing PFNGLPOINTPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLenum pname, const GLint * params);\n\n// Desktop OpenGL 1.5\n#define GL_QUERY_COUNTER_BITS 0x8864\n#define GL_BUFFER_ACCESS 0x88BB\n#define GL_SAMPLES_PASSED 0x8914\n#define GL_SRC1_ALPHA 0x8589\n#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896\n#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897\n#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898\n#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899\n#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A\n#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B\n#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C\n#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D\n#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E\n#define GL_FOG_COORD_SRC 0x8450\n#define GL_FOG_COORD 0x8451\n#define GL_CURRENT_FOG_COORD 0x8453\n#define GL_FOG_COORD_ARRAY_TYPE 0x8454\n#define GL_FOG_COORD_ARRAY_STRIDE 0x8455\n#define GL_FOG_COORD_ARRAY_POINTER 0x8456\n#define GL_FOG_COORD_ARRAY 0x8457\n#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D\n#define GL_SRC0_RGB 0x8580\n#define GL_SRC1_RGB 0x8581\n#define GL_SRC2_RGB 0x8582\n#define GL_SRC0_ALPHA 0x8588\n#define GL_SRC2_ALPHA 0x858A\n\nusing PFNGLGETQUERYOBJECTIVPROC = void(KHRONOS_APIENTRY *)(GLuint id, GLenum pname, GLint * params);\nusing PFNGLGETBUFFERSUBDATAPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLintptr offset, GLsizeiptr size, void * data);\nusing PFNGLMAPBUFFERPROC = void *(KHRONOS_APIENTRY *)(GLenum target, GLenum access);\n\n// Desktop OpenGL 2.0\n#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642\n#define GL_MAX_VARYING_FLOATS 0x8B4B\n#define GL_SAMPLER_1D 0x8B5D\n#define GL_SAMPLER_1D_SHADOW 0x8B61\n#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0\n#define GL_LOWER_LEFT 0x8CA1\n#define GL_UPPER_LEFT 0x8CA2\n#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643\n#define GL_POINT_SPRITE 0x8861\n#define GL_COORD_REPLACE 0x8862\n#define GL_MAX_TEXTURE_COORDS 0x8871\n\nusing PFNGLGETVERTEXATTRIBDVPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum pname, GLdouble * params);\nusing PFNGLVERTEXATTRIB1DPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLdouble x);\nusing PFNGLVERTEXATTRIB1DVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLdouble * v);\nusing PFNGLVERTEXATTRIB1SPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLshort x);\nusing PFNGLVERTEXATTRIB1SVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLshort * v);\nusing PFNGLVERTEXATTRIB2DPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLdouble x, GLdouble y);\nusing PFNGLVERTEXATTRIB2DVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLdouble * v);\nusing PFNGLVERTEXATTRIB2SPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLshort x, GLshort y);\nusing PFNGLVERTEXATTRIB2SVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLshort * v);\nusing PFNGLVERTEXATTRIB3DPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z);\nusing PFNGLVERTEXATTRIB3DVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLdouble * v);\nusing PFNGLVERTEXATTRIB3SPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLshort x, GLshort y, GLshort z);\nusing PFNGLVERTEXATTRIB3SVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLshort * v);\nusing PFNGLVERTEXATTRIB4NBVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLbyte * v);\nusing PFNGLVERTEXATTRIB4NIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLint * v);\nusing PFNGLVERTEXATTRIB4NSVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLshort * v);\nusing PFNGLVERTEXATTRIB4NUBPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);\nusing PFNGLVERTEXATTRIB4NUBVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLubyte * v);\nusing PFNGLVERTEXATTRIB4NUIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLuint * v);\nusing PFNGLVERTEXATTRIB4NUSVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLushort * v);\nusing PFNGLVERTEXATTRIB4BVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLbyte * v);\nusing PFNGLVERTEXATTRIB4DPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\nusing PFNGLVERTEXATTRIB4DVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLdouble * v);\nusing PFNGLVERTEXATTRIB4IVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLint * v);\nusing PFNGLVERTEXATTRIB4SPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);\nusing PFNGLVERTEXATTRIB4SVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLshort * v);\nusing PFNGLVERTEXATTRIB4UBVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLubyte * v);\nusing PFNGLVERTEXATTRIB4UIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLuint * v);\nusing PFNGLVERTEXATTRIB4USVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLushort * v);\n\n// Desktop OpenGL 2.1\n#define GL_SRGB_ALPHA 0x8C42\n#define GL_COMPRESSED_SRGB 0x8C48\n#define GL_COMPRESSED_SRGB_ALPHA 0x8C49\n#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F\n#define GL_SLUMINANCE_ALPHA 0x8C44\n#define GL_SLUMINANCE8_ALPHA8 0x8C45\n#define GL_SLUMINANCE 0x8C46\n#define GL_SLUMINANCE8 0x8C47\n#define GL_COMPRESSED_SLUMINANCE 0x8C4A\n#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B\n\n\n// Desktop OpenGL 3.0\n#define GL_CLIP_DISTANCE0 0x3000\n#define GL_CLIP_DISTANCE1 0x3001\n#define GL_CLIP_DISTANCE2 0x3002\n#define GL_CLIP_DISTANCE3 0x3003\n#define GL_CLIP_DISTANCE4 0x3004\n#define GL_CLIP_DISTANCE5 0x3005\n#define GL_CLIP_DISTANCE6 0x3006\n#define GL_CLIP_DISTANCE7 0x3007\n#define GL_MAX_CLIP_DISTANCES 0x0D32\n#define GL_COMPRESSED_RED 0x8225\n#define GL_COMPRESSED_RG 0x8226\n#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001\n#define GL_CLAMP_READ_COLOR 0x891C\n#define GL_FIXED_ONLY 0x891D\n#define GL_TEXTURE_1D_ARRAY 0x8C18\n#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19\n#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B\n#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C\n#define GL_GREEN_INTEGER 0x8D95\n#define GL_BLUE_INTEGER 0x8D96\n#define GL_BGR_INTEGER 0x8D9A\n#define GL_BGRA_INTEGER 0x8D9B\n#define GL_SAMPLER_1D_ARRAY 0x8DC0\n#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3\n#define GL_INT_SAMPLER_1D 0x8DC9\n#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE\n#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1\n#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6\n#define GL_QUERY_WAIT 0x8E13\n#define GL_QUERY_NO_WAIT 0x8E14\n#define GL_QUERY_BY_REGION_WAIT 0x8E15\n#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16\n#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB\n#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC\n#define GL_STENCIL_INDEX1 0x8D46\n#define GL_STENCIL_INDEX4 0x8D47\n#define GL_STENCIL_INDEX16 0x8D49\n#define GL_INDEX 0x8222\n#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14\n#define GL_TEXTURE_INTENSITY_TYPE 0x8C15\n#define GL_FRAMEBUFFER_SRGB 0x8DB9\n#define GL_COMPRESSED_RED_RGTC1 0x8DBB\n#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC\n#define GL_COMPRESSED_RG_RGTC2 0x8DBD\n#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE\n#define GL_R16 0x822A\n#define GL_RG16 0x822C\n#define GL_CLAMP_VERTEX_COLOR 0x891A\n#define GL_CLAMP_FRAGMENT_COLOR 0x891B\n#define GL_ALPHA_INTEGER 0x8D97\n\nusing PFNGLCLAMPCOLORPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum clamp);\nusing PFNGLBEGINCONDITIONALRENDERPROC = void(KHRONOS_APIENTRY *)(GLuint id, GLenum mode);\nusing PFNGLENDCONDITIONALRENDERPROC = void(KHRONOS_APIENTRY *)();\nusing PFNGLVERTEXATTRIBI1IPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLint x);\nusing PFNGLVERTEXATTRIBI2IPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLint x, GLint y);\nusing PFNGLVERTEXATTRIBI3IPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLint x, GLint y, GLint z);\nusing PFNGLVERTEXATTRIBI1UIPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLuint x);\nusing PFNGLVERTEXATTRIBI2UIPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLuint x, GLuint y);\nusing PFNGLVERTEXATTRIBI3UIPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLuint x, GLuint y, GLuint z);\nusing PFNGLVERTEXATTRIBI1IVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLint * v);\nusing PFNGLVERTEXATTRIBI2IVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLint * v);\nusing PFNGLVERTEXATTRIBI3IVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLint * v);\nusing PFNGLVERTEXATTRIBI1UIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLuint * v);\nusing PFNGLVERTEXATTRIBI2UIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLuint * v);\nusing PFNGLVERTEXATTRIBI3UIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLuint * v);\nusing PFNGLVERTEXATTRIBI4BVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLbyte * v);\nusing PFNGLVERTEXATTRIBI4SVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLshort * v);\nusing PFNGLVERTEXATTRIBI4UBVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLubyte * v);\nusing PFNGLVERTEXATTRIBI4USVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLushort * v);\nusing PFNGLBINDFRAGDATALOCATIONPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint color, const GLchar * name);\nusing PFNGLFRAMEBUFFERTEXTURE1DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);\nusing PFNGLFRAMEBUFFERTEXTURE3DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);\n\n// Desktop OpenGL 3.1\n#define GL_SAMPLER_2D_RECT 0x8B63\n#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64\n#define GL_INT_SAMPLER_2D_RECT 0x8DCD\n#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5\n#define GL_TEXTURE_RECTANGLE 0x84F5\n#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6\n#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7\n#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8\n#define GL_R16_SNORM 0x8F98\n#define GL_RG16_SNORM 0x8F99\n#define GL_RGB16_SNORM 0x8F9A\n#define GL_RGBA16_SNORM 0x8F9B\n#define GL_PRIMITIVE_RESTART 0x8F9D\n#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E\n#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45\n\nusing PFNGLPRIMITIVERESTARTINDEXPROC = void(KHRONOS_APIENTRY *)(GLuint index);\nusing PFNGLGETACTIVEUNIFORMNAMEPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);\n\n// Desktop OpenGL 3.2\n#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001\n#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002\n#define GL_PROGRAM_POINT_SIZE 0x8642\n#define GL_CONTEXT_PROFILE_MASK 0x9126\n#define GL_DEPTH_CLAMP 0x864F\n#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C\n#define GL_PROVOKING_VERTEX 0x8E4F\n#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F\n#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101\n#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103\n\nusing PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = void(KHRONOS_APIENTRY *)(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);\nusing PFNGLPROVOKINGVERTEXPROC = void(KHRONOS_APIENTRY *)(GLenum mode);\nusing PFNGLTEXIMAGE2DMULTISAMPLEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);\nusing PFNGLTEXIMAGE3DMULTISAMPLEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);\n\n// Desktop OpenGL 3.3\n#define GL_SRC1_COLOR 0x88F9\n#define GL_ONE_MINUS_SRC1_COLOR 0x88FA\n#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB\n#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC\n#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46\n#define GL_TIME_ELAPSED 0x88BF\n#define GL_TIMESTAMP 0x8E28\n\nusing PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);\nusing PFNGLGETFRAGDATAINDEXPROC = GLint(KHRONOS_APIENTRY *)(GLuint program, const GLchar * name);\nusing PFNGLQUERYCOUNTERPROC = void(KHRONOS_APIENTRY *)(GLuint id, GLenum target);\nusing PFNGLGETQUERYOBJECTI64VPROC = void(KHRONOS_APIENTRY *)(GLuint id, GLenum pname, GLint64 * params);\nusing PFNGLGETQUERYOBJECTUI64VPROC = void(KHRONOS_APIENTRY *)(GLuint id, GLenum pname, GLuint64 * params);\nusing PFNGLVERTEXATTRIBP1UIPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, GLuint value);\nusing PFNGLVERTEXATTRIBP1UIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);\nusing PFNGLVERTEXATTRIBP2UIPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, GLuint value);\nusing PFNGLVERTEXATTRIBP2UIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);\nusing PFNGLVERTEXATTRIBP3UIPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, GLuint value);\nusing PFNGLVERTEXATTRIBP3UIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);\nusing PFNGLVERTEXATTRIBP4UIPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, GLuint value);\nusing PFNGLVERTEXATTRIBP4UIVPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);\nusing PFNGLVERTEXP2UIPROC = void(KHRONOS_APIENTRY *)(GLenum type, GLuint value);\nusing PFNGLVERTEXP2UIVPROC = void(KHRONOS_APIENTRY *)(GLenum type, const GLuint * value);\nusing PFNGLVERTEXP3UIPROC = void(KHRONOS_APIENTRY *)(GLenum type, GLuint value);\nusing PFNGLVERTEXP3UIVPROC = void(KHRONOS_APIENTRY *)(GLenum type, const GLuint * value);\nusing PFNGLVERTEXP4UIPROC = void(KHRONOS_APIENTRY *)(GLenum type, GLuint value);\nusing PFNGLVERTEXP4UIVPROC = void(KHRONOS_APIENTRY *)(GLenum type, const GLuint * value);\nusing PFNGLTEXCOORDP1UIPROC = void(KHRONOS_APIENTRY *)(GLenum type, GLuint coords);\nusing PFNGLTEXCOORDP1UIVPROC = void(KHRONOS_APIENTRY *)(GLenum type, const GLuint * coords);\nusing PFNGLTEXCOORDP2UIPROC = void(KHRONOS_APIENTRY *)(GLenum type, GLuint coords);\nusing PFNGLTEXCOORDP2UIVPROC = void(KHRONOS_APIENTRY *)(GLenum type, const GLuint * coords);\nusing PFNGLTEXCOORDP3UIPROC = void(KHRONOS_APIENTRY *)(GLenum type, GLuint coords);\nusing PFNGLTEXCOORDP3UIVPROC = void(KHRONOS_APIENTRY *)(GLenum type, const GLuint * coords);\nusing PFNGLTEXCOORDP4UIPROC = void(KHRONOS_APIENTRY *)(GLenum type, GLuint coords);\nusing PFNGLTEXCOORDP4UIVPROC = void(KHRONOS_APIENTRY *)(GLenum type, const GLuint * coords);\nusing PFNGLMULTITEXCOORDP1UIPROC = void(KHRONOS_APIENTRY *)(GLenum texture, GLenum type, GLuint coords);\nusing PFNGLMULTITEXCOORDP1UIVPROC = void(KHRONOS_APIENTRY *)(GLenum texture, GLenum type, const GLuint * coords);\nusing PFNGLMULTITEXCOORDP2UIPROC = void(KHRONOS_APIENTRY *)(GLenum texture, GLenum type, GLuint coords);\nusing PFNGLMULTITEXCOORDP2UIVPROC = void(KHRONOS_APIENTRY *)(GLenum texture, GLenum type, const GLuint * coords);\nusing PFNGLMULTITEXCOORDP3UIPROC = void(KHRONOS_APIENTRY *)(GLenum texture, GLenum type, GLuint coords);\nusing PFNGLMULTITEXCOORDP3UIVPROC = void(KHRONOS_APIENTRY *)(GLenum texture, GLenum type, const GLuint * coords);\nusing PFNGLMULTITEXCOORDP4UIPROC = void(KHRONOS_APIENTRY *)(GLenum texture, GLenum type, GLuint coords);\nusing PFNGLMULTITEXCOORDP4UIVPROC = void(KHRONOS_APIENTRY *)(GLenum texture, GLenum type, const GLuint * coords);\nusing PFNGLNORMALP3UIPROC = void(KHRONOS_APIENTRY *)(GLenum type, GLuint coords);\nusing PFNGLNORMALP3UIVPROC = void(KHRONOS_APIENTRY *)(GLenum type, const GLuint * coords);\nusing PFNGLCOLORP3UIPROC = void(KHRONOS_APIENTRY *)(GLenum type, GLuint color);\nusing PFNGLCOLORP3UIVPROC = void(KHRONOS_APIENTRY *)(GLenum type, const GLuint * color);\nusing PFNGLCOLORP4UIPROC = void(KHRONOS_APIENTRY *)(GLenum type, GLuint color);\nusing PFNGLCOLORP4UIVPROC = void(KHRONOS_APIENTRY *)(GLenum type, const GLuint * color);\nusing PFNGLSECONDARYCOLORP3UIPROC = void(KHRONOS_APIENTRY *)(GLenum type, GLuint color);\nusing PFNGLSECONDARYCOLORP3UIVPROC = void(KHRONOS_APIENTRY *)(GLenum type, const GLuint * color);\n\n// Desktop OpenGL 4.0\n#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B\n#define GL_MAX_VERTEX_STREAMS 0x8E71\n#define GL_DOUBLE_VEC2 0x8FFC\n#define GL_DOUBLE_VEC3 0x8FFD\n#define GL_DOUBLE_VEC4 0x8FFE\n#define GL_DOUBLE_MAT2 0x8F46\n#define GL_DOUBLE_MAT3 0x8F47\n#define GL_DOUBLE_MAT4 0x8F48\n#define GL_DOUBLE_MAT2x3 0x8F49\n#define GL_DOUBLE_MAT2x4 0x8F4A\n#define GL_DOUBLE_MAT3x2 0x8F4B\n#define GL_DOUBLE_MAT3x4 0x8F4C\n#define GL_DOUBLE_MAT4x2 0x8F4D\n#define GL_DOUBLE_MAT4x3 0x8F4E\n#define GL_ACTIVE_SUBROUTINES 0x8DE5\n#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6\n#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47\n#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48\n#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49\n#define GL_MAX_SUBROUTINES 0x8DE7\n#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8\n#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A\n#define GL_COMPATIBLE_SUBROUTINES 0x8E4B\n#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73\n#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74\n#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0\n#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1\n#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23\n#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24\n#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70\n\nusing PFNGLUNIFORM1DPROC = void(KHRONOS_APIENTRY *)(GLint location, GLdouble x);\nusing PFNGLUNIFORM2DPROC = void(KHRONOS_APIENTRY *)(GLint location, GLdouble x, GLdouble y);\nusing PFNGLUNIFORM3DPROC = void(KHRONOS_APIENTRY *)(GLint location, GLdouble x, GLdouble y, GLdouble z);\nusing PFNGLUNIFORM4DPROC = void(KHRONOS_APIENTRY *)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\nusing PFNGLUNIFORM1DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLdouble * value);\nusing PFNGLUNIFORM2DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLdouble * value);\nusing PFNGLUNIFORM3DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLdouble * value);\nusing PFNGLUNIFORM4DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, const GLdouble * value);\nusing PFNGLUNIFORMMATRIX2DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLUNIFORMMATRIX3DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLUNIFORMMATRIX4DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLUNIFORMMATRIX2X3DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLUNIFORMMATRIX2X4DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLUNIFORMMATRIX3X2DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLUNIFORMMATRIX3X4DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLUNIFORMMATRIX4X2DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLUNIFORMMATRIX4X3DVPROC = void(KHRONOS_APIENTRY *)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLGETUNIFORMDVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLdouble * params);\nusing PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = GLint(KHRONOS_APIENTRY *)(GLuint program, GLenum shadertype, const GLchar * name);\nusing PFNGLGETSUBROUTINEINDEXPROC = GLuint(KHRONOS_APIENTRY *)(GLuint program, GLenum shadertype, const GLchar * name);\nusing PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);\nusing PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);\nusing PFNGLGETACTIVESUBROUTINENAMEPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);\nusing PFNGLUNIFORMSUBROUTINESUIVPROC = void(KHRONOS_APIENTRY *)(GLenum shadertype, GLsizei count, const GLuint * indices);\nusing PFNGLGETUNIFORMSUBROUTINEUIVPROC = void(KHRONOS_APIENTRY *)(GLenum shadertype, GLint location, GLuint * params);\nusing PFNGLGETPROGRAMSTAGEIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLenum shadertype, GLenum pname, GLint * values);\nusing PFNGLPATCHPARAMETERFVPROC = void(KHRONOS_APIENTRY *)(GLenum pname, const GLfloat * values);\nusing PFNGLDRAWTRANSFORMFEEDBACKPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLuint id);\nusing PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLuint id, GLuint stream);\nusing PFNGLBEGINQUERYINDEXEDPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint index, GLuint id);\nusing PFNGLENDQUERYINDEXEDPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint index);\nusing PFNGLGETQUERYINDEXEDIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint index, GLenum pname, GLint * params);\n\n// Desktop OpenGL 4.1\n#define GL_MAX_VIEWPORTS 0x825B\n#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C\n#define GL_VIEWPORT_BOUNDS_RANGE 0x825D\n#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F\n\nusing PFNGLPROGRAMUNIFORM1DPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLdouble v0);\nusing PFNGLPROGRAMUNIFORM1DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLdouble * value);\nusing PFNGLPROGRAMUNIFORM2DPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLdouble v0, GLdouble v1);\nusing PFNGLPROGRAMUNIFORM2DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLdouble * value);\nusing PFNGLPROGRAMUNIFORM3DPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);\nusing PFNGLPROGRAMUNIFORM3DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLdouble * value);\nusing PFNGLPROGRAMUNIFORM4DPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);\nusing PFNGLPROGRAMUNIFORM4DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, const GLdouble * value);\nusing PFNGLPROGRAMUNIFORMMATRIX2DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLPROGRAMUNIFORMMATRIX3DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLPROGRAMUNIFORMMATRIX4DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);\nusing PFNGLVERTEXATTRIBL1DPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLdouble x);\nusing PFNGLVERTEXATTRIBL2DPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLdouble x, GLdouble y);\nusing PFNGLVERTEXATTRIBL3DPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z);\nusing PFNGLVERTEXATTRIBL4DPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);\nusing PFNGLVERTEXATTRIBL1DVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLdouble * v);\nusing PFNGLVERTEXATTRIBL2DVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLdouble * v);\nusing PFNGLVERTEXATTRIBL3DVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLdouble * v);\nusing PFNGLVERTEXATTRIBL4DVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLdouble * v);\nusing PFNGLVERTEXATTRIBLPOINTERPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);\nusing PFNGLGETVERTEXATTRIBLDVPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLenum pname, GLdouble * params);\nusing PFNGLVIEWPORTARRAYVPROC = void(KHRONOS_APIENTRY *)(GLuint first, GLsizei count, const GLfloat * v);\nusing PFNGLVIEWPORTINDEXEDFPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);\nusing PFNGLVIEWPORTINDEXEDFVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLfloat * v);\nusing PFNGLSCISSORARRAYVPROC = void(KHRONOS_APIENTRY *)(GLuint first, GLsizei count, const GLint * v);\nusing PFNGLSCISSORINDEXEDPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);\nusing PFNGLSCISSORINDEXEDVPROC = void(KHRONOS_APIENTRY *)(GLuint index, const GLint * v);\nusing PFNGLDEPTHRANGEARRAYVPROC = void(KHRONOS_APIENTRY *)(GLuint first, GLsizei count, const GLdouble * v);\nusing PFNGLDEPTHRANGEINDEXEDPROC = void(KHRONOS_APIENTRY *)(GLuint index, GLdouble n, GLdouble f);\nusing PFNGLGETFLOATI_VPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint index, GLfloat * data);\nusing PFNGLGETDOUBLEI_VPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint index, GLdouble * data);\n\n// Desktop OpenGL 4.2\n#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127\n#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128\n#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129\n#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A\n#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B\n#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C\n#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D\n#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E\n#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC\n#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4\n#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5\n#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6\n#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7\n#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8\n#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9\n#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA\n#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB\n#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA\n#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39\n#define GL_IMAGE_1D 0x904C\n#define GL_IMAGE_2D_RECT 0x904F\n#define GL_IMAGE_1D_ARRAY 0x9052\n#define GL_IMAGE_2D_MULTISAMPLE 0x9055\n#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056\n#define GL_INT_IMAGE_1D 0x9057\n#define GL_INT_IMAGE_2D_RECT 0x905A\n#define GL_INT_IMAGE_1D_ARRAY 0x905D\n#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060\n#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061\n#define GL_UNSIGNED_INT_IMAGE_1D 0x9062\n#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065\n#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068\n#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B\n#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C\n#define GL_MAX_IMAGE_SAMPLES 0x906D\n#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C\n#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D\n#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E\n#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F\n\nusing PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);\nusing PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);\nusing PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);\nusing PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);\nusing PFNGLTEXSTORAGE1DPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);\nusing PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLuint id, GLsizei instancecount);\nusing PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);\n\n// Desktop OpenGL 4.3\n#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9\n#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E\n#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC\n#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED\n#define GL_INTERNALFORMAT_SUPPORTED 0x826F\n#define GL_INTERNALFORMAT_PREFERRED 0x8270\n#define GL_INTERNALFORMAT_RED_SIZE 0x8271\n#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272\n#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273\n#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274\n#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275\n#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276\n#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277\n#define GL_INTERNALFORMAT_RED_TYPE 0x8278\n#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279\n#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A\n#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B\n#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C\n#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D\n#define GL_MAX_WIDTH 0x827E\n#define GL_MAX_HEIGHT 0x827F\n#define GL_MAX_DEPTH 0x8280\n#define GL_MAX_LAYERS 0x8281\n#define GL_MAX_COMBINED_DIMENSIONS 0x8282\n#define GL_COLOR_COMPONENTS 0x8283\n#define GL_DEPTH_COMPONENTS 0x8284\n#define GL_STENCIL_COMPONENTS 0x8285\n#define GL_COLOR_RENDERABLE 0x8286\n#define GL_DEPTH_RENDERABLE 0x8287\n#define GL_STENCIL_RENDERABLE 0x8288\n#define GL_FRAMEBUFFER_RENDERABLE 0x8289\n#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A\n#define GL_FRAMEBUFFER_BLEND 0x828B\n#define GL_READ_PIXELS 0x828C\n#define GL_READ_PIXELS_FORMAT 0x828D\n#define GL_READ_PIXELS_TYPE 0x828E\n#define GL_TEXTURE_IMAGE_FORMAT 0x828F\n#define GL_TEXTURE_IMAGE_TYPE 0x8290\n#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291\n#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292\n#define GL_MIPMAP 0x8293\n#define GL_MANUAL_GENERATE_MIPMAP 0x8294\n#define GL_AUTO_GENERATE_MIPMAP 0x8295\n#define GL_COLOR_ENCODING 0x8296\n#define GL_SRGB_READ 0x8297\n#define GL_SRGB_WRITE 0x8298\n#define GL_FILTER 0x829A\n#define GL_VERTEX_TEXTURE 0x829B\n#define GL_TESS_CONTROL_TEXTURE 0x829C\n#define GL_TESS_EVALUATION_TEXTURE 0x829D\n#define GL_GEOMETRY_TEXTURE 0x829E\n#define GL_FRAGMENT_TEXTURE 0x829F\n#define GL_COMPUTE_TEXTURE 0x82A0\n#define GL_TEXTURE_SHADOW 0x82A1\n#define GL_TEXTURE_GATHER 0x82A2\n#define GL_TEXTURE_GATHER_SHADOW 0x82A3\n#define GL_SHADER_IMAGE_LOAD 0x82A4\n#define GL_SHADER_IMAGE_STORE 0x82A5\n#define GL_SHADER_IMAGE_ATOMIC 0x82A6\n#define GL_IMAGE_TEXEL_SIZE 0x82A7\n#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8\n#define GL_IMAGE_PIXEL_FORMAT 0x82A9\n#define GL_IMAGE_PIXEL_TYPE 0x82AA\n#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC\n#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD\n#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE\n#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF\n#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1\n#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2\n#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3\n#define GL_CLEAR_BUFFER 0x82B4\n#define GL_TEXTURE_VIEW 0x82B5\n#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6\n#define GL_FULL_SUPPORT 0x82B7\n#define GL_CAVEAT_SUPPORT 0x82B8\n#define GL_IMAGE_CLASS_4_X_32 0x82B9\n#define GL_IMAGE_CLASS_2_X_32 0x82BA\n#define GL_IMAGE_CLASS_1_X_32 0x82BB\n#define GL_IMAGE_CLASS_4_X_16 0x82BC\n#define GL_IMAGE_CLASS_2_X_16 0x82BD\n#define GL_IMAGE_CLASS_1_X_16 0x82BE\n#define GL_IMAGE_CLASS_4_X_8 0x82BF\n#define GL_IMAGE_CLASS_2_X_8 0x82C0\n#define GL_IMAGE_CLASS_1_X_8 0x82C1\n#define GL_IMAGE_CLASS_11_11_10 0x82C2\n#define GL_IMAGE_CLASS_10_10_10_2 0x82C3\n#define GL_VIEW_CLASS_128_BITS 0x82C4\n#define GL_VIEW_CLASS_96_BITS 0x82C5\n#define GL_VIEW_CLASS_64_BITS 0x82C6\n#define GL_VIEW_CLASS_48_BITS 0x82C7\n#define GL_VIEW_CLASS_32_BITS 0x82C8\n#define GL_VIEW_CLASS_24_BITS 0x82C9\n#define GL_VIEW_CLASS_16_BITS 0x82CA\n#define GL_VIEW_CLASS_8_BITS 0x82CB\n#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC\n#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD\n#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE\n#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF\n#define GL_VIEW_CLASS_RGTC1_RED 0x82D0\n#define GL_VIEW_CLASS_RGTC2_RG 0x82D1\n#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2\n#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3\n#define GL_VERTEX_SUBROUTINE 0x92E8\n#define GL_TESS_CONTROL_SUBROUTINE 0x92E9\n#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA\n#define GL_GEOMETRY_SUBROUTINE 0x92EB\n#define GL_FRAGMENT_SUBROUTINE 0x92EC\n#define GL_COMPUTE_SUBROUTINE 0x92ED\n#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE\n#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF\n#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0\n#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1\n#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2\n#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3\n#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8\n#define GL_LOCATION_INDEX 0x930F\n#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB\n#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC\n#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD\n#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE\n#define GL_DISPLAY_LIST 0x82E7\n\nusing PFNGLCLEARBUFFERDATAPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);\nusing PFNGLCLEARBUFFERSUBDATAPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);\nusing PFNGLGETINTERNALFORMATI64VPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params);\nusing PFNGLINVALIDATETEXSUBIMAGEPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);\nusing PFNGLINVALIDATETEXIMAGEPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level);\nusing PFNGLINVALIDATEBUFFERSUBDATAPROC = void(KHRONOS_APIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr length);\nusing PFNGLINVALIDATEBUFFERDATAPROC = void(KHRONOS_APIENTRY *)(GLuint buffer);\nusing PFNGLMULTIDRAWARRAYSINDIRECTPROC = void(KHRONOS_APIENTRY *)(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);\nusing PFNGLMULTIDRAWELEMENTSINDIRECTPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);\nusing PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = GLint(KHRONOS_APIENTRY *)(GLuint program, GLenum programInterface, const GLchar * name);\nusing PFNGLSHADERSTORAGEBLOCKBINDINGPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);\nusing PFNGLTEXTUREVIEWPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);\nusing PFNGLVERTEXATTRIBLFORMATPROC = void(KHRONOS_APIENTRY *)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);\n\n// Desktop OpenGL 4.4\n#define GL_MAP_PERSISTENT_BIT 0x0040\n#define GL_MAP_COHERENT_BIT 0x0080\n#define GL_DYNAMIC_STORAGE_BIT 0x0100\n#define GL_CLIENT_STORAGE_BIT 0x0200\n#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000\n#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F\n#define GL_BUFFER_STORAGE_FLAGS 0x8220\n#define GL_CLEAR_TEXTURE 0x9365\n#define GL_LOCATION_COMPONENT 0x934A\n#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B\n#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C\n#define GL_QUERY_BUFFER 0x9192\n#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000\n#define GL_QUERY_BUFFER_BINDING 0x9193\n#define GL_QUERY_RESULT_NO_WAIT 0x9194\n#define GL_MIRROR_CLAMP_TO_EDGE 0x8743\n\nusing PFNGLBUFFERSTORAGEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);\nusing PFNGLCLEARTEXIMAGEPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLenum format, GLenum type, const void * data);\nusing PFNGLCLEARTEXSUBIMAGEPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);\nusing PFNGLBINDBUFFERSBASEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers);\nusing PFNGLBINDBUFFERSRANGEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);\nusing PFNGLBINDTEXTURESPROC = void(KHRONOS_APIENTRY *)(GLuint first, GLsizei count, const GLuint * textures);\nusing PFNGLBINDSAMPLERSPROC = void(KHRONOS_APIENTRY *)(GLuint first, GLsizei count, const GLuint * samplers);\nusing PFNGLBINDIMAGETEXTURESPROC = void(KHRONOS_APIENTRY *)(GLuint first, GLsizei count, const GLuint * textures);\nusing PFNGLBINDVERTEXBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);\n\n// Desktop OpenGL 4.5\n#define GL_NEGATIVE_ONE_TO_ONE 0x935E\n#define GL_ZERO_TO_ONE 0x935F\n#define GL_CLIP_ORIGIN 0x935C\n#define GL_CLIP_DEPTH_MODE 0x935D\n#define GL_QUERY_WAIT_INVERTED 0x8E17\n#define GL_QUERY_NO_WAIT_INVERTED 0x8E18\n#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19\n#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A\n#define GL_MAX_CULL_DISTANCES 0x82F9\n#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA\n#define GL_TEXTURE_TARGET 0x1006\n#define GL_QUERY_TARGET 0x82EA\n#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB\n#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC\n\nusing PFNGLCLIPCONTROLPROC = void(KHRONOS_APIENTRY *)(GLenum origin, GLenum depth);\nusing PFNGLCREATETRANSFORMFEEDBACKSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * ids);\nusing PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = void(KHRONOS_APIENTRY *)(GLuint xfb, GLuint index, GLuint buffer);\nusing PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = void(KHRONOS_APIENTRY *)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);\nusing PFNGLGETTRANSFORMFEEDBACKIVPROC = void(KHRONOS_APIENTRY *)(GLuint xfb, GLenum pname, GLint * param);\nusing PFNGLGETTRANSFORMFEEDBACKI_VPROC = void(KHRONOS_APIENTRY *)(GLuint xfb, GLenum pname, GLuint index, GLint * param);\nusing PFNGLGETTRANSFORMFEEDBACKI64_VPROC = void(KHRONOS_APIENTRY *)(GLuint xfb, GLenum pname, GLuint index, GLint64 * param);\nusing PFNGLCREATEBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * buffers);\nusing PFNGLNAMEDBUFFERSTORAGEPROC = void(KHRONOS_APIENTRY *)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);\nusing PFNGLNAMEDBUFFERDATAPROC = void(KHRONOS_APIENTRY *)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);\nusing PFNGLNAMEDBUFFERSUBDATAPROC = void(KHRONOS_APIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);\nusing PFNGLCOPYNAMEDBUFFERSUBDATAPROC = void(KHRONOS_APIENTRY *)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);\nusing PFNGLCLEARNAMEDBUFFERDATAPROC = void(KHRONOS_APIENTRY *)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);\nusing PFNGLCLEARNAMEDBUFFERSUBDATAPROC = void(KHRONOS_APIENTRY *)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);\nusing PFNGLMAPNAMEDBUFFERPROC = void *(KHRONOS_APIENTRY *)(GLuint buffer, GLenum access);\nusing PFNGLMAPNAMEDBUFFERRANGEPROC = void *(KHRONOS_APIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);\nusing PFNGLUNMAPNAMEDBUFFERPROC = GLboolean(KHRONOS_APIENTRY *)(GLuint buffer);\nusing PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = void(KHRONOS_APIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr length);\nusing PFNGLGETNAMEDBUFFERPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLuint buffer, GLenum pname, GLint * params);\nusing PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = void(KHRONOS_APIENTRY *)(GLuint buffer, GLenum pname, GLint64 * params);\nusing PFNGLGETNAMEDBUFFERPOINTERVPROC = void(KHRONOS_APIENTRY *)(GLuint buffer, GLenum pname, void ** params);\nusing PFNGLGETNAMEDBUFFERSUBDATAPROC = void(KHRONOS_APIENTRY *)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);\nusing PFNGLCREATEFRAMEBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * framebuffers);\nusing PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);\nusing PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum pname, GLint param);\nusing PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);\nusing PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);\nusing PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum buf);\nusing PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLsizei n, const GLenum * bufs);\nusing PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum src);\nusing PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments);\nusing PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);\nusing PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value);\nusing PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value);\nusing PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value);\nusing PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);\nusing PFNGLBLITNAMEDFRAMEBUFFERPROC = void(KHRONOS_APIENTRY *)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);\nusing PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = GLenum(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum target);\nusing PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum pname, GLint * param);\nusing PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);\nusing PFNGLCREATERENDERBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * renderbuffers);\nusing PFNGLNAMEDRENDERBUFFERSTORAGEPROC = void(KHRONOS_APIENTRY *)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);\nusing PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = void(KHRONOS_APIENTRY *)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);\nusing PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLuint renderbuffer, GLenum pname, GLint * params);\nusing PFNGLCREATETEXTURESPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizei n, GLuint * textures);\nusing PFNGLTEXTUREBUFFERPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum internalformat, GLuint buffer);\nusing PFNGLTEXTUREBUFFERRANGEPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);\nusing PFNGLTEXTURESTORAGE1DPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);\nusing PFNGLTEXTURESTORAGE2DPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);\nusing PFNGLTEXTURESTORAGE3DPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);\nusing PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);\nusing PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);\nusing PFNGLTEXTURESUBIMAGE1DPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);\nusing PFNGLTEXTURESUBIMAGE2DPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);\nusing PFNGLTEXTURESUBIMAGE3DPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);\nusing PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);\nusing PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);\nusing PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);\nusing PFNGLCOPYTEXTURESUBIMAGE1DPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);\nusing PFNGLCOPYTEXTURESUBIMAGE2DPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);\nusing PFNGLCOPYTEXTURESUBIMAGE3DPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);\nusing PFNGLTEXTUREPARAMETERFPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum pname, GLfloat param);\nusing PFNGLTEXTUREPARAMETERFVPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum pname, const GLfloat * param);\nusing PFNGLTEXTUREPARAMETERIPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum pname, GLint param);\nusing PFNGLTEXTUREPARAMETERIIVPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum pname, const GLint * params);\nusing PFNGLTEXTUREPARAMETERIUIVPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum pname, const GLuint * params);\nusing PFNGLTEXTUREPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum pname, const GLint * param);\nusing PFNGLGENERATETEXTUREMIPMAPPROC = void(KHRONOS_APIENTRY *)(GLuint texture);\nusing PFNGLBINDTEXTUREUNITPROC = void(KHRONOS_APIENTRY *)(GLuint unit, GLuint texture);\nusing PFNGLGETTEXTUREIMAGEPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);\nusing PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLsizei bufSize, void * pixels);\nusing PFNGLGETTEXTURELEVELPARAMETERFVPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLenum pname, GLfloat * params);\nusing PFNGLGETTEXTURELEVELPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLenum pname, GLint * params);\nusing PFNGLGETTEXTUREPARAMETERFVPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum pname, GLfloat * params);\nusing PFNGLGETTEXTUREPARAMETERIIVPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum pname, GLint * params);\nusing PFNGLGETTEXTUREPARAMETERIUIVPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum pname, GLuint * params);\nusing PFNGLGETTEXTUREPARAMETERIVPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLenum pname, GLint * params);\nusing PFNGLCREATEVERTEXARRAYSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * arrays);\nusing PFNGLDISABLEVERTEXARRAYATTRIBPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLuint index);\nusing PFNGLENABLEVERTEXARRAYATTRIBPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLuint index);\nusing PFNGLVERTEXARRAYELEMENTBUFFERPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLuint buffer);\nusing PFNGLVERTEXARRAYVERTEXBUFFERPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);\nusing PFNGLVERTEXARRAYVERTEXBUFFERSPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);\nusing PFNGLVERTEXARRAYATTRIBBINDINGPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);\nusing PFNGLVERTEXARRAYATTRIBFORMATPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);\nusing PFNGLVERTEXARRAYATTRIBIFORMATPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);\nusing PFNGLVERTEXARRAYATTRIBLFORMATPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);\nusing PFNGLVERTEXARRAYBINDINGDIVISORPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLuint bindingindex, GLuint divisor);\nusing PFNGLGETVERTEXARRAYIVPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLenum pname, GLint * param);\nusing PFNGLGETVERTEXARRAYINDEXEDIVPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);\nusing PFNGLGETVERTEXARRAYINDEXED64IVPROC = void(KHRONOS_APIENTRY *)(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param);\nusing PFNGLCREATESAMPLERSPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * samplers);\nusing PFNGLCREATEPROGRAMPIPELINESPROC = void(KHRONOS_APIENTRY *)(GLsizei n, GLuint * pipelines);\nusing PFNGLCREATEQUERIESPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLsizei n, GLuint * ids);\nusing PFNGLGETQUERYBUFFEROBJECTI64VPROC = void(KHRONOS_APIENTRY *)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\nusing PFNGLGETQUERYBUFFEROBJECTIVPROC = void(KHRONOS_APIENTRY *)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\nusing PFNGLGETQUERYBUFFEROBJECTUI64VPROC = void(KHRONOS_APIENTRY *)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\nusing PFNGLGETQUERYBUFFEROBJECTUIVPROC = void(KHRONOS_APIENTRY *)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);\nusing PFNGLGETTEXTURESUBIMAGEPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels);\nusing PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = void(KHRONOS_APIENTRY *)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);\nusing PFNGLGETNCOMPRESSEDTEXIMAGEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint lod, GLsizei bufSize, void * pixels);\nusing PFNGLGETNTEXIMAGEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);\nusing PFNGLGETNUNIFORMDVPROC = void(KHRONOS_APIENTRY *)(GLuint program, GLint location, GLsizei bufSize, GLdouble * params);\nusing PFNGLGETNMAPDVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v);\nusing PFNGLGETNMAPFVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v);\nusing PFNGLGETNMAPIVPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum query, GLsizei bufSize, GLint * v);\nusing PFNGLGETNPIXELMAPFVPROC = void(KHRONOS_APIENTRY *)(GLenum map, GLsizei bufSize, GLfloat * values);\nusing PFNGLGETNPIXELMAPUIVPROC = void(KHRONOS_APIENTRY *)(GLenum map, GLsizei bufSize, GLuint * values);\nusing PFNGLGETNPIXELMAPUSVPROC = void(KHRONOS_APIENTRY *)(GLenum map, GLsizei bufSize, GLushort * values);\nusing PFNGLGETNPOLYGONSTIPPLEPROC = void(KHRONOS_APIENTRY *)(GLsizei bufSize, GLubyte * pattern);\nusing PFNGLGETNCOLORTABLEPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table);\nusing PFNGLGETNCONVOLUTIONFILTERPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image);\nusing PFNGLGETNSEPARABLEFILTERPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span);\nusing PFNGLGETNHISTOGRAMPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);\nusing PFNGLGETNMINMAXPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values);\nusing PFNGLTEXTUREBARRIERPROC = void(KHRONOS_APIENTRY *)();\n\n// Desktop OpenGL 4.6\n#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551\n#define GL_SPIR_V_BINARY 0x9552\n#define GL_PARAMETER_BUFFER 0x80EE\n#define GL_PARAMETER_BUFFER_BINDING 0x80EF\n#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008\n#define GL_VERTICES_SUBMITTED 0x82EE\n#define GL_PRIMITIVES_SUBMITTED 0x82EF\n#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0\n#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1\n#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2\n#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3\n#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4\n#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5\n#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6\n#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7\n#define GL_POLYGON_OFFSET_CLAMP 0x8E1B\n#define GL_SPIR_V_EXTENSIONS 0x9553\n#define GL_NUM_SPIR_V_EXTENSIONS 0x9554\n#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE\n#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF\n#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC\n#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED\n\nusing PFNGLSPECIALIZESHADERPROC = void(KHRONOS_APIENTRY *)(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue);\nusing PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = void(KHRONOS_APIENTRY *)(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);\nusing PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);\nusing PFNGLPOLYGONOFFSETCLAMPPROC = void(KHRONOS_APIENTRY *)(GLfloat factor, GLfloat units, GLfloat clamp);\n\n// GL_EXT_texture_compression_s3tc\n#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0\n#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1\n#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2\n#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3\n\n\n// GL_EXT_texture_compression_s3tc_srgb\n#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C\n#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D\n#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E\n#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F\n\n\n// GL_OES_EGL_image\n\nusing PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLeglImageOES image);\nusing PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = void(KHRONOS_APIENTRY *)(GLenum target, GLeglImageOES image);\n\n// GL_EXT_texture_format_BGRA8888\n#define GL_BGRA_EXT 0x80E1\n\n\n// GL_APPLE_texture_format_BGRA8888\n#define GL_BGRA8_EXT 0x93A1\n\n\n\n// GL_ANGLE_base_vertex_base_instance\n// See crbug.com/dawn/1715 for why this is embedded\nusing PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEANGLEPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLint first, GLsizei count, GLsizei instanceCount, GLuint baseInstance);\nusing PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEANGLEPROC = void(KHRONOS_APIENTRY *)(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices, GLsizei instanceCount, GLint baseVertex, GLuint baseInstance);\nusing PFNGLMULTIDRAWARRAYSINSTANCEDBASEINSTANCEANGLEPROC = void(KHRONOS_APIENTRY *)(GLenum mode, const GLint * firsts, const GLsizei * counts, const GLsizei * instanceCounts, const GLuint * baseInstances, GLsizei drawcount);\nusing PFNGLMULTIDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEANGLEPROC = void(KHRONOS_APIENTRY *)(GLenum mode, const GLsizei * counts, GLenum type, const GLvoid *const* indices, const GLsizei * instanceCounts, const GLint * baseVertices, const GLuint * baseInstances, GLsizei drawcount);\n\n#undef DAWN_GL_APIENTRY\n"}