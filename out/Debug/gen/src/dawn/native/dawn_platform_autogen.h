
#ifndef DAWNNATIVE_DAWN_PLATFORM_AUTOGEN_H_
#define DAWNNATIVE_DAWN_PLATFORM_AUTOGEN_H_

#include "dawn/webgpu_cpp.h"
#include "dawn/native/Forward.h"

// Use our autogenerated version of the wgpu structures that point to dawn::native object types
// (wgpu::Buffer is dawn::native::BufferBase*)
#include <dawn/native/wgpu_structs_autogen.h>

namespace dawn::native {

    inline const WGPUAdapterProperties* ToAPI(const AdapterProperties* rhs) {
        return reinterpret_cast<const WGPUAdapterProperties*>(rhs);
    }

    inline WGPUAdapterProperties* ToAPI(AdapterProperties* rhs) {
        return reinterpret_cast<WGPUAdapterProperties*>(rhs);
    }

    inline const AdapterProperties* FromAPI(const WGPUAdapterProperties* rhs) {
        return reinterpret_cast<const AdapterProperties*>(rhs);
    }

    inline AdapterProperties* FromAPI(WGPUAdapterProperties* rhs) {
        return reinterpret_cast<AdapterProperties*>(rhs);
    }

    inline const wgpu::AdapterProperties* ToCppAPI(const AdapterProperties* rhs) {
        return reinterpret_cast<const wgpu::AdapterProperties*>(rhs);
    }

    inline wgpu::AdapterProperties* ToCppAPI(AdapterProperties* rhs) {
        return reinterpret_cast<wgpu::AdapterProperties*>(rhs);
    }

    inline const AdapterProperties* FromCppAPI(const wgpu::AdapterProperties* rhs) {
        return reinterpret_cast<const AdapterProperties*>(rhs);
    }

    inline AdapterProperties* FromCppAPI(wgpu::AdapterProperties* rhs) {
        return reinterpret_cast<AdapterProperties*>(rhs);
    }

    inline const WGPUBindGroupEntry* ToAPI(const BindGroupEntry* rhs) {
        return reinterpret_cast<const WGPUBindGroupEntry*>(rhs);
    }

    inline WGPUBindGroupEntry* ToAPI(BindGroupEntry* rhs) {
        return reinterpret_cast<WGPUBindGroupEntry*>(rhs);
    }

    inline const BindGroupEntry* FromAPI(const WGPUBindGroupEntry* rhs) {
        return reinterpret_cast<const BindGroupEntry*>(rhs);
    }

    inline BindGroupEntry* FromAPI(WGPUBindGroupEntry* rhs) {
        return reinterpret_cast<BindGroupEntry*>(rhs);
    }

    inline const wgpu::BindGroupEntry* ToCppAPI(const BindGroupEntry* rhs) {
        return reinterpret_cast<const wgpu::BindGroupEntry*>(rhs);
    }

    inline wgpu::BindGroupEntry* ToCppAPI(BindGroupEntry* rhs) {
        return reinterpret_cast<wgpu::BindGroupEntry*>(rhs);
    }

    inline const BindGroupEntry* FromCppAPI(const wgpu::BindGroupEntry* rhs) {
        return reinterpret_cast<const BindGroupEntry*>(rhs);
    }

    inline BindGroupEntry* FromCppAPI(wgpu::BindGroupEntry* rhs) {
        return reinterpret_cast<BindGroupEntry*>(rhs);
    }

    inline const WGPUBlendComponent* ToAPI(const BlendComponent* rhs) {
        return reinterpret_cast<const WGPUBlendComponent*>(rhs);
    }

    inline WGPUBlendComponent* ToAPI(BlendComponent* rhs) {
        return reinterpret_cast<WGPUBlendComponent*>(rhs);
    }

    inline const BlendComponent* FromAPI(const WGPUBlendComponent* rhs) {
        return reinterpret_cast<const BlendComponent*>(rhs);
    }

    inline BlendComponent* FromAPI(WGPUBlendComponent* rhs) {
        return reinterpret_cast<BlendComponent*>(rhs);
    }

    inline const wgpu::BlendComponent* ToCppAPI(const BlendComponent* rhs) {
        return reinterpret_cast<const wgpu::BlendComponent*>(rhs);
    }

    inline wgpu::BlendComponent* ToCppAPI(BlendComponent* rhs) {
        return reinterpret_cast<wgpu::BlendComponent*>(rhs);
    }

    inline const BlendComponent* FromCppAPI(const wgpu::BlendComponent* rhs) {
        return reinterpret_cast<const BlendComponent*>(rhs);
    }

    inline BlendComponent* FromCppAPI(wgpu::BlendComponent* rhs) {
        return reinterpret_cast<BlendComponent*>(rhs);
    }

    inline const WGPUBufferBindingLayout* ToAPI(const BufferBindingLayout* rhs) {
        return reinterpret_cast<const WGPUBufferBindingLayout*>(rhs);
    }

    inline WGPUBufferBindingLayout* ToAPI(BufferBindingLayout* rhs) {
        return reinterpret_cast<WGPUBufferBindingLayout*>(rhs);
    }

    inline const BufferBindingLayout* FromAPI(const WGPUBufferBindingLayout* rhs) {
        return reinterpret_cast<const BufferBindingLayout*>(rhs);
    }

    inline BufferBindingLayout* FromAPI(WGPUBufferBindingLayout* rhs) {
        return reinterpret_cast<BufferBindingLayout*>(rhs);
    }

    inline const wgpu::BufferBindingLayout* ToCppAPI(const BufferBindingLayout* rhs) {
        return reinterpret_cast<const wgpu::BufferBindingLayout*>(rhs);
    }

    inline wgpu::BufferBindingLayout* ToCppAPI(BufferBindingLayout* rhs) {
        return reinterpret_cast<wgpu::BufferBindingLayout*>(rhs);
    }

    inline const BufferBindingLayout* FromCppAPI(const wgpu::BufferBindingLayout* rhs) {
        return reinterpret_cast<const BufferBindingLayout*>(rhs);
    }

    inline BufferBindingLayout* FromCppAPI(wgpu::BufferBindingLayout* rhs) {
        return reinterpret_cast<BufferBindingLayout*>(rhs);
    }

    inline const WGPUBufferDescriptor* ToAPI(const BufferDescriptor* rhs) {
        return reinterpret_cast<const WGPUBufferDescriptor*>(rhs);
    }

    inline WGPUBufferDescriptor* ToAPI(BufferDescriptor* rhs) {
        return reinterpret_cast<WGPUBufferDescriptor*>(rhs);
    }

    inline const BufferDescriptor* FromAPI(const WGPUBufferDescriptor* rhs) {
        return reinterpret_cast<const BufferDescriptor*>(rhs);
    }

    inline BufferDescriptor* FromAPI(WGPUBufferDescriptor* rhs) {
        return reinterpret_cast<BufferDescriptor*>(rhs);
    }

    inline const wgpu::BufferDescriptor* ToCppAPI(const BufferDescriptor* rhs) {
        return reinterpret_cast<const wgpu::BufferDescriptor*>(rhs);
    }

    inline wgpu::BufferDescriptor* ToCppAPI(BufferDescriptor* rhs) {
        return reinterpret_cast<wgpu::BufferDescriptor*>(rhs);
    }

    inline const BufferDescriptor* FromCppAPI(const wgpu::BufferDescriptor* rhs) {
        return reinterpret_cast<const BufferDescriptor*>(rhs);
    }

    inline BufferDescriptor* FromCppAPI(wgpu::BufferDescriptor* rhs) {
        return reinterpret_cast<BufferDescriptor*>(rhs);
    }

    inline const WGPUColor* ToAPI(const Color* rhs) {
        return reinterpret_cast<const WGPUColor*>(rhs);
    }

    inline WGPUColor* ToAPI(Color* rhs) {
        return reinterpret_cast<WGPUColor*>(rhs);
    }

    inline const Color* FromAPI(const WGPUColor* rhs) {
        return reinterpret_cast<const Color*>(rhs);
    }

    inline Color* FromAPI(WGPUColor* rhs) {
        return reinterpret_cast<Color*>(rhs);
    }

    inline const wgpu::Color* ToCppAPI(const Color* rhs) {
        return reinterpret_cast<const wgpu::Color*>(rhs);
    }

    inline wgpu::Color* ToCppAPI(Color* rhs) {
        return reinterpret_cast<wgpu::Color*>(rhs);
    }

    inline const Color* FromCppAPI(const wgpu::Color* rhs) {
        return reinterpret_cast<const Color*>(rhs);
    }

    inline Color* FromCppAPI(wgpu::Color* rhs) {
        return reinterpret_cast<Color*>(rhs);
    }

    inline const WGPUCommandBufferDescriptor* ToAPI(const CommandBufferDescriptor* rhs) {
        return reinterpret_cast<const WGPUCommandBufferDescriptor*>(rhs);
    }

    inline WGPUCommandBufferDescriptor* ToAPI(CommandBufferDescriptor* rhs) {
        return reinterpret_cast<WGPUCommandBufferDescriptor*>(rhs);
    }

    inline const CommandBufferDescriptor* FromAPI(const WGPUCommandBufferDescriptor* rhs) {
        return reinterpret_cast<const CommandBufferDescriptor*>(rhs);
    }

    inline CommandBufferDescriptor* FromAPI(WGPUCommandBufferDescriptor* rhs) {
        return reinterpret_cast<CommandBufferDescriptor*>(rhs);
    }

    inline const wgpu::CommandBufferDescriptor* ToCppAPI(const CommandBufferDescriptor* rhs) {
        return reinterpret_cast<const wgpu::CommandBufferDescriptor*>(rhs);
    }

    inline wgpu::CommandBufferDescriptor* ToCppAPI(CommandBufferDescriptor* rhs) {
        return reinterpret_cast<wgpu::CommandBufferDescriptor*>(rhs);
    }

    inline const CommandBufferDescriptor* FromCppAPI(const wgpu::CommandBufferDescriptor* rhs) {
        return reinterpret_cast<const CommandBufferDescriptor*>(rhs);
    }

    inline CommandBufferDescriptor* FromCppAPI(wgpu::CommandBufferDescriptor* rhs) {
        return reinterpret_cast<CommandBufferDescriptor*>(rhs);
    }

    inline const WGPUCommandEncoderDescriptor* ToAPI(const CommandEncoderDescriptor* rhs) {
        return reinterpret_cast<const WGPUCommandEncoderDescriptor*>(rhs);
    }

    inline WGPUCommandEncoderDescriptor* ToAPI(CommandEncoderDescriptor* rhs) {
        return reinterpret_cast<WGPUCommandEncoderDescriptor*>(rhs);
    }

    inline const CommandEncoderDescriptor* FromAPI(const WGPUCommandEncoderDescriptor* rhs) {
        return reinterpret_cast<const CommandEncoderDescriptor*>(rhs);
    }

    inline CommandEncoderDescriptor* FromAPI(WGPUCommandEncoderDescriptor* rhs) {
        return reinterpret_cast<CommandEncoderDescriptor*>(rhs);
    }

    inline const wgpu::CommandEncoderDescriptor* ToCppAPI(const CommandEncoderDescriptor* rhs) {
        return reinterpret_cast<const wgpu::CommandEncoderDescriptor*>(rhs);
    }

    inline wgpu::CommandEncoderDescriptor* ToCppAPI(CommandEncoderDescriptor* rhs) {
        return reinterpret_cast<wgpu::CommandEncoderDescriptor*>(rhs);
    }

    inline const CommandEncoderDescriptor* FromCppAPI(const wgpu::CommandEncoderDescriptor* rhs) {
        return reinterpret_cast<const CommandEncoderDescriptor*>(rhs);
    }

    inline CommandEncoderDescriptor* FromCppAPI(wgpu::CommandEncoderDescriptor* rhs) {
        return reinterpret_cast<CommandEncoderDescriptor*>(rhs);
    }

    inline const WGPUCompilationMessage* ToAPI(const CompilationMessage* rhs) {
        return reinterpret_cast<const WGPUCompilationMessage*>(rhs);
    }

    inline WGPUCompilationMessage* ToAPI(CompilationMessage* rhs) {
        return reinterpret_cast<WGPUCompilationMessage*>(rhs);
    }

    inline const CompilationMessage* FromAPI(const WGPUCompilationMessage* rhs) {
        return reinterpret_cast<const CompilationMessage*>(rhs);
    }

    inline CompilationMessage* FromAPI(WGPUCompilationMessage* rhs) {
        return reinterpret_cast<CompilationMessage*>(rhs);
    }

    inline const wgpu::CompilationMessage* ToCppAPI(const CompilationMessage* rhs) {
        return reinterpret_cast<const wgpu::CompilationMessage*>(rhs);
    }

    inline wgpu::CompilationMessage* ToCppAPI(CompilationMessage* rhs) {
        return reinterpret_cast<wgpu::CompilationMessage*>(rhs);
    }

    inline const CompilationMessage* FromCppAPI(const wgpu::CompilationMessage* rhs) {
        return reinterpret_cast<const CompilationMessage*>(rhs);
    }

    inline CompilationMessage* FromCppAPI(wgpu::CompilationMessage* rhs) {
        return reinterpret_cast<CompilationMessage*>(rhs);
    }

    inline const WGPUComputePassTimestampWrite* ToAPI(const ComputePassTimestampWrite* rhs) {
        return reinterpret_cast<const WGPUComputePassTimestampWrite*>(rhs);
    }

    inline WGPUComputePassTimestampWrite* ToAPI(ComputePassTimestampWrite* rhs) {
        return reinterpret_cast<WGPUComputePassTimestampWrite*>(rhs);
    }

    inline const ComputePassTimestampWrite* FromAPI(const WGPUComputePassTimestampWrite* rhs) {
        return reinterpret_cast<const ComputePassTimestampWrite*>(rhs);
    }

    inline ComputePassTimestampWrite* FromAPI(WGPUComputePassTimestampWrite* rhs) {
        return reinterpret_cast<ComputePassTimestampWrite*>(rhs);
    }

    inline const wgpu::ComputePassTimestampWrite* ToCppAPI(const ComputePassTimestampWrite* rhs) {
        return reinterpret_cast<const wgpu::ComputePassTimestampWrite*>(rhs);
    }

    inline wgpu::ComputePassTimestampWrite* ToCppAPI(ComputePassTimestampWrite* rhs) {
        return reinterpret_cast<wgpu::ComputePassTimestampWrite*>(rhs);
    }

    inline const ComputePassTimestampWrite* FromCppAPI(const wgpu::ComputePassTimestampWrite* rhs) {
        return reinterpret_cast<const ComputePassTimestampWrite*>(rhs);
    }

    inline ComputePassTimestampWrite* FromCppAPI(wgpu::ComputePassTimestampWrite* rhs) {
        return reinterpret_cast<ComputePassTimestampWrite*>(rhs);
    }

    inline const WGPUConstantEntry* ToAPI(const ConstantEntry* rhs) {
        return reinterpret_cast<const WGPUConstantEntry*>(rhs);
    }

    inline WGPUConstantEntry* ToAPI(ConstantEntry* rhs) {
        return reinterpret_cast<WGPUConstantEntry*>(rhs);
    }

    inline const ConstantEntry* FromAPI(const WGPUConstantEntry* rhs) {
        return reinterpret_cast<const ConstantEntry*>(rhs);
    }

    inline ConstantEntry* FromAPI(WGPUConstantEntry* rhs) {
        return reinterpret_cast<ConstantEntry*>(rhs);
    }

    inline const wgpu::ConstantEntry* ToCppAPI(const ConstantEntry* rhs) {
        return reinterpret_cast<const wgpu::ConstantEntry*>(rhs);
    }

    inline wgpu::ConstantEntry* ToCppAPI(ConstantEntry* rhs) {
        return reinterpret_cast<wgpu::ConstantEntry*>(rhs);
    }

    inline const ConstantEntry* FromCppAPI(const wgpu::ConstantEntry* rhs) {
        return reinterpret_cast<const ConstantEntry*>(rhs);
    }

    inline ConstantEntry* FromCppAPI(wgpu::ConstantEntry* rhs) {
        return reinterpret_cast<ConstantEntry*>(rhs);
    }

    inline const WGPUCopyTextureForBrowserOptions* ToAPI(const CopyTextureForBrowserOptions* rhs) {
        return reinterpret_cast<const WGPUCopyTextureForBrowserOptions*>(rhs);
    }

    inline WGPUCopyTextureForBrowserOptions* ToAPI(CopyTextureForBrowserOptions* rhs) {
        return reinterpret_cast<WGPUCopyTextureForBrowserOptions*>(rhs);
    }

    inline const CopyTextureForBrowserOptions* FromAPI(const WGPUCopyTextureForBrowserOptions* rhs) {
        return reinterpret_cast<const CopyTextureForBrowserOptions*>(rhs);
    }

    inline CopyTextureForBrowserOptions* FromAPI(WGPUCopyTextureForBrowserOptions* rhs) {
        return reinterpret_cast<CopyTextureForBrowserOptions*>(rhs);
    }

    inline const wgpu::CopyTextureForBrowserOptions* ToCppAPI(const CopyTextureForBrowserOptions* rhs) {
        return reinterpret_cast<const wgpu::CopyTextureForBrowserOptions*>(rhs);
    }

    inline wgpu::CopyTextureForBrowserOptions* ToCppAPI(CopyTextureForBrowserOptions* rhs) {
        return reinterpret_cast<wgpu::CopyTextureForBrowserOptions*>(rhs);
    }

    inline const CopyTextureForBrowserOptions* FromCppAPI(const wgpu::CopyTextureForBrowserOptions* rhs) {
        return reinterpret_cast<const CopyTextureForBrowserOptions*>(rhs);
    }

    inline CopyTextureForBrowserOptions* FromCppAPI(wgpu::CopyTextureForBrowserOptions* rhs) {
        return reinterpret_cast<CopyTextureForBrowserOptions*>(rhs);
    }

    inline const WGPUDawnAdapterPropertiesPowerPreference* ToAPI(const DawnAdapterPropertiesPowerPreference* rhs) {
        return reinterpret_cast<const WGPUDawnAdapterPropertiesPowerPreference*>(rhs);
    }

    inline WGPUDawnAdapterPropertiesPowerPreference* ToAPI(DawnAdapterPropertiesPowerPreference* rhs) {
        return reinterpret_cast<WGPUDawnAdapterPropertiesPowerPreference*>(rhs);
    }

    inline const DawnAdapterPropertiesPowerPreference* FromAPI(const WGPUDawnAdapterPropertiesPowerPreference* rhs) {
        return reinterpret_cast<const DawnAdapterPropertiesPowerPreference*>(rhs);
    }

    inline DawnAdapterPropertiesPowerPreference* FromAPI(WGPUDawnAdapterPropertiesPowerPreference* rhs) {
        return reinterpret_cast<DawnAdapterPropertiesPowerPreference*>(rhs);
    }

    inline const wgpu::DawnAdapterPropertiesPowerPreference* ToCppAPI(const DawnAdapterPropertiesPowerPreference* rhs) {
        return reinterpret_cast<const wgpu::DawnAdapterPropertiesPowerPreference*>(rhs);
    }

    inline wgpu::DawnAdapterPropertiesPowerPreference* ToCppAPI(DawnAdapterPropertiesPowerPreference* rhs) {
        return reinterpret_cast<wgpu::DawnAdapterPropertiesPowerPreference*>(rhs);
    }

    inline const DawnAdapterPropertiesPowerPreference* FromCppAPI(const wgpu::DawnAdapterPropertiesPowerPreference* rhs) {
        return reinterpret_cast<const DawnAdapterPropertiesPowerPreference*>(rhs);
    }

    inline DawnAdapterPropertiesPowerPreference* FromCppAPI(wgpu::DawnAdapterPropertiesPowerPreference* rhs) {
        return reinterpret_cast<DawnAdapterPropertiesPowerPreference*>(rhs);
    }

    inline const WGPUDawnBufferDescriptorErrorInfoFromWireClient* ToAPI(const DawnBufferDescriptorErrorInfoFromWireClient* rhs) {
        return reinterpret_cast<const WGPUDawnBufferDescriptorErrorInfoFromWireClient*>(rhs);
    }

    inline WGPUDawnBufferDescriptorErrorInfoFromWireClient* ToAPI(DawnBufferDescriptorErrorInfoFromWireClient* rhs) {
        return reinterpret_cast<WGPUDawnBufferDescriptorErrorInfoFromWireClient*>(rhs);
    }

    inline const DawnBufferDescriptorErrorInfoFromWireClient* FromAPI(const WGPUDawnBufferDescriptorErrorInfoFromWireClient* rhs) {
        return reinterpret_cast<const DawnBufferDescriptorErrorInfoFromWireClient*>(rhs);
    }

    inline DawnBufferDescriptorErrorInfoFromWireClient* FromAPI(WGPUDawnBufferDescriptorErrorInfoFromWireClient* rhs) {
        return reinterpret_cast<DawnBufferDescriptorErrorInfoFromWireClient*>(rhs);
    }

    inline const wgpu::DawnBufferDescriptorErrorInfoFromWireClient* ToCppAPI(const DawnBufferDescriptorErrorInfoFromWireClient* rhs) {
        return reinterpret_cast<const wgpu::DawnBufferDescriptorErrorInfoFromWireClient*>(rhs);
    }

    inline wgpu::DawnBufferDescriptorErrorInfoFromWireClient* ToCppAPI(DawnBufferDescriptorErrorInfoFromWireClient* rhs) {
        return reinterpret_cast<wgpu::DawnBufferDescriptorErrorInfoFromWireClient*>(rhs);
    }

    inline const DawnBufferDescriptorErrorInfoFromWireClient* FromCppAPI(const wgpu::DawnBufferDescriptorErrorInfoFromWireClient* rhs) {
        return reinterpret_cast<const DawnBufferDescriptorErrorInfoFromWireClient*>(rhs);
    }

    inline DawnBufferDescriptorErrorInfoFromWireClient* FromCppAPI(wgpu::DawnBufferDescriptorErrorInfoFromWireClient* rhs) {
        return reinterpret_cast<DawnBufferDescriptorErrorInfoFromWireClient*>(rhs);
    }

    inline const WGPUDawnCacheDeviceDescriptor* ToAPI(const DawnCacheDeviceDescriptor* rhs) {
        return reinterpret_cast<const WGPUDawnCacheDeviceDescriptor*>(rhs);
    }

    inline WGPUDawnCacheDeviceDescriptor* ToAPI(DawnCacheDeviceDescriptor* rhs) {
        return reinterpret_cast<WGPUDawnCacheDeviceDescriptor*>(rhs);
    }

    inline const DawnCacheDeviceDescriptor* FromAPI(const WGPUDawnCacheDeviceDescriptor* rhs) {
        return reinterpret_cast<const DawnCacheDeviceDescriptor*>(rhs);
    }

    inline DawnCacheDeviceDescriptor* FromAPI(WGPUDawnCacheDeviceDescriptor* rhs) {
        return reinterpret_cast<DawnCacheDeviceDescriptor*>(rhs);
    }

    inline const wgpu::DawnCacheDeviceDescriptor* ToCppAPI(const DawnCacheDeviceDescriptor* rhs) {
        return reinterpret_cast<const wgpu::DawnCacheDeviceDescriptor*>(rhs);
    }

    inline wgpu::DawnCacheDeviceDescriptor* ToCppAPI(DawnCacheDeviceDescriptor* rhs) {
        return reinterpret_cast<wgpu::DawnCacheDeviceDescriptor*>(rhs);
    }

    inline const DawnCacheDeviceDescriptor* FromCppAPI(const wgpu::DawnCacheDeviceDescriptor* rhs) {
        return reinterpret_cast<const DawnCacheDeviceDescriptor*>(rhs);
    }

    inline DawnCacheDeviceDescriptor* FromCppAPI(wgpu::DawnCacheDeviceDescriptor* rhs) {
        return reinterpret_cast<DawnCacheDeviceDescriptor*>(rhs);
    }

    inline const WGPUDawnEncoderInternalUsageDescriptor* ToAPI(const DawnEncoderInternalUsageDescriptor* rhs) {
        return reinterpret_cast<const WGPUDawnEncoderInternalUsageDescriptor*>(rhs);
    }

    inline WGPUDawnEncoderInternalUsageDescriptor* ToAPI(DawnEncoderInternalUsageDescriptor* rhs) {
        return reinterpret_cast<WGPUDawnEncoderInternalUsageDescriptor*>(rhs);
    }

    inline const DawnEncoderInternalUsageDescriptor* FromAPI(const WGPUDawnEncoderInternalUsageDescriptor* rhs) {
        return reinterpret_cast<const DawnEncoderInternalUsageDescriptor*>(rhs);
    }

    inline DawnEncoderInternalUsageDescriptor* FromAPI(WGPUDawnEncoderInternalUsageDescriptor* rhs) {
        return reinterpret_cast<DawnEncoderInternalUsageDescriptor*>(rhs);
    }

    inline const wgpu::DawnEncoderInternalUsageDescriptor* ToCppAPI(const DawnEncoderInternalUsageDescriptor* rhs) {
        return reinterpret_cast<const wgpu::DawnEncoderInternalUsageDescriptor*>(rhs);
    }

    inline wgpu::DawnEncoderInternalUsageDescriptor* ToCppAPI(DawnEncoderInternalUsageDescriptor* rhs) {
        return reinterpret_cast<wgpu::DawnEncoderInternalUsageDescriptor*>(rhs);
    }

    inline const DawnEncoderInternalUsageDescriptor* FromCppAPI(const wgpu::DawnEncoderInternalUsageDescriptor* rhs) {
        return reinterpret_cast<const DawnEncoderInternalUsageDescriptor*>(rhs);
    }

    inline DawnEncoderInternalUsageDescriptor* FromCppAPI(wgpu::DawnEncoderInternalUsageDescriptor* rhs) {
        return reinterpret_cast<DawnEncoderInternalUsageDescriptor*>(rhs);
    }

    inline const WGPUDawnMultisampleStateRenderToSingleSampled* ToAPI(const DawnMultisampleStateRenderToSingleSampled* rhs) {
        return reinterpret_cast<const WGPUDawnMultisampleStateRenderToSingleSampled*>(rhs);
    }

    inline WGPUDawnMultisampleStateRenderToSingleSampled* ToAPI(DawnMultisampleStateRenderToSingleSampled* rhs) {
        return reinterpret_cast<WGPUDawnMultisampleStateRenderToSingleSampled*>(rhs);
    }

    inline const DawnMultisampleStateRenderToSingleSampled* FromAPI(const WGPUDawnMultisampleStateRenderToSingleSampled* rhs) {
        return reinterpret_cast<const DawnMultisampleStateRenderToSingleSampled*>(rhs);
    }

    inline DawnMultisampleStateRenderToSingleSampled* FromAPI(WGPUDawnMultisampleStateRenderToSingleSampled* rhs) {
        return reinterpret_cast<DawnMultisampleStateRenderToSingleSampled*>(rhs);
    }

    inline const wgpu::DawnMultisampleStateRenderToSingleSampled* ToCppAPI(const DawnMultisampleStateRenderToSingleSampled* rhs) {
        return reinterpret_cast<const wgpu::DawnMultisampleStateRenderToSingleSampled*>(rhs);
    }

    inline wgpu::DawnMultisampleStateRenderToSingleSampled* ToCppAPI(DawnMultisampleStateRenderToSingleSampled* rhs) {
        return reinterpret_cast<wgpu::DawnMultisampleStateRenderToSingleSampled*>(rhs);
    }

    inline const DawnMultisampleStateRenderToSingleSampled* FromCppAPI(const wgpu::DawnMultisampleStateRenderToSingleSampled* rhs) {
        return reinterpret_cast<const DawnMultisampleStateRenderToSingleSampled*>(rhs);
    }

    inline DawnMultisampleStateRenderToSingleSampled* FromCppAPI(wgpu::DawnMultisampleStateRenderToSingleSampled* rhs) {
        return reinterpret_cast<DawnMultisampleStateRenderToSingleSampled*>(rhs);
    }

    inline const WGPUDawnRenderPassColorAttachmentRenderToSingleSampled* ToAPI(const DawnRenderPassColorAttachmentRenderToSingleSampled* rhs) {
        return reinterpret_cast<const WGPUDawnRenderPassColorAttachmentRenderToSingleSampled*>(rhs);
    }

    inline WGPUDawnRenderPassColorAttachmentRenderToSingleSampled* ToAPI(DawnRenderPassColorAttachmentRenderToSingleSampled* rhs) {
        return reinterpret_cast<WGPUDawnRenderPassColorAttachmentRenderToSingleSampled*>(rhs);
    }

    inline const DawnRenderPassColorAttachmentRenderToSingleSampled* FromAPI(const WGPUDawnRenderPassColorAttachmentRenderToSingleSampled* rhs) {
        return reinterpret_cast<const DawnRenderPassColorAttachmentRenderToSingleSampled*>(rhs);
    }

    inline DawnRenderPassColorAttachmentRenderToSingleSampled* FromAPI(WGPUDawnRenderPassColorAttachmentRenderToSingleSampled* rhs) {
        return reinterpret_cast<DawnRenderPassColorAttachmentRenderToSingleSampled*>(rhs);
    }

    inline const wgpu::DawnRenderPassColorAttachmentRenderToSingleSampled* ToCppAPI(const DawnRenderPassColorAttachmentRenderToSingleSampled* rhs) {
        return reinterpret_cast<const wgpu::DawnRenderPassColorAttachmentRenderToSingleSampled*>(rhs);
    }

    inline wgpu::DawnRenderPassColorAttachmentRenderToSingleSampled* ToCppAPI(DawnRenderPassColorAttachmentRenderToSingleSampled* rhs) {
        return reinterpret_cast<wgpu::DawnRenderPassColorAttachmentRenderToSingleSampled*>(rhs);
    }

    inline const DawnRenderPassColorAttachmentRenderToSingleSampled* FromCppAPI(const wgpu::DawnRenderPassColorAttachmentRenderToSingleSampled* rhs) {
        return reinterpret_cast<const DawnRenderPassColorAttachmentRenderToSingleSampled*>(rhs);
    }

    inline DawnRenderPassColorAttachmentRenderToSingleSampled* FromCppAPI(wgpu::DawnRenderPassColorAttachmentRenderToSingleSampled* rhs) {
        return reinterpret_cast<DawnRenderPassColorAttachmentRenderToSingleSampled*>(rhs);
    }

    inline const WGPUDawnShaderModuleSPIRVOptionsDescriptor* ToAPI(const DawnShaderModuleSPIRVOptionsDescriptor* rhs) {
        return reinterpret_cast<const WGPUDawnShaderModuleSPIRVOptionsDescriptor*>(rhs);
    }

    inline WGPUDawnShaderModuleSPIRVOptionsDescriptor* ToAPI(DawnShaderModuleSPIRVOptionsDescriptor* rhs) {
        return reinterpret_cast<WGPUDawnShaderModuleSPIRVOptionsDescriptor*>(rhs);
    }

    inline const DawnShaderModuleSPIRVOptionsDescriptor* FromAPI(const WGPUDawnShaderModuleSPIRVOptionsDescriptor* rhs) {
        return reinterpret_cast<const DawnShaderModuleSPIRVOptionsDescriptor*>(rhs);
    }

    inline DawnShaderModuleSPIRVOptionsDescriptor* FromAPI(WGPUDawnShaderModuleSPIRVOptionsDescriptor* rhs) {
        return reinterpret_cast<DawnShaderModuleSPIRVOptionsDescriptor*>(rhs);
    }

    inline const wgpu::DawnShaderModuleSPIRVOptionsDescriptor* ToCppAPI(const DawnShaderModuleSPIRVOptionsDescriptor* rhs) {
        return reinterpret_cast<const wgpu::DawnShaderModuleSPIRVOptionsDescriptor*>(rhs);
    }

    inline wgpu::DawnShaderModuleSPIRVOptionsDescriptor* ToCppAPI(DawnShaderModuleSPIRVOptionsDescriptor* rhs) {
        return reinterpret_cast<wgpu::DawnShaderModuleSPIRVOptionsDescriptor*>(rhs);
    }

    inline const DawnShaderModuleSPIRVOptionsDescriptor* FromCppAPI(const wgpu::DawnShaderModuleSPIRVOptionsDescriptor* rhs) {
        return reinterpret_cast<const DawnShaderModuleSPIRVOptionsDescriptor*>(rhs);
    }

    inline DawnShaderModuleSPIRVOptionsDescriptor* FromCppAPI(wgpu::DawnShaderModuleSPIRVOptionsDescriptor* rhs) {
        return reinterpret_cast<DawnShaderModuleSPIRVOptionsDescriptor*>(rhs);
    }

    inline const WGPUDawnTextureInternalUsageDescriptor* ToAPI(const DawnTextureInternalUsageDescriptor* rhs) {
        return reinterpret_cast<const WGPUDawnTextureInternalUsageDescriptor*>(rhs);
    }

    inline WGPUDawnTextureInternalUsageDescriptor* ToAPI(DawnTextureInternalUsageDescriptor* rhs) {
        return reinterpret_cast<WGPUDawnTextureInternalUsageDescriptor*>(rhs);
    }

    inline const DawnTextureInternalUsageDescriptor* FromAPI(const WGPUDawnTextureInternalUsageDescriptor* rhs) {
        return reinterpret_cast<const DawnTextureInternalUsageDescriptor*>(rhs);
    }

    inline DawnTextureInternalUsageDescriptor* FromAPI(WGPUDawnTextureInternalUsageDescriptor* rhs) {
        return reinterpret_cast<DawnTextureInternalUsageDescriptor*>(rhs);
    }

    inline const wgpu::DawnTextureInternalUsageDescriptor* ToCppAPI(const DawnTextureInternalUsageDescriptor* rhs) {
        return reinterpret_cast<const wgpu::DawnTextureInternalUsageDescriptor*>(rhs);
    }

    inline wgpu::DawnTextureInternalUsageDescriptor* ToCppAPI(DawnTextureInternalUsageDescriptor* rhs) {
        return reinterpret_cast<wgpu::DawnTextureInternalUsageDescriptor*>(rhs);
    }

    inline const DawnTextureInternalUsageDescriptor* FromCppAPI(const wgpu::DawnTextureInternalUsageDescriptor* rhs) {
        return reinterpret_cast<const DawnTextureInternalUsageDescriptor*>(rhs);
    }

    inline DawnTextureInternalUsageDescriptor* FromCppAPI(wgpu::DawnTextureInternalUsageDescriptor* rhs) {
        return reinterpret_cast<DawnTextureInternalUsageDescriptor*>(rhs);
    }

    inline const WGPUDawnTogglesDescriptor* ToAPI(const DawnTogglesDescriptor* rhs) {
        return reinterpret_cast<const WGPUDawnTogglesDescriptor*>(rhs);
    }

    inline WGPUDawnTogglesDescriptor* ToAPI(DawnTogglesDescriptor* rhs) {
        return reinterpret_cast<WGPUDawnTogglesDescriptor*>(rhs);
    }

    inline const DawnTogglesDescriptor* FromAPI(const WGPUDawnTogglesDescriptor* rhs) {
        return reinterpret_cast<const DawnTogglesDescriptor*>(rhs);
    }

    inline DawnTogglesDescriptor* FromAPI(WGPUDawnTogglesDescriptor* rhs) {
        return reinterpret_cast<DawnTogglesDescriptor*>(rhs);
    }

    inline const wgpu::DawnTogglesDescriptor* ToCppAPI(const DawnTogglesDescriptor* rhs) {
        return reinterpret_cast<const wgpu::DawnTogglesDescriptor*>(rhs);
    }

    inline wgpu::DawnTogglesDescriptor* ToCppAPI(DawnTogglesDescriptor* rhs) {
        return reinterpret_cast<wgpu::DawnTogglesDescriptor*>(rhs);
    }

    inline const DawnTogglesDescriptor* FromCppAPI(const wgpu::DawnTogglesDescriptor* rhs) {
        return reinterpret_cast<const DawnTogglesDescriptor*>(rhs);
    }

    inline DawnTogglesDescriptor* FromCppAPI(wgpu::DawnTogglesDescriptor* rhs) {
        return reinterpret_cast<DawnTogglesDescriptor*>(rhs);
    }

    inline const WGPUExtent2D* ToAPI(const Extent2D* rhs) {
        return reinterpret_cast<const WGPUExtent2D*>(rhs);
    }

    inline WGPUExtent2D* ToAPI(Extent2D* rhs) {
        return reinterpret_cast<WGPUExtent2D*>(rhs);
    }

    inline const Extent2D* FromAPI(const WGPUExtent2D* rhs) {
        return reinterpret_cast<const Extent2D*>(rhs);
    }

    inline Extent2D* FromAPI(WGPUExtent2D* rhs) {
        return reinterpret_cast<Extent2D*>(rhs);
    }

    inline const wgpu::Extent2D* ToCppAPI(const Extent2D* rhs) {
        return reinterpret_cast<const wgpu::Extent2D*>(rhs);
    }

    inline wgpu::Extent2D* ToCppAPI(Extent2D* rhs) {
        return reinterpret_cast<wgpu::Extent2D*>(rhs);
    }

    inline const Extent2D* FromCppAPI(const wgpu::Extent2D* rhs) {
        return reinterpret_cast<const Extent2D*>(rhs);
    }

    inline Extent2D* FromCppAPI(wgpu::Extent2D* rhs) {
        return reinterpret_cast<Extent2D*>(rhs);
    }

    inline const WGPUExtent3D* ToAPI(const Extent3D* rhs) {
        return reinterpret_cast<const WGPUExtent3D*>(rhs);
    }

    inline WGPUExtent3D* ToAPI(Extent3D* rhs) {
        return reinterpret_cast<WGPUExtent3D*>(rhs);
    }

    inline const Extent3D* FromAPI(const WGPUExtent3D* rhs) {
        return reinterpret_cast<const Extent3D*>(rhs);
    }

    inline Extent3D* FromAPI(WGPUExtent3D* rhs) {
        return reinterpret_cast<Extent3D*>(rhs);
    }

    inline const wgpu::Extent3D* ToCppAPI(const Extent3D* rhs) {
        return reinterpret_cast<const wgpu::Extent3D*>(rhs);
    }

    inline wgpu::Extent3D* ToCppAPI(Extent3D* rhs) {
        return reinterpret_cast<wgpu::Extent3D*>(rhs);
    }

    inline const Extent3D* FromCppAPI(const wgpu::Extent3D* rhs) {
        return reinterpret_cast<const Extent3D*>(rhs);
    }

    inline Extent3D* FromCppAPI(wgpu::Extent3D* rhs) {
        return reinterpret_cast<Extent3D*>(rhs);
    }

    inline const WGPUExternalTextureBindingEntry* ToAPI(const ExternalTextureBindingEntry* rhs) {
        return reinterpret_cast<const WGPUExternalTextureBindingEntry*>(rhs);
    }

    inline WGPUExternalTextureBindingEntry* ToAPI(ExternalTextureBindingEntry* rhs) {
        return reinterpret_cast<WGPUExternalTextureBindingEntry*>(rhs);
    }

    inline const ExternalTextureBindingEntry* FromAPI(const WGPUExternalTextureBindingEntry* rhs) {
        return reinterpret_cast<const ExternalTextureBindingEntry*>(rhs);
    }

    inline ExternalTextureBindingEntry* FromAPI(WGPUExternalTextureBindingEntry* rhs) {
        return reinterpret_cast<ExternalTextureBindingEntry*>(rhs);
    }

    inline const wgpu::ExternalTextureBindingEntry* ToCppAPI(const ExternalTextureBindingEntry* rhs) {
        return reinterpret_cast<const wgpu::ExternalTextureBindingEntry*>(rhs);
    }

    inline wgpu::ExternalTextureBindingEntry* ToCppAPI(ExternalTextureBindingEntry* rhs) {
        return reinterpret_cast<wgpu::ExternalTextureBindingEntry*>(rhs);
    }

    inline const ExternalTextureBindingEntry* FromCppAPI(const wgpu::ExternalTextureBindingEntry* rhs) {
        return reinterpret_cast<const ExternalTextureBindingEntry*>(rhs);
    }

    inline ExternalTextureBindingEntry* FromCppAPI(wgpu::ExternalTextureBindingEntry* rhs) {
        return reinterpret_cast<ExternalTextureBindingEntry*>(rhs);
    }

    inline const WGPUExternalTextureBindingLayout* ToAPI(const ExternalTextureBindingLayout* rhs) {
        return reinterpret_cast<const WGPUExternalTextureBindingLayout*>(rhs);
    }

    inline WGPUExternalTextureBindingLayout* ToAPI(ExternalTextureBindingLayout* rhs) {
        return reinterpret_cast<WGPUExternalTextureBindingLayout*>(rhs);
    }

    inline const ExternalTextureBindingLayout* FromAPI(const WGPUExternalTextureBindingLayout* rhs) {
        return reinterpret_cast<const ExternalTextureBindingLayout*>(rhs);
    }

    inline ExternalTextureBindingLayout* FromAPI(WGPUExternalTextureBindingLayout* rhs) {
        return reinterpret_cast<ExternalTextureBindingLayout*>(rhs);
    }

    inline const wgpu::ExternalTextureBindingLayout* ToCppAPI(const ExternalTextureBindingLayout* rhs) {
        return reinterpret_cast<const wgpu::ExternalTextureBindingLayout*>(rhs);
    }

    inline wgpu::ExternalTextureBindingLayout* ToCppAPI(ExternalTextureBindingLayout* rhs) {
        return reinterpret_cast<wgpu::ExternalTextureBindingLayout*>(rhs);
    }

    inline const ExternalTextureBindingLayout* FromCppAPI(const wgpu::ExternalTextureBindingLayout* rhs) {
        return reinterpret_cast<const ExternalTextureBindingLayout*>(rhs);
    }

    inline ExternalTextureBindingLayout* FromCppAPI(wgpu::ExternalTextureBindingLayout* rhs) {
        return reinterpret_cast<ExternalTextureBindingLayout*>(rhs);
    }

    inline const WGPUInstanceDescriptor* ToAPI(const InstanceDescriptor* rhs) {
        return reinterpret_cast<const WGPUInstanceDescriptor*>(rhs);
    }

    inline WGPUInstanceDescriptor* ToAPI(InstanceDescriptor* rhs) {
        return reinterpret_cast<WGPUInstanceDescriptor*>(rhs);
    }

    inline const InstanceDescriptor* FromAPI(const WGPUInstanceDescriptor* rhs) {
        return reinterpret_cast<const InstanceDescriptor*>(rhs);
    }

    inline InstanceDescriptor* FromAPI(WGPUInstanceDescriptor* rhs) {
        return reinterpret_cast<InstanceDescriptor*>(rhs);
    }

    inline const wgpu::InstanceDescriptor* ToCppAPI(const InstanceDescriptor* rhs) {
        return reinterpret_cast<const wgpu::InstanceDescriptor*>(rhs);
    }

    inline wgpu::InstanceDescriptor* ToCppAPI(InstanceDescriptor* rhs) {
        return reinterpret_cast<wgpu::InstanceDescriptor*>(rhs);
    }

    inline const InstanceDescriptor* FromCppAPI(const wgpu::InstanceDescriptor* rhs) {
        return reinterpret_cast<const InstanceDescriptor*>(rhs);
    }

    inline InstanceDescriptor* FromCppAPI(wgpu::InstanceDescriptor* rhs) {
        return reinterpret_cast<InstanceDescriptor*>(rhs);
    }

    inline const WGPULimits* ToAPI(const Limits* rhs) {
        return reinterpret_cast<const WGPULimits*>(rhs);
    }

    inline WGPULimits* ToAPI(Limits* rhs) {
        return reinterpret_cast<WGPULimits*>(rhs);
    }

    inline const Limits* FromAPI(const WGPULimits* rhs) {
        return reinterpret_cast<const Limits*>(rhs);
    }

    inline Limits* FromAPI(WGPULimits* rhs) {
        return reinterpret_cast<Limits*>(rhs);
    }

    inline const wgpu::Limits* ToCppAPI(const Limits* rhs) {
        return reinterpret_cast<const wgpu::Limits*>(rhs);
    }

    inline wgpu::Limits* ToCppAPI(Limits* rhs) {
        return reinterpret_cast<wgpu::Limits*>(rhs);
    }

    inline const Limits* FromCppAPI(const wgpu::Limits* rhs) {
        return reinterpret_cast<const Limits*>(rhs);
    }

    inline Limits* FromCppAPI(wgpu::Limits* rhs) {
        return reinterpret_cast<Limits*>(rhs);
    }

    inline const WGPUMultisampleState* ToAPI(const MultisampleState* rhs) {
        return reinterpret_cast<const WGPUMultisampleState*>(rhs);
    }

    inline WGPUMultisampleState* ToAPI(MultisampleState* rhs) {
        return reinterpret_cast<WGPUMultisampleState*>(rhs);
    }

    inline const MultisampleState* FromAPI(const WGPUMultisampleState* rhs) {
        return reinterpret_cast<const MultisampleState*>(rhs);
    }

    inline MultisampleState* FromAPI(WGPUMultisampleState* rhs) {
        return reinterpret_cast<MultisampleState*>(rhs);
    }

    inline const wgpu::MultisampleState* ToCppAPI(const MultisampleState* rhs) {
        return reinterpret_cast<const wgpu::MultisampleState*>(rhs);
    }

    inline wgpu::MultisampleState* ToCppAPI(MultisampleState* rhs) {
        return reinterpret_cast<wgpu::MultisampleState*>(rhs);
    }

    inline const MultisampleState* FromCppAPI(const wgpu::MultisampleState* rhs) {
        return reinterpret_cast<const MultisampleState*>(rhs);
    }

    inline MultisampleState* FromCppAPI(wgpu::MultisampleState* rhs) {
        return reinterpret_cast<MultisampleState*>(rhs);
    }

    inline const WGPUOrigin2D* ToAPI(const Origin2D* rhs) {
        return reinterpret_cast<const WGPUOrigin2D*>(rhs);
    }

    inline WGPUOrigin2D* ToAPI(Origin2D* rhs) {
        return reinterpret_cast<WGPUOrigin2D*>(rhs);
    }

    inline const Origin2D* FromAPI(const WGPUOrigin2D* rhs) {
        return reinterpret_cast<const Origin2D*>(rhs);
    }

    inline Origin2D* FromAPI(WGPUOrigin2D* rhs) {
        return reinterpret_cast<Origin2D*>(rhs);
    }

    inline const wgpu::Origin2D* ToCppAPI(const Origin2D* rhs) {
        return reinterpret_cast<const wgpu::Origin2D*>(rhs);
    }

    inline wgpu::Origin2D* ToCppAPI(Origin2D* rhs) {
        return reinterpret_cast<wgpu::Origin2D*>(rhs);
    }

    inline const Origin2D* FromCppAPI(const wgpu::Origin2D* rhs) {
        return reinterpret_cast<const Origin2D*>(rhs);
    }

    inline Origin2D* FromCppAPI(wgpu::Origin2D* rhs) {
        return reinterpret_cast<Origin2D*>(rhs);
    }

    inline const WGPUOrigin3D* ToAPI(const Origin3D* rhs) {
        return reinterpret_cast<const WGPUOrigin3D*>(rhs);
    }

    inline WGPUOrigin3D* ToAPI(Origin3D* rhs) {
        return reinterpret_cast<WGPUOrigin3D*>(rhs);
    }

    inline const Origin3D* FromAPI(const WGPUOrigin3D* rhs) {
        return reinterpret_cast<const Origin3D*>(rhs);
    }

    inline Origin3D* FromAPI(WGPUOrigin3D* rhs) {
        return reinterpret_cast<Origin3D*>(rhs);
    }

    inline const wgpu::Origin3D* ToCppAPI(const Origin3D* rhs) {
        return reinterpret_cast<const wgpu::Origin3D*>(rhs);
    }

    inline wgpu::Origin3D* ToCppAPI(Origin3D* rhs) {
        return reinterpret_cast<wgpu::Origin3D*>(rhs);
    }

    inline const Origin3D* FromCppAPI(const wgpu::Origin3D* rhs) {
        return reinterpret_cast<const Origin3D*>(rhs);
    }

    inline Origin3D* FromCppAPI(wgpu::Origin3D* rhs) {
        return reinterpret_cast<Origin3D*>(rhs);
    }

    inline const WGPUPipelineLayoutDescriptor* ToAPI(const PipelineLayoutDescriptor* rhs) {
        return reinterpret_cast<const WGPUPipelineLayoutDescriptor*>(rhs);
    }

    inline WGPUPipelineLayoutDescriptor* ToAPI(PipelineLayoutDescriptor* rhs) {
        return reinterpret_cast<WGPUPipelineLayoutDescriptor*>(rhs);
    }

    inline const PipelineLayoutDescriptor* FromAPI(const WGPUPipelineLayoutDescriptor* rhs) {
        return reinterpret_cast<const PipelineLayoutDescriptor*>(rhs);
    }

    inline PipelineLayoutDescriptor* FromAPI(WGPUPipelineLayoutDescriptor* rhs) {
        return reinterpret_cast<PipelineLayoutDescriptor*>(rhs);
    }

    inline const wgpu::PipelineLayoutDescriptor* ToCppAPI(const PipelineLayoutDescriptor* rhs) {
        return reinterpret_cast<const wgpu::PipelineLayoutDescriptor*>(rhs);
    }

    inline wgpu::PipelineLayoutDescriptor* ToCppAPI(PipelineLayoutDescriptor* rhs) {
        return reinterpret_cast<wgpu::PipelineLayoutDescriptor*>(rhs);
    }

    inline const PipelineLayoutDescriptor* FromCppAPI(const wgpu::PipelineLayoutDescriptor* rhs) {
        return reinterpret_cast<const PipelineLayoutDescriptor*>(rhs);
    }

    inline PipelineLayoutDescriptor* FromCppAPI(wgpu::PipelineLayoutDescriptor* rhs) {
        return reinterpret_cast<PipelineLayoutDescriptor*>(rhs);
    }

    inline const WGPUPrimitiveDepthClipControl* ToAPI(const PrimitiveDepthClipControl* rhs) {
        return reinterpret_cast<const WGPUPrimitiveDepthClipControl*>(rhs);
    }

    inline WGPUPrimitiveDepthClipControl* ToAPI(PrimitiveDepthClipControl* rhs) {
        return reinterpret_cast<WGPUPrimitiveDepthClipControl*>(rhs);
    }

    inline const PrimitiveDepthClipControl* FromAPI(const WGPUPrimitiveDepthClipControl* rhs) {
        return reinterpret_cast<const PrimitiveDepthClipControl*>(rhs);
    }

    inline PrimitiveDepthClipControl* FromAPI(WGPUPrimitiveDepthClipControl* rhs) {
        return reinterpret_cast<PrimitiveDepthClipControl*>(rhs);
    }

    inline const wgpu::PrimitiveDepthClipControl* ToCppAPI(const PrimitiveDepthClipControl* rhs) {
        return reinterpret_cast<const wgpu::PrimitiveDepthClipControl*>(rhs);
    }

    inline wgpu::PrimitiveDepthClipControl* ToCppAPI(PrimitiveDepthClipControl* rhs) {
        return reinterpret_cast<wgpu::PrimitiveDepthClipControl*>(rhs);
    }

    inline const PrimitiveDepthClipControl* FromCppAPI(const wgpu::PrimitiveDepthClipControl* rhs) {
        return reinterpret_cast<const PrimitiveDepthClipControl*>(rhs);
    }

    inline PrimitiveDepthClipControl* FromCppAPI(wgpu::PrimitiveDepthClipControl* rhs) {
        return reinterpret_cast<PrimitiveDepthClipControl*>(rhs);
    }

    inline const WGPUPrimitiveState* ToAPI(const PrimitiveState* rhs) {
        return reinterpret_cast<const WGPUPrimitiveState*>(rhs);
    }

    inline WGPUPrimitiveState* ToAPI(PrimitiveState* rhs) {
        return reinterpret_cast<WGPUPrimitiveState*>(rhs);
    }

    inline const PrimitiveState* FromAPI(const WGPUPrimitiveState* rhs) {
        return reinterpret_cast<const PrimitiveState*>(rhs);
    }

    inline PrimitiveState* FromAPI(WGPUPrimitiveState* rhs) {
        return reinterpret_cast<PrimitiveState*>(rhs);
    }

    inline const wgpu::PrimitiveState* ToCppAPI(const PrimitiveState* rhs) {
        return reinterpret_cast<const wgpu::PrimitiveState*>(rhs);
    }

    inline wgpu::PrimitiveState* ToCppAPI(PrimitiveState* rhs) {
        return reinterpret_cast<wgpu::PrimitiveState*>(rhs);
    }

    inline const PrimitiveState* FromCppAPI(const wgpu::PrimitiveState* rhs) {
        return reinterpret_cast<const PrimitiveState*>(rhs);
    }

    inline PrimitiveState* FromCppAPI(wgpu::PrimitiveState* rhs) {
        return reinterpret_cast<PrimitiveState*>(rhs);
    }

    inline const WGPUQuerySetDescriptor* ToAPI(const QuerySetDescriptor* rhs) {
        return reinterpret_cast<const WGPUQuerySetDescriptor*>(rhs);
    }

    inline WGPUQuerySetDescriptor* ToAPI(QuerySetDescriptor* rhs) {
        return reinterpret_cast<WGPUQuerySetDescriptor*>(rhs);
    }

    inline const QuerySetDescriptor* FromAPI(const WGPUQuerySetDescriptor* rhs) {
        return reinterpret_cast<const QuerySetDescriptor*>(rhs);
    }

    inline QuerySetDescriptor* FromAPI(WGPUQuerySetDescriptor* rhs) {
        return reinterpret_cast<QuerySetDescriptor*>(rhs);
    }

    inline const wgpu::QuerySetDescriptor* ToCppAPI(const QuerySetDescriptor* rhs) {
        return reinterpret_cast<const wgpu::QuerySetDescriptor*>(rhs);
    }

    inline wgpu::QuerySetDescriptor* ToCppAPI(QuerySetDescriptor* rhs) {
        return reinterpret_cast<wgpu::QuerySetDescriptor*>(rhs);
    }

    inline const QuerySetDescriptor* FromCppAPI(const wgpu::QuerySetDescriptor* rhs) {
        return reinterpret_cast<const QuerySetDescriptor*>(rhs);
    }

    inline QuerySetDescriptor* FromCppAPI(wgpu::QuerySetDescriptor* rhs) {
        return reinterpret_cast<QuerySetDescriptor*>(rhs);
    }

    inline const WGPUQueueDescriptor* ToAPI(const QueueDescriptor* rhs) {
        return reinterpret_cast<const WGPUQueueDescriptor*>(rhs);
    }

    inline WGPUQueueDescriptor* ToAPI(QueueDescriptor* rhs) {
        return reinterpret_cast<WGPUQueueDescriptor*>(rhs);
    }

    inline const QueueDescriptor* FromAPI(const WGPUQueueDescriptor* rhs) {
        return reinterpret_cast<const QueueDescriptor*>(rhs);
    }

    inline QueueDescriptor* FromAPI(WGPUQueueDescriptor* rhs) {
        return reinterpret_cast<QueueDescriptor*>(rhs);
    }

    inline const wgpu::QueueDescriptor* ToCppAPI(const QueueDescriptor* rhs) {
        return reinterpret_cast<const wgpu::QueueDescriptor*>(rhs);
    }

    inline wgpu::QueueDescriptor* ToCppAPI(QueueDescriptor* rhs) {
        return reinterpret_cast<wgpu::QueueDescriptor*>(rhs);
    }

    inline const QueueDescriptor* FromCppAPI(const wgpu::QueueDescriptor* rhs) {
        return reinterpret_cast<const QueueDescriptor*>(rhs);
    }

    inline QueueDescriptor* FromCppAPI(wgpu::QueueDescriptor* rhs) {
        return reinterpret_cast<QueueDescriptor*>(rhs);
    }

    inline const WGPURenderBundleDescriptor* ToAPI(const RenderBundleDescriptor* rhs) {
        return reinterpret_cast<const WGPURenderBundleDescriptor*>(rhs);
    }

    inline WGPURenderBundleDescriptor* ToAPI(RenderBundleDescriptor* rhs) {
        return reinterpret_cast<WGPURenderBundleDescriptor*>(rhs);
    }

    inline const RenderBundleDescriptor* FromAPI(const WGPURenderBundleDescriptor* rhs) {
        return reinterpret_cast<const RenderBundleDescriptor*>(rhs);
    }

    inline RenderBundleDescriptor* FromAPI(WGPURenderBundleDescriptor* rhs) {
        return reinterpret_cast<RenderBundleDescriptor*>(rhs);
    }

    inline const wgpu::RenderBundleDescriptor* ToCppAPI(const RenderBundleDescriptor* rhs) {
        return reinterpret_cast<const wgpu::RenderBundleDescriptor*>(rhs);
    }

    inline wgpu::RenderBundleDescriptor* ToCppAPI(RenderBundleDescriptor* rhs) {
        return reinterpret_cast<wgpu::RenderBundleDescriptor*>(rhs);
    }

    inline const RenderBundleDescriptor* FromCppAPI(const wgpu::RenderBundleDescriptor* rhs) {
        return reinterpret_cast<const RenderBundleDescriptor*>(rhs);
    }

    inline RenderBundleDescriptor* FromCppAPI(wgpu::RenderBundleDescriptor* rhs) {
        return reinterpret_cast<RenderBundleDescriptor*>(rhs);
    }

    inline const WGPURenderBundleEncoderDescriptor* ToAPI(const RenderBundleEncoderDescriptor* rhs) {
        return reinterpret_cast<const WGPURenderBundleEncoderDescriptor*>(rhs);
    }

    inline WGPURenderBundleEncoderDescriptor* ToAPI(RenderBundleEncoderDescriptor* rhs) {
        return reinterpret_cast<WGPURenderBundleEncoderDescriptor*>(rhs);
    }

    inline const RenderBundleEncoderDescriptor* FromAPI(const WGPURenderBundleEncoderDescriptor* rhs) {
        return reinterpret_cast<const RenderBundleEncoderDescriptor*>(rhs);
    }

    inline RenderBundleEncoderDescriptor* FromAPI(WGPURenderBundleEncoderDescriptor* rhs) {
        return reinterpret_cast<RenderBundleEncoderDescriptor*>(rhs);
    }

    inline const wgpu::RenderBundleEncoderDescriptor* ToCppAPI(const RenderBundleEncoderDescriptor* rhs) {
        return reinterpret_cast<const wgpu::RenderBundleEncoderDescriptor*>(rhs);
    }

    inline wgpu::RenderBundleEncoderDescriptor* ToCppAPI(RenderBundleEncoderDescriptor* rhs) {
        return reinterpret_cast<wgpu::RenderBundleEncoderDescriptor*>(rhs);
    }

    inline const RenderBundleEncoderDescriptor* FromCppAPI(const wgpu::RenderBundleEncoderDescriptor* rhs) {
        return reinterpret_cast<const RenderBundleEncoderDescriptor*>(rhs);
    }

    inline RenderBundleEncoderDescriptor* FromCppAPI(wgpu::RenderBundleEncoderDescriptor* rhs) {
        return reinterpret_cast<RenderBundleEncoderDescriptor*>(rhs);
    }

    inline const WGPURenderPassDepthStencilAttachment* ToAPI(const RenderPassDepthStencilAttachment* rhs) {
        return reinterpret_cast<const WGPURenderPassDepthStencilAttachment*>(rhs);
    }

    inline WGPURenderPassDepthStencilAttachment* ToAPI(RenderPassDepthStencilAttachment* rhs) {
        return reinterpret_cast<WGPURenderPassDepthStencilAttachment*>(rhs);
    }

    inline const RenderPassDepthStencilAttachment* FromAPI(const WGPURenderPassDepthStencilAttachment* rhs) {
        return reinterpret_cast<const RenderPassDepthStencilAttachment*>(rhs);
    }

    inline RenderPassDepthStencilAttachment* FromAPI(WGPURenderPassDepthStencilAttachment* rhs) {
        return reinterpret_cast<RenderPassDepthStencilAttachment*>(rhs);
    }

    inline const wgpu::RenderPassDepthStencilAttachment* ToCppAPI(const RenderPassDepthStencilAttachment* rhs) {
        return reinterpret_cast<const wgpu::RenderPassDepthStencilAttachment*>(rhs);
    }

    inline wgpu::RenderPassDepthStencilAttachment* ToCppAPI(RenderPassDepthStencilAttachment* rhs) {
        return reinterpret_cast<wgpu::RenderPassDepthStencilAttachment*>(rhs);
    }

    inline const RenderPassDepthStencilAttachment* FromCppAPI(const wgpu::RenderPassDepthStencilAttachment* rhs) {
        return reinterpret_cast<const RenderPassDepthStencilAttachment*>(rhs);
    }

    inline RenderPassDepthStencilAttachment* FromCppAPI(wgpu::RenderPassDepthStencilAttachment* rhs) {
        return reinterpret_cast<RenderPassDepthStencilAttachment*>(rhs);
    }

    inline const WGPURenderPassDescriptorMaxDrawCount* ToAPI(const RenderPassDescriptorMaxDrawCount* rhs) {
        return reinterpret_cast<const WGPURenderPassDescriptorMaxDrawCount*>(rhs);
    }

    inline WGPURenderPassDescriptorMaxDrawCount* ToAPI(RenderPassDescriptorMaxDrawCount* rhs) {
        return reinterpret_cast<WGPURenderPassDescriptorMaxDrawCount*>(rhs);
    }

    inline const RenderPassDescriptorMaxDrawCount* FromAPI(const WGPURenderPassDescriptorMaxDrawCount* rhs) {
        return reinterpret_cast<const RenderPassDescriptorMaxDrawCount*>(rhs);
    }

    inline RenderPassDescriptorMaxDrawCount* FromAPI(WGPURenderPassDescriptorMaxDrawCount* rhs) {
        return reinterpret_cast<RenderPassDescriptorMaxDrawCount*>(rhs);
    }

    inline const wgpu::RenderPassDescriptorMaxDrawCount* ToCppAPI(const RenderPassDescriptorMaxDrawCount* rhs) {
        return reinterpret_cast<const wgpu::RenderPassDescriptorMaxDrawCount*>(rhs);
    }

    inline wgpu::RenderPassDescriptorMaxDrawCount* ToCppAPI(RenderPassDescriptorMaxDrawCount* rhs) {
        return reinterpret_cast<wgpu::RenderPassDescriptorMaxDrawCount*>(rhs);
    }

    inline const RenderPassDescriptorMaxDrawCount* FromCppAPI(const wgpu::RenderPassDescriptorMaxDrawCount* rhs) {
        return reinterpret_cast<const RenderPassDescriptorMaxDrawCount*>(rhs);
    }

    inline RenderPassDescriptorMaxDrawCount* FromCppAPI(wgpu::RenderPassDescriptorMaxDrawCount* rhs) {
        return reinterpret_cast<RenderPassDescriptorMaxDrawCount*>(rhs);
    }

    inline const WGPURenderPassTimestampWrite* ToAPI(const RenderPassTimestampWrite* rhs) {
        return reinterpret_cast<const WGPURenderPassTimestampWrite*>(rhs);
    }

    inline WGPURenderPassTimestampWrite* ToAPI(RenderPassTimestampWrite* rhs) {
        return reinterpret_cast<WGPURenderPassTimestampWrite*>(rhs);
    }

    inline const RenderPassTimestampWrite* FromAPI(const WGPURenderPassTimestampWrite* rhs) {
        return reinterpret_cast<const RenderPassTimestampWrite*>(rhs);
    }

    inline RenderPassTimestampWrite* FromAPI(WGPURenderPassTimestampWrite* rhs) {
        return reinterpret_cast<RenderPassTimestampWrite*>(rhs);
    }

    inline const wgpu::RenderPassTimestampWrite* ToCppAPI(const RenderPassTimestampWrite* rhs) {
        return reinterpret_cast<const wgpu::RenderPassTimestampWrite*>(rhs);
    }

    inline wgpu::RenderPassTimestampWrite* ToCppAPI(RenderPassTimestampWrite* rhs) {
        return reinterpret_cast<wgpu::RenderPassTimestampWrite*>(rhs);
    }

    inline const RenderPassTimestampWrite* FromCppAPI(const wgpu::RenderPassTimestampWrite* rhs) {
        return reinterpret_cast<const RenderPassTimestampWrite*>(rhs);
    }

    inline RenderPassTimestampWrite* FromCppAPI(wgpu::RenderPassTimestampWrite* rhs) {
        return reinterpret_cast<RenderPassTimestampWrite*>(rhs);
    }

    inline const WGPURequestAdapterOptions* ToAPI(const RequestAdapterOptions* rhs) {
        return reinterpret_cast<const WGPURequestAdapterOptions*>(rhs);
    }

    inline WGPURequestAdapterOptions* ToAPI(RequestAdapterOptions* rhs) {
        return reinterpret_cast<WGPURequestAdapterOptions*>(rhs);
    }

    inline const RequestAdapterOptions* FromAPI(const WGPURequestAdapterOptions* rhs) {
        return reinterpret_cast<const RequestAdapterOptions*>(rhs);
    }

    inline RequestAdapterOptions* FromAPI(WGPURequestAdapterOptions* rhs) {
        return reinterpret_cast<RequestAdapterOptions*>(rhs);
    }

    inline const wgpu::RequestAdapterOptions* ToCppAPI(const RequestAdapterOptions* rhs) {
        return reinterpret_cast<const wgpu::RequestAdapterOptions*>(rhs);
    }

    inline wgpu::RequestAdapterOptions* ToCppAPI(RequestAdapterOptions* rhs) {
        return reinterpret_cast<wgpu::RequestAdapterOptions*>(rhs);
    }

    inline const RequestAdapterOptions* FromCppAPI(const wgpu::RequestAdapterOptions* rhs) {
        return reinterpret_cast<const RequestAdapterOptions*>(rhs);
    }

    inline RequestAdapterOptions* FromCppAPI(wgpu::RequestAdapterOptions* rhs) {
        return reinterpret_cast<RequestAdapterOptions*>(rhs);
    }

    inline const WGPUSamplerBindingLayout* ToAPI(const SamplerBindingLayout* rhs) {
        return reinterpret_cast<const WGPUSamplerBindingLayout*>(rhs);
    }

    inline WGPUSamplerBindingLayout* ToAPI(SamplerBindingLayout* rhs) {
        return reinterpret_cast<WGPUSamplerBindingLayout*>(rhs);
    }

    inline const SamplerBindingLayout* FromAPI(const WGPUSamplerBindingLayout* rhs) {
        return reinterpret_cast<const SamplerBindingLayout*>(rhs);
    }

    inline SamplerBindingLayout* FromAPI(WGPUSamplerBindingLayout* rhs) {
        return reinterpret_cast<SamplerBindingLayout*>(rhs);
    }

    inline const wgpu::SamplerBindingLayout* ToCppAPI(const SamplerBindingLayout* rhs) {
        return reinterpret_cast<const wgpu::SamplerBindingLayout*>(rhs);
    }

    inline wgpu::SamplerBindingLayout* ToCppAPI(SamplerBindingLayout* rhs) {
        return reinterpret_cast<wgpu::SamplerBindingLayout*>(rhs);
    }

    inline const SamplerBindingLayout* FromCppAPI(const wgpu::SamplerBindingLayout* rhs) {
        return reinterpret_cast<const SamplerBindingLayout*>(rhs);
    }

    inline SamplerBindingLayout* FromCppAPI(wgpu::SamplerBindingLayout* rhs) {
        return reinterpret_cast<SamplerBindingLayout*>(rhs);
    }

    inline const WGPUSamplerDescriptor* ToAPI(const SamplerDescriptor* rhs) {
        return reinterpret_cast<const WGPUSamplerDescriptor*>(rhs);
    }

    inline WGPUSamplerDescriptor* ToAPI(SamplerDescriptor* rhs) {
        return reinterpret_cast<WGPUSamplerDescriptor*>(rhs);
    }

    inline const SamplerDescriptor* FromAPI(const WGPUSamplerDescriptor* rhs) {
        return reinterpret_cast<const SamplerDescriptor*>(rhs);
    }

    inline SamplerDescriptor* FromAPI(WGPUSamplerDescriptor* rhs) {
        return reinterpret_cast<SamplerDescriptor*>(rhs);
    }

    inline const wgpu::SamplerDescriptor* ToCppAPI(const SamplerDescriptor* rhs) {
        return reinterpret_cast<const wgpu::SamplerDescriptor*>(rhs);
    }

    inline wgpu::SamplerDescriptor* ToCppAPI(SamplerDescriptor* rhs) {
        return reinterpret_cast<wgpu::SamplerDescriptor*>(rhs);
    }

    inline const SamplerDescriptor* FromCppAPI(const wgpu::SamplerDescriptor* rhs) {
        return reinterpret_cast<const SamplerDescriptor*>(rhs);
    }

    inline SamplerDescriptor* FromCppAPI(wgpu::SamplerDescriptor* rhs) {
        return reinterpret_cast<SamplerDescriptor*>(rhs);
    }

    inline const WGPUShaderModuleDescriptor* ToAPI(const ShaderModuleDescriptor* rhs) {
        return reinterpret_cast<const WGPUShaderModuleDescriptor*>(rhs);
    }

    inline WGPUShaderModuleDescriptor* ToAPI(ShaderModuleDescriptor* rhs) {
        return reinterpret_cast<WGPUShaderModuleDescriptor*>(rhs);
    }

    inline const ShaderModuleDescriptor* FromAPI(const WGPUShaderModuleDescriptor* rhs) {
        return reinterpret_cast<const ShaderModuleDescriptor*>(rhs);
    }

    inline ShaderModuleDescriptor* FromAPI(WGPUShaderModuleDescriptor* rhs) {
        return reinterpret_cast<ShaderModuleDescriptor*>(rhs);
    }

    inline const wgpu::ShaderModuleDescriptor* ToCppAPI(const ShaderModuleDescriptor* rhs) {
        return reinterpret_cast<const wgpu::ShaderModuleDescriptor*>(rhs);
    }

    inline wgpu::ShaderModuleDescriptor* ToCppAPI(ShaderModuleDescriptor* rhs) {
        return reinterpret_cast<wgpu::ShaderModuleDescriptor*>(rhs);
    }

    inline const ShaderModuleDescriptor* FromCppAPI(const wgpu::ShaderModuleDescriptor* rhs) {
        return reinterpret_cast<const ShaderModuleDescriptor*>(rhs);
    }

    inline ShaderModuleDescriptor* FromCppAPI(wgpu::ShaderModuleDescriptor* rhs) {
        return reinterpret_cast<ShaderModuleDescriptor*>(rhs);
    }

    inline const WGPUShaderModuleSPIRVDescriptor* ToAPI(const ShaderModuleSPIRVDescriptor* rhs) {
        return reinterpret_cast<const WGPUShaderModuleSPIRVDescriptor*>(rhs);
    }

    inline WGPUShaderModuleSPIRVDescriptor* ToAPI(ShaderModuleSPIRVDescriptor* rhs) {
        return reinterpret_cast<WGPUShaderModuleSPIRVDescriptor*>(rhs);
    }

    inline const ShaderModuleSPIRVDescriptor* FromAPI(const WGPUShaderModuleSPIRVDescriptor* rhs) {
        return reinterpret_cast<const ShaderModuleSPIRVDescriptor*>(rhs);
    }

    inline ShaderModuleSPIRVDescriptor* FromAPI(WGPUShaderModuleSPIRVDescriptor* rhs) {
        return reinterpret_cast<ShaderModuleSPIRVDescriptor*>(rhs);
    }

    inline const wgpu::ShaderModuleSPIRVDescriptor* ToCppAPI(const ShaderModuleSPIRVDescriptor* rhs) {
        return reinterpret_cast<const wgpu::ShaderModuleSPIRVDescriptor*>(rhs);
    }

    inline wgpu::ShaderModuleSPIRVDescriptor* ToCppAPI(ShaderModuleSPIRVDescriptor* rhs) {
        return reinterpret_cast<wgpu::ShaderModuleSPIRVDescriptor*>(rhs);
    }

    inline const ShaderModuleSPIRVDescriptor* FromCppAPI(const wgpu::ShaderModuleSPIRVDescriptor* rhs) {
        return reinterpret_cast<const ShaderModuleSPIRVDescriptor*>(rhs);
    }

    inline ShaderModuleSPIRVDescriptor* FromCppAPI(wgpu::ShaderModuleSPIRVDescriptor* rhs) {
        return reinterpret_cast<ShaderModuleSPIRVDescriptor*>(rhs);
    }

    inline const WGPUShaderModuleWGSLDescriptor* ToAPI(const ShaderModuleWGSLDescriptor* rhs) {
        return reinterpret_cast<const WGPUShaderModuleWGSLDescriptor*>(rhs);
    }

    inline WGPUShaderModuleWGSLDescriptor* ToAPI(ShaderModuleWGSLDescriptor* rhs) {
        return reinterpret_cast<WGPUShaderModuleWGSLDescriptor*>(rhs);
    }

    inline const ShaderModuleWGSLDescriptor* FromAPI(const WGPUShaderModuleWGSLDescriptor* rhs) {
        return reinterpret_cast<const ShaderModuleWGSLDescriptor*>(rhs);
    }

    inline ShaderModuleWGSLDescriptor* FromAPI(WGPUShaderModuleWGSLDescriptor* rhs) {
        return reinterpret_cast<ShaderModuleWGSLDescriptor*>(rhs);
    }

    inline const wgpu::ShaderModuleWGSLDescriptor* ToCppAPI(const ShaderModuleWGSLDescriptor* rhs) {
        return reinterpret_cast<const wgpu::ShaderModuleWGSLDescriptor*>(rhs);
    }

    inline wgpu::ShaderModuleWGSLDescriptor* ToCppAPI(ShaderModuleWGSLDescriptor* rhs) {
        return reinterpret_cast<wgpu::ShaderModuleWGSLDescriptor*>(rhs);
    }

    inline const ShaderModuleWGSLDescriptor* FromCppAPI(const wgpu::ShaderModuleWGSLDescriptor* rhs) {
        return reinterpret_cast<const ShaderModuleWGSLDescriptor*>(rhs);
    }

    inline ShaderModuleWGSLDescriptor* FromCppAPI(wgpu::ShaderModuleWGSLDescriptor* rhs) {
        return reinterpret_cast<ShaderModuleWGSLDescriptor*>(rhs);
    }

    inline const WGPUStencilFaceState* ToAPI(const StencilFaceState* rhs) {
        return reinterpret_cast<const WGPUStencilFaceState*>(rhs);
    }

    inline WGPUStencilFaceState* ToAPI(StencilFaceState* rhs) {
        return reinterpret_cast<WGPUStencilFaceState*>(rhs);
    }

    inline const StencilFaceState* FromAPI(const WGPUStencilFaceState* rhs) {
        return reinterpret_cast<const StencilFaceState*>(rhs);
    }

    inline StencilFaceState* FromAPI(WGPUStencilFaceState* rhs) {
        return reinterpret_cast<StencilFaceState*>(rhs);
    }

    inline const wgpu::StencilFaceState* ToCppAPI(const StencilFaceState* rhs) {
        return reinterpret_cast<const wgpu::StencilFaceState*>(rhs);
    }

    inline wgpu::StencilFaceState* ToCppAPI(StencilFaceState* rhs) {
        return reinterpret_cast<wgpu::StencilFaceState*>(rhs);
    }

    inline const StencilFaceState* FromCppAPI(const wgpu::StencilFaceState* rhs) {
        return reinterpret_cast<const StencilFaceState*>(rhs);
    }

    inline StencilFaceState* FromCppAPI(wgpu::StencilFaceState* rhs) {
        return reinterpret_cast<StencilFaceState*>(rhs);
    }

    inline const WGPUStorageTextureBindingLayout* ToAPI(const StorageTextureBindingLayout* rhs) {
        return reinterpret_cast<const WGPUStorageTextureBindingLayout*>(rhs);
    }

    inline WGPUStorageTextureBindingLayout* ToAPI(StorageTextureBindingLayout* rhs) {
        return reinterpret_cast<WGPUStorageTextureBindingLayout*>(rhs);
    }

    inline const StorageTextureBindingLayout* FromAPI(const WGPUStorageTextureBindingLayout* rhs) {
        return reinterpret_cast<const StorageTextureBindingLayout*>(rhs);
    }

    inline StorageTextureBindingLayout* FromAPI(WGPUStorageTextureBindingLayout* rhs) {
        return reinterpret_cast<StorageTextureBindingLayout*>(rhs);
    }

    inline const wgpu::StorageTextureBindingLayout* ToCppAPI(const StorageTextureBindingLayout* rhs) {
        return reinterpret_cast<const wgpu::StorageTextureBindingLayout*>(rhs);
    }

    inline wgpu::StorageTextureBindingLayout* ToCppAPI(StorageTextureBindingLayout* rhs) {
        return reinterpret_cast<wgpu::StorageTextureBindingLayout*>(rhs);
    }

    inline const StorageTextureBindingLayout* FromCppAPI(const wgpu::StorageTextureBindingLayout* rhs) {
        return reinterpret_cast<const StorageTextureBindingLayout*>(rhs);
    }

    inline StorageTextureBindingLayout* FromCppAPI(wgpu::StorageTextureBindingLayout* rhs) {
        return reinterpret_cast<StorageTextureBindingLayout*>(rhs);
    }

    inline const WGPUSurfaceDescriptor* ToAPI(const SurfaceDescriptor* rhs) {
        return reinterpret_cast<const WGPUSurfaceDescriptor*>(rhs);
    }

    inline WGPUSurfaceDescriptor* ToAPI(SurfaceDescriptor* rhs) {
        return reinterpret_cast<WGPUSurfaceDescriptor*>(rhs);
    }

    inline const SurfaceDescriptor* FromAPI(const WGPUSurfaceDescriptor* rhs) {
        return reinterpret_cast<const SurfaceDescriptor*>(rhs);
    }

    inline SurfaceDescriptor* FromAPI(WGPUSurfaceDescriptor* rhs) {
        return reinterpret_cast<SurfaceDescriptor*>(rhs);
    }

    inline const wgpu::SurfaceDescriptor* ToCppAPI(const SurfaceDescriptor* rhs) {
        return reinterpret_cast<const wgpu::SurfaceDescriptor*>(rhs);
    }

    inline wgpu::SurfaceDescriptor* ToCppAPI(SurfaceDescriptor* rhs) {
        return reinterpret_cast<wgpu::SurfaceDescriptor*>(rhs);
    }

    inline const SurfaceDescriptor* FromCppAPI(const wgpu::SurfaceDescriptor* rhs) {
        return reinterpret_cast<const SurfaceDescriptor*>(rhs);
    }

    inline SurfaceDescriptor* FromCppAPI(wgpu::SurfaceDescriptor* rhs) {
        return reinterpret_cast<SurfaceDescriptor*>(rhs);
    }

    inline const WGPUSurfaceDescriptorFromAndroidNativeWindow* ToAPI(const SurfaceDescriptorFromAndroidNativeWindow* rhs) {
        return reinterpret_cast<const WGPUSurfaceDescriptorFromAndroidNativeWindow*>(rhs);
    }

    inline WGPUSurfaceDescriptorFromAndroidNativeWindow* ToAPI(SurfaceDescriptorFromAndroidNativeWindow* rhs) {
        return reinterpret_cast<WGPUSurfaceDescriptorFromAndroidNativeWindow*>(rhs);
    }

    inline const SurfaceDescriptorFromAndroidNativeWindow* FromAPI(const WGPUSurfaceDescriptorFromAndroidNativeWindow* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromAndroidNativeWindow*>(rhs);
    }

    inline SurfaceDescriptorFromAndroidNativeWindow* FromAPI(WGPUSurfaceDescriptorFromAndroidNativeWindow* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromAndroidNativeWindow*>(rhs);
    }

    inline const wgpu::SurfaceDescriptorFromAndroidNativeWindow* ToCppAPI(const SurfaceDescriptorFromAndroidNativeWindow* rhs) {
        return reinterpret_cast<const wgpu::SurfaceDescriptorFromAndroidNativeWindow*>(rhs);
    }

    inline wgpu::SurfaceDescriptorFromAndroidNativeWindow* ToCppAPI(SurfaceDescriptorFromAndroidNativeWindow* rhs) {
        return reinterpret_cast<wgpu::SurfaceDescriptorFromAndroidNativeWindow*>(rhs);
    }

    inline const SurfaceDescriptorFromAndroidNativeWindow* FromCppAPI(const wgpu::SurfaceDescriptorFromAndroidNativeWindow* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromAndroidNativeWindow*>(rhs);
    }

    inline SurfaceDescriptorFromAndroidNativeWindow* FromCppAPI(wgpu::SurfaceDescriptorFromAndroidNativeWindow* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromAndroidNativeWindow*>(rhs);
    }

    inline const WGPUSurfaceDescriptorFromCanvasHTMLSelector* ToAPI(const SurfaceDescriptorFromCanvasHTMLSelector* rhs) {
        return reinterpret_cast<const WGPUSurfaceDescriptorFromCanvasHTMLSelector*>(rhs);
    }

    inline WGPUSurfaceDescriptorFromCanvasHTMLSelector* ToAPI(SurfaceDescriptorFromCanvasHTMLSelector* rhs) {
        return reinterpret_cast<WGPUSurfaceDescriptorFromCanvasHTMLSelector*>(rhs);
    }

    inline const SurfaceDescriptorFromCanvasHTMLSelector* FromAPI(const WGPUSurfaceDescriptorFromCanvasHTMLSelector* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromCanvasHTMLSelector*>(rhs);
    }

    inline SurfaceDescriptorFromCanvasHTMLSelector* FromAPI(WGPUSurfaceDescriptorFromCanvasHTMLSelector* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromCanvasHTMLSelector*>(rhs);
    }

    inline const wgpu::SurfaceDescriptorFromCanvasHTMLSelector* ToCppAPI(const SurfaceDescriptorFromCanvasHTMLSelector* rhs) {
        return reinterpret_cast<const wgpu::SurfaceDescriptorFromCanvasHTMLSelector*>(rhs);
    }

    inline wgpu::SurfaceDescriptorFromCanvasHTMLSelector* ToCppAPI(SurfaceDescriptorFromCanvasHTMLSelector* rhs) {
        return reinterpret_cast<wgpu::SurfaceDescriptorFromCanvasHTMLSelector*>(rhs);
    }

    inline const SurfaceDescriptorFromCanvasHTMLSelector* FromCppAPI(const wgpu::SurfaceDescriptorFromCanvasHTMLSelector* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromCanvasHTMLSelector*>(rhs);
    }

    inline SurfaceDescriptorFromCanvasHTMLSelector* FromCppAPI(wgpu::SurfaceDescriptorFromCanvasHTMLSelector* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromCanvasHTMLSelector*>(rhs);
    }

    inline const WGPUSurfaceDescriptorFromMetalLayer* ToAPI(const SurfaceDescriptorFromMetalLayer* rhs) {
        return reinterpret_cast<const WGPUSurfaceDescriptorFromMetalLayer*>(rhs);
    }

    inline WGPUSurfaceDescriptorFromMetalLayer* ToAPI(SurfaceDescriptorFromMetalLayer* rhs) {
        return reinterpret_cast<WGPUSurfaceDescriptorFromMetalLayer*>(rhs);
    }

    inline const SurfaceDescriptorFromMetalLayer* FromAPI(const WGPUSurfaceDescriptorFromMetalLayer* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromMetalLayer*>(rhs);
    }

    inline SurfaceDescriptorFromMetalLayer* FromAPI(WGPUSurfaceDescriptorFromMetalLayer* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromMetalLayer*>(rhs);
    }

    inline const wgpu::SurfaceDescriptorFromMetalLayer* ToCppAPI(const SurfaceDescriptorFromMetalLayer* rhs) {
        return reinterpret_cast<const wgpu::SurfaceDescriptorFromMetalLayer*>(rhs);
    }

    inline wgpu::SurfaceDescriptorFromMetalLayer* ToCppAPI(SurfaceDescriptorFromMetalLayer* rhs) {
        return reinterpret_cast<wgpu::SurfaceDescriptorFromMetalLayer*>(rhs);
    }

    inline const SurfaceDescriptorFromMetalLayer* FromCppAPI(const wgpu::SurfaceDescriptorFromMetalLayer* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromMetalLayer*>(rhs);
    }

    inline SurfaceDescriptorFromMetalLayer* FromCppAPI(wgpu::SurfaceDescriptorFromMetalLayer* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromMetalLayer*>(rhs);
    }

    inline const WGPUSurfaceDescriptorFromWaylandSurface* ToAPI(const SurfaceDescriptorFromWaylandSurface* rhs) {
        return reinterpret_cast<const WGPUSurfaceDescriptorFromWaylandSurface*>(rhs);
    }

    inline WGPUSurfaceDescriptorFromWaylandSurface* ToAPI(SurfaceDescriptorFromWaylandSurface* rhs) {
        return reinterpret_cast<WGPUSurfaceDescriptorFromWaylandSurface*>(rhs);
    }

    inline const SurfaceDescriptorFromWaylandSurface* FromAPI(const WGPUSurfaceDescriptorFromWaylandSurface* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromWaylandSurface*>(rhs);
    }

    inline SurfaceDescriptorFromWaylandSurface* FromAPI(WGPUSurfaceDescriptorFromWaylandSurface* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromWaylandSurface*>(rhs);
    }

    inline const wgpu::SurfaceDescriptorFromWaylandSurface* ToCppAPI(const SurfaceDescriptorFromWaylandSurface* rhs) {
        return reinterpret_cast<const wgpu::SurfaceDescriptorFromWaylandSurface*>(rhs);
    }

    inline wgpu::SurfaceDescriptorFromWaylandSurface* ToCppAPI(SurfaceDescriptorFromWaylandSurface* rhs) {
        return reinterpret_cast<wgpu::SurfaceDescriptorFromWaylandSurface*>(rhs);
    }

    inline const SurfaceDescriptorFromWaylandSurface* FromCppAPI(const wgpu::SurfaceDescriptorFromWaylandSurface* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromWaylandSurface*>(rhs);
    }

    inline SurfaceDescriptorFromWaylandSurface* FromCppAPI(wgpu::SurfaceDescriptorFromWaylandSurface* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromWaylandSurface*>(rhs);
    }

    inline const WGPUSurfaceDescriptorFromWindowsCoreWindow* ToAPI(const SurfaceDescriptorFromWindowsCoreWindow* rhs) {
        return reinterpret_cast<const WGPUSurfaceDescriptorFromWindowsCoreWindow*>(rhs);
    }

    inline WGPUSurfaceDescriptorFromWindowsCoreWindow* ToAPI(SurfaceDescriptorFromWindowsCoreWindow* rhs) {
        return reinterpret_cast<WGPUSurfaceDescriptorFromWindowsCoreWindow*>(rhs);
    }

    inline const SurfaceDescriptorFromWindowsCoreWindow* FromAPI(const WGPUSurfaceDescriptorFromWindowsCoreWindow* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromWindowsCoreWindow*>(rhs);
    }

    inline SurfaceDescriptorFromWindowsCoreWindow* FromAPI(WGPUSurfaceDescriptorFromWindowsCoreWindow* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromWindowsCoreWindow*>(rhs);
    }

    inline const wgpu::SurfaceDescriptorFromWindowsCoreWindow* ToCppAPI(const SurfaceDescriptorFromWindowsCoreWindow* rhs) {
        return reinterpret_cast<const wgpu::SurfaceDescriptorFromWindowsCoreWindow*>(rhs);
    }

    inline wgpu::SurfaceDescriptorFromWindowsCoreWindow* ToCppAPI(SurfaceDescriptorFromWindowsCoreWindow* rhs) {
        return reinterpret_cast<wgpu::SurfaceDescriptorFromWindowsCoreWindow*>(rhs);
    }

    inline const SurfaceDescriptorFromWindowsCoreWindow* FromCppAPI(const wgpu::SurfaceDescriptorFromWindowsCoreWindow* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromWindowsCoreWindow*>(rhs);
    }

    inline SurfaceDescriptorFromWindowsCoreWindow* FromCppAPI(wgpu::SurfaceDescriptorFromWindowsCoreWindow* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromWindowsCoreWindow*>(rhs);
    }

    inline const WGPUSurfaceDescriptorFromWindowsHWND* ToAPI(const SurfaceDescriptorFromWindowsHWND* rhs) {
        return reinterpret_cast<const WGPUSurfaceDescriptorFromWindowsHWND*>(rhs);
    }

    inline WGPUSurfaceDescriptorFromWindowsHWND* ToAPI(SurfaceDescriptorFromWindowsHWND* rhs) {
        return reinterpret_cast<WGPUSurfaceDescriptorFromWindowsHWND*>(rhs);
    }

    inline const SurfaceDescriptorFromWindowsHWND* FromAPI(const WGPUSurfaceDescriptorFromWindowsHWND* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromWindowsHWND*>(rhs);
    }

    inline SurfaceDescriptorFromWindowsHWND* FromAPI(WGPUSurfaceDescriptorFromWindowsHWND* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromWindowsHWND*>(rhs);
    }

    inline const wgpu::SurfaceDescriptorFromWindowsHWND* ToCppAPI(const SurfaceDescriptorFromWindowsHWND* rhs) {
        return reinterpret_cast<const wgpu::SurfaceDescriptorFromWindowsHWND*>(rhs);
    }

    inline wgpu::SurfaceDescriptorFromWindowsHWND* ToCppAPI(SurfaceDescriptorFromWindowsHWND* rhs) {
        return reinterpret_cast<wgpu::SurfaceDescriptorFromWindowsHWND*>(rhs);
    }

    inline const SurfaceDescriptorFromWindowsHWND* FromCppAPI(const wgpu::SurfaceDescriptorFromWindowsHWND* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromWindowsHWND*>(rhs);
    }

    inline SurfaceDescriptorFromWindowsHWND* FromCppAPI(wgpu::SurfaceDescriptorFromWindowsHWND* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromWindowsHWND*>(rhs);
    }

    inline const WGPUSurfaceDescriptorFromWindowsSwapChainPanel* ToAPI(const SurfaceDescriptorFromWindowsSwapChainPanel* rhs) {
        return reinterpret_cast<const WGPUSurfaceDescriptorFromWindowsSwapChainPanel*>(rhs);
    }

    inline WGPUSurfaceDescriptorFromWindowsSwapChainPanel* ToAPI(SurfaceDescriptorFromWindowsSwapChainPanel* rhs) {
        return reinterpret_cast<WGPUSurfaceDescriptorFromWindowsSwapChainPanel*>(rhs);
    }

    inline const SurfaceDescriptorFromWindowsSwapChainPanel* FromAPI(const WGPUSurfaceDescriptorFromWindowsSwapChainPanel* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromWindowsSwapChainPanel*>(rhs);
    }

    inline SurfaceDescriptorFromWindowsSwapChainPanel* FromAPI(WGPUSurfaceDescriptorFromWindowsSwapChainPanel* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromWindowsSwapChainPanel*>(rhs);
    }

    inline const wgpu::SurfaceDescriptorFromWindowsSwapChainPanel* ToCppAPI(const SurfaceDescriptorFromWindowsSwapChainPanel* rhs) {
        return reinterpret_cast<const wgpu::SurfaceDescriptorFromWindowsSwapChainPanel*>(rhs);
    }

    inline wgpu::SurfaceDescriptorFromWindowsSwapChainPanel* ToCppAPI(SurfaceDescriptorFromWindowsSwapChainPanel* rhs) {
        return reinterpret_cast<wgpu::SurfaceDescriptorFromWindowsSwapChainPanel*>(rhs);
    }

    inline const SurfaceDescriptorFromWindowsSwapChainPanel* FromCppAPI(const wgpu::SurfaceDescriptorFromWindowsSwapChainPanel* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromWindowsSwapChainPanel*>(rhs);
    }

    inline SurfaceDescriptorFromWindowsSwapChainPanel* FromCppAPI(wgpu::SurfaceDescriptorFromWindowsSwapChainPanel* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromWindowsSwapChainPanel*>(rhs);
    }

    inline const WGPUSurfaceDescriptorFromXlibWindow* ToAPI(const SurfaceDescriptorFromXlibWindow* rhs) {
        return reinterpret_cast<const WGPUSurfaceDescriptorFromXlibWindow*>(rhs);
    }

    inline WGPUSurfaceDescriptorFromXlibWindow* ToAPI(SurfaceDescriptorFromXlibWindow* rhs) {
        return reinterpret_cast<WGPUSurfaceDescriptorFromXlibWindow*>(rhs);
    }

    inline const SurfaceDescriptorFromXlibWindow* FromAPI(const WGPUSurfaceDescriptorFromXlibWindow* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromXlibWindow*>(rhs);
    }

    inline SurfaceDescriptorFromXlibWindow* FromAPI(WGPUSurfaceDescriptorFromXlibWindow* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromXlibWindow*>(rhs);
    }

    inline const wgpu::SurfaceDescriptorFromXlibWindow* ToCppAPI(const SurfaceDescriptorFromXlibWindow* rhs) {
        return reinterpret_cast<const wgpu::SurfaceDescriptorFromXlibWindow*>(rhs);
    }

    inline wgpu::SurfaceDescriptorFromXlibWindow* ToCppAPI(SurfaceDescriptorFromXlibWindow* rhs) {
        return reinterpret_cast<wgpu::SurfaceDescriptorFromXlibWindow*>(rhs);
    }

    inline const SurfaceDescriptorFromXlibWindow* FromCppAPI(const wgpu::SurfaceDescriptorFromXlibWindow* rhs) {
        return reinterpret_cast<const SurfaceDescriptorFromXlibWindow*>(rhs);
    }

    inline SurfaceDescriptorFromXlibWindow* FromCppAPI(wgpu::SurfaceDescriptorFromXlibWindow* rhs) {
        return reinterpret_cast<SurfaceDescriptorFromXlibWindow*>(rhs);
    }

    inline const WGPUSwapChainDescriptor* ToAPI(const SwapChainDescriptor* rhs) {
        return reinterpret_cast<const WGPUSwapChainDescriptor*>(rhs);
    }

    inline WGPUSwapChainDescriptor* ToAPI(SwapChainDescriptor* rhs) {
        return reinterpret_cast<WGPUSwapChainDescriptor*>(rhs);
    }

    inline const SwapChainDescriptor* FromAPI(const WGPUSwapChainDescriptor* rhs) {
        return reinterpret_cast<const SwapChainDescriptor*>(rhs);
    }

    inline SwapChainDescriptor* FromAPI(WGPUSwapChainDescriptor* rhs) {
        return reinterpret_cast<SwapChainDescriptor*>(rhs);
    }

    inline const wgpu::SwapChainDescriptor* ToCppAPI(const SwapChainDescriptor* rhs) {
        return reinterpret_cast<const wgpu::SwapChainDescriptor*>(rhs);
    }

    inline wgpu::SwapChainDescriptor* ToCppAPI(SwapChainDescriptor* rhs) {
        return reinterpret_cast<wgpu::SwapChainDescriptor*>(rhs);
    }

    inline const SwapChainDescriptor* FromCppAPI(const wgpu::SwapChainDescriptor* rhs) {
        return reinterpret_cast<const SwapChainDescriptor*>(rhs);
    }

    inline SwapChainDescriptor* FromCppAPI(wgpu::SwapChainDescriptor* rhs) {
        return reinterpret_cast<SwapChainDescriptor*>(rhs);
    }

    inline const WGPUTextureBindingLayout* ToAPI(const TextureBindingLayout* rhs) {
        return reinterpret_cast<const WGPUTextureBindingLayout*>(rhs);
    }

    inline WGPUTextureBindingLayout* ToAPI(TextureBindingLayout* rhs) {
        return reinterpret_cast<WGPUTextureBindingLayout*>(rhs);
    }

    inline const TextureBindingLayout* FromAPI(const WGPUTextureBindingLayout* rhs) {
        return reinterpret_cast<const TextureBindingLayout*>(rhs);
    }

    inline TextureBindingLayout* FromAPI(WGPUTextureBindingLayout* rhs) {
        return reinterpret_cast<TextureBindingLayout*>(rhs);
    }

    inline const wgpu::TextureBindingLayout* ToCppAPI(const TextureBindingLayout* rhs) {
        return reinterpret_cast<const wgpu::TextureBindingLayout*>(rhs);
    }

    inline wgpu::TextureBindingLayout* ToCppAPI(TextureBindingLayout* rhs) {
        return reinterpret_cast<wgpu::TextureBindingLayout*>(rhs);
    }

    inline const TextureBindingLayout* FromCppAPI(const wgpu::TextureBindingLayout* rhs) {
        return reinterpret_cast<const TextureBindingLayout*>(rhs);
    }

    inline TextureBindingLayout* FromCppAPI(wgpu::TextureBindingLayout* rhs) {
        return reinterpret_cast<TextureBindingLayout*>(rhs);
    }

    inline const WGPUTextureDataLayout* ToAPI(const TextureDataLayout* rhs) {
        return reinterpret_cast<const WGPUTextureDataLayout*>(rhs);
    }

    inline WGPUTextureDataLayout* ToAPI(TextureDataLayout* rhs) {
        return reinterpret_cast<WGPUTextureDataLayout*>(rhs);
    }

    inline const TextureDataLayout* FromAPI(const WGPUTextureDataLayout* rhs) {
        return reinterpret_cast<const TextureDataLayout*>(rhs);
    }

    inline TextureDataLayout* FromAPI(WGPUTextureDataLayout* rhs) {
        return reinterpret_cast<TextureDataLayout*>(rhs);
    }

    inline const wgpu::TextureDataLayout* ToCppAPI(const TextureDataLayout* rhs) {
        return reinterpret_cast<const wgpu::TextureDataLayout*>(rhs);
    }

    inline wgpu::TextureDataLayout* ToCppAPI(TextureDataLayout* rhs) {
        return reinterpret_cast<wgpu::TextureDataLayout*>(rhs);
    }

    inline const TextureDataLayout* FromCppAPI(const wgpu::TextureDataLayout* rhs) {
        return reinterpret_cast<const TextureDataLayout*>(rhs);
    }

    inline TextureDataLayout* FromCppAPI(wgpu::TextureDataLayout* rhs) {
        return reinterpret_cast<TextureDataLayout*>(rhs);
    }

    inline const WGPUTextureViewDescriptor* ToAPI(const TextureViewDescriptor* rhs) {
        return reinterpret_cast<const WGPUTextureViewDescriptor*>(rhs);
    }

    inline WGPUTextureViewDescriptor* ToAPI(TextureViewDescriptor* rhs) {
        return reinterpret_cast<WGPUTextureViewDescriptor*>(rhs);
    }

    inline const TextureViewDescriptor* FromAPI(const WGPUTextureViewDescriptor* rhs) {
        return reinterpret_cast<const TextureViewDescriptor*>(rhs);
    }

    inline TextureViewDescriptor* FromAPI(WGPUTextureViewDescriptor* rhs) {
        return reinterpret_cast<TextureViewDescriptor*>(rhs);
    }

    inline const wgpu::TextureViewDescriptor* ToCppAPI(const TextureViewDescriptor* rhs) {
        return reinterpret_cast<const wgpu::TextureViewDescriptor*>(rhs);
    }

    inline wgpu::TextureViewDescriptor* ToCppAPI(TextureViewDescriptor* rhs) {
        return reinterpret_cast<wgpu::TextureViewDescriptor*>(rhs);
    }

    inline const TextureViewDescriptor* FromCppAPI(const wgpu::TextureViewDescriptor* rhs) {
        return reinterpret_cast<const TextureViewDescriptor*>(rhs);
    }

    inline TextureViewDescriptor* FromCppAPI(wgpu::TextureViewDescriptor* rhs) {
        return reinterpret_cast<TextureViewDescriptor*>(rhs);
    }

    inline const WGPUVertexAttribute* ToAPI(const VertexAttribute* rhs) {
        return reinterpret_cast<const WGPUVertexAttribute*>(rhs);
    }

    inline WGPUVertexAttribute* ToAPI(VertexAttribute* rhs) {
        return reinterpret_cast<WGPUVertexAttribute*>(rhs);
    }

    inline const VertexAttribute* FromAPI(const WGPUVertexAttribute* rhs) {
        return reinterpret_cast<const VertexAttribute*>(rhs);
    }

    inline VertexAttribute* FromAPI(WGPUVertexAttribute* rhs) {
        return reinterpret_cast<VertexAttribute*>(rhs);
    }

    inline const wgpu::VertexAttribute* ToCppAPI(const VertexAttribute* rhs) {
        return reinterpret_cast<const wgpu::VertexAttribute*>(rhs);
    }

    inline wgpu::VertexAttribute* ToCppAPI(VertexAttribute* rhs) {
        return reinterpret_cast<wgpu::VertexAttribute*>(rhs);
    }

    inline const VertexAttribute* FromCppAPI(const wgpu::VertexAttribute* rhs) {
        return reinterpret_cast<const VertexAttribute*>(rhs);
    }

    inline VertexAttribute* FromCppAPI(wgpu::VertexAttribute* rhs) {
        return reinterpret_cast<VertexAttribute*>(rhs);
    }

    inline const WGPUBindGroupDescriptor* ToAPI(const BindGroupDescriptor* rhs) {
        return reinterpret_cast<const WGPUBindGroupDescriptor*>(rhs);
    }

    inline WGPUBindGroupDescriptor* ToAPI(BindGroupDescriptor* rhs) {
        return reinterpret_cast<WGPUBindGroupDescriptor*>(rhs);
    }

    inline const BindGroupDescriptor* FromAPI(const WGPUBindGroupDescriptor* rhs) {
        return reinterpret_cast<const BindGroupDescriptor*>(rhs);
    }

    inline BindGroupDescriptor* FromAPI(WGPUBindGroupDescriptor* rhs) {
        return reinterpret_cast<BindGroupDescriptor*>(rhs);
    }

    inline const wgpu::BindGroupDescriptor* ToCppAPI(const BindGroupDescriptor* rhs) {
        return reinterpret_cast<const wgpu::BindGroupDescriptor*>(rhs);
    }

    inline wgpu::BindGroupDescriptor* ToCppAPI(BindGroupDescriptor* rhs) {
        return reinterpret_cast<wgpu::BindGroupDescriptor*>(rhs);
    }

    inline const BindGroupDescriptor* FromCppAPI(const wgpu::BindGroupDescriptor* rhs) {
        return reinterpret_cast<const BindGroupDescriptor*>(rhs);
    }

    inline BindGroupDescriptor* FromCppAPI(wgpu::BindGroupDescriptor* rhs) {
        return reinterpret_cast<BindGroupDescriptor*>(rhs);
    }

    inline const WGPUBindGroupLayoutEntry* ToAPI(const BindGroupLayoutEntry* rhs) {
        return reinterpret_cast<const WGPUBindGroupLayoutEntry*>(rhs);
    }

    inline WGPUBindGroupLayoutEntry* ToAPI(BindGroupLayoutEntry* rhs) {
        return reinterpret_cast<WGPUBindGroupLayoutEntry*>(rhs);
    }

    inline const BindGroupLayoutEntry* FromAPI(const WGPUBindGroupLayoutEntry* rhs) {
        return reinterpret_cast<const BindGroupLayoutEntry*>(rhs);
    }

    inline BindGroupLayoutEntry* FromAPI(WGPUBindGroupLayoutEntry* rhs) {
        return reinterpret_cast<BindGroupLayoutEntry*>(rhs);
    }

    inline const wgpu::BindGroupLayoutEntry* ToCppAPI(const BindGroupLayoutEntry* rhs) {
        return reinterpret_cast<const wgpu::BindGroupLayoutEntry*>(rhs);
    }

    inline wgpu::BindGroupLayoutEntry* ToCppAPI(BindGroupLayoutEntry* rhs) {
        return reinterpret_cast<wgpu::BindGroupLayoutEntry*>(rhs);
    }

    inline const BindGroupLayoutEntry* FromCppAPI(const wgpu::BindGroupLayoutEntry* rhs) {
        return reinterpret_cast<const BindGroupLayoutEntry*>(rhs);
    }

    inline BindGroupLayoutEntry* FromCppAPI(wgpu::BindGroupLayoutEntry* rhs) {
        return reinterpret_cast<BindGroupLayoutEntry*>(rhs);
    }

    inline const WGPUBlendState* ToAPI(const BlendState* rhs) {
        return reinterpret_cast<const WGPUBlendState*>(rhs);
    }

    inline WGPUBlendState* ToAPI(BlendState* rhs) {
        return reinterpret_cast<WGPUBlendState*>(rhs);
    }

    inline const BlendState* FromAPI(const WGPUBlendState* rhs) {
        return reinterpret_cast<const BlendState*>(rhs);
    }

    inline BlendState* FromAPI(WGPUBlendState* rhs) {
        return reinterpret_cast<BlendState*>(rhs);
    }

    inline const wgpu::BlendState* ToCppAPI(const BlendState* rhs) {
        return reinterpret_cast<const wgpu::BlendState*>(rhs);
    }

    inline wgpu::BlendState* ToCppAPI(BlendState* rhs) {
        return reinterpret_cast<wgpu::BlendState*>(rhs);
    }

    inline const BlendState* FromCppAPI(const wgpu::BlendState* rhs) {
        return reinterpret_cast<const BlendState*>(rhs);
    }

    inline BlendState* FromCppAPI(wgpu::BlendState* rhs) {
        return reinterpret_cast<BlendState*>(rhs);
    }

    inline const WGPUCompilationInfo* ToAPI(const CompilationInfo* rhs) {
        return reinterpret_cast<const WGPUCompilationInfo*>(rhs);
    }

    inline WGPUCompilationInfo* ToAPI(CompilationInfo* rhs) {
        return reinterpret_cast<WGPUCompilationInfo*>(rhs);
    }

    inline const CompilationInfo* FromAPI(const WGPUCompilationInfo* rhs) {
        return reinterpret_cast<const CompilationInfo*>(rhs);
    }

    inline CompilationInfo* FromAPI(WGPUCompilationInfo* rhs) {
        return reinterpret_cast<CompilationInfo*>(rhs);
    }

    inline const wgpu::CompilationInfo* ToCppAPI(const CompilationInfo* rhs) {
        return reinterpret_cast<const wgpu::CompilationInfo*>(rhs);
    }

    inline wgpu::CompilationInfo* ToCppAPI(CompilationInfo* rhs) {
        return reinterpret_cast<wgpu::CompilationInfo*>(rhs);
    }

    inline const CompilationInfo* FromCppAPI(const wgpu::CompilationInfo* rhs) {
        return reinterpret_cast<const CompilationInfo*>(rhs);
    }

    inline CompilationInfo* FromCppAPI(wgpu::CompilationInfo* rhs) {
        return reinterpret_cast<CompilationInfo*>(rhs);
    }

    inline const WGPUComputePassDescriptor* ToAPI(const ComputePassDescriptor* rhs) {
        return reinterpret_cast<const WGPUComputePassDescriptor*>(rhs);
    }

    inline WGPUComputePassDescriptor* ToAPI(ComputePassDescriptor* rhs) {
        return reinterpret_cast<WGPUComputePassDescriptor*>(rhs);
    }

    inline const ComputePassDescriptor* FromAPI(const WGPUComputePassDescriptor* rhs) {
        return reinterpret_cast<const ComputePassDescriptor*>(rhs);
    }

    inline ComputePassDescriptor* FromAPI(WGPUComputePassDescriptor* rhs) {
        return reinterpret_cast<ComputePassDescriptor*>(rhs);
    }

    inline const wgpu::ComputePassDescriptor* ToCppAPI(const ComputePassDescriptor* rhs) {
        return reinterpret_cast<const wgpu::ComputePassDescriptor*>(rhs);
    }

    inline wgpu::ComputePassDescriptor* ToCppAPI(ComputePassDescriptor* rhs) {
        return reinterpret_cast<wgpu::ComputePassDescriptor*>(rhs);
    }

    inline const ComputePassDescriptor* FromCppAPI(const wgpu::ComputePassDescriptor* rhs) {
        return reinterpret_cast<const ComputePassDescriptor*>(rhs);
    }

    inline ComputePassDescriptor* FromCppAPI(wgpu::ComputePassDescriptor* rhs) {
        return reinterpret_cast<ComputePassDescriptor*>(rhs);
    }

    inline const WGPUDepthStencilState* ToAPI(const DepthStencilState* rhs) {
        return reinterpret_cast<const WGPUDepthStencilState*>(rhs);
    }

    inline WGPUDepthStencilState* ToAPI(DepthStencilState* rhs) {
        return reinterpret_cast<WGPUDepthStencilState*>(rhs);
    }

    inline const DepthStencilState* FromAPI(const WGPUDepthStencilState* rhs) {
        return reinterpret_cast<const DepthStencilState*>(rhs);
    }

    inline DepthStencilState* FromAPI(WGPUDepthStencilState* rhs) {
        return reinterpret_cast<DepthStencilState*>(rhs);
    }

    inline const wgpu::DepthStencilState* ToCppAPI(const DepthStencilState* rhs) {
        return reinterpret_cast<const wgpu::DepthStencilState*>(rhs);
    }

    inline wgpu::DepthStencilState* ToCppAPI(DepthStencilState* rhs) {
        return reinterpret_cast<wgpu::DepthStencilState*>(rhs);
    }

    inline const DepthStencilState* FromCppAPI(const wgpu::DepthStencilState* rhs) {
        return reinterpret_cast<const DepthStencilState*>(rhs);
    }

    inline DepthStencilState* FromCppAPI(wgpu::DepthStencilState* rhs) {
        return reinterpret_cast<DepthStencilState*>(rhs);
    }

    inline const WGPUExternalTextureDescriptor* ToAPI(const ExternalTextureDescriptor* rhs) {
        return reinterpret_cast<const WGPUExternalTextureDescriptor*>(rhs);
    }

    inline WGPUExternalTextureDescriptor* ToAPI(ExternalTextureDescriptor* rhs) {
        return reinterpret_cast<WGPUExternalTextureDescriptor*>(rhs);
    }

    inline const ExternalTextureDescriptor* FromAPI(const WGPUExternalTextureDescriptor* rhs) {
        return reinterpret_cast<const ExternalTextureDescriptor*>(rhs);
    }

    inline ExternalTextureDescriptor* FromAPI(WGPUExternalTextureDescriptor* rhs) {
        return reinterpret_cast<ExternalTextureDescriptor*>(rhs);
    }

    inline const wgpu::ExternalTextureDescriptor* ToCppAPI(const ExternalTextureDescriptor* rhs) {
        return reinterpret_cast<const wgpu::ExternalTextureDescriptor*>(rhs);
    }

    inline wgpu::ExternalTextureDescriptor* ToCppAPI(ExternalTextureDescriptor* rhs) {
        return reinterpret_cast<wgpu::ExternalTextureDescriptor*>(rhs);
    }

    inline const ExternalTextureDescriptor* FromCppAPI(const wgpu::ExternalTextureDescriptor* rhs) {
        return reinterpret_cast<const ExternalTextureDescriptor*>(rhs);
    }

    inline ExternalTextureDescriptor* FromCppAPI(wgpu::ExternalTextureDescriptor* rhs) {
        return reinterpret_cast<ExternalTextureDescriptor*>(rhs);
    }

    inline const WGPUImageCopyBuffer* ToAPI(const ImageCopyBuffer* rhs) {
        return reinterpret_cast<const WGPUImageCopyBuffer*>(rhs);
    }

    inline WGPUImageCopyBuffer* ToAPI(ImageCopyBuffer* rhs) {
        return reinterpret_cast<WGPUImageCopyBuffer*>(rhs);
    }

    inline const ImageCopyBuffer* FromAPI(const WGPUImageCopyBuffer* rhs) {
        return reinterpret_cast<const ImageCopyBuffer*>(rhs);
    }

    inline ImageCopyBuffer* FromAPI(WGPUImageCopyBuffer* rhs) {
        return reinterpret_cast<ImageCopyBuffer*>(rhs);
    }

    inline const wgpu::ImageCopyBuffer* ToCppAPI(const ImageCopyBuffer* rhs) {
        return reinterpret_cast<const wgpu::ImageCopyBuffer*>(rhs);
    }

    inline wgpu::ImageCopyBuffer* ToCppAPI(ImageCopyBuffer* rhs) {
        return reinterpret_cast<wgpu::ImageCopyBuffer*>(rhs);
    }

    inline const ImageCopyBuffer* FromCppAPI(const wgpu::ImageCopyBuffer* rhs) {
        return reinterpret_cast<const ImageCopyBuffer*>(rhs);
    }

    inline ImageCopyBuffer* FromCppAPI(wgpu::ImageCopyBuffer* rhs) {
        return reinterpret_cast<ImageCopyBuffer*>(rhs);
    }

    inline const WGPUImageCopyExternalTexture* ToAPI(const ImageCopyExternalTexture* rhs) {
        return reinterpret_cast<const WGPUImageCopyExternalTexture*>(rhs);
    }

    inline WGPUImageCopyExternalTexture* ToAPI(ImageCopyExternalTexture* rhs) {
        return reinterpret_cast<WGPUImageCopyExternalTexture*>(rhs);
    }

    inline const ImageCopyExternalTexture* FromAPI(const WGPUImageCopyExternalTexture* rhs) {
        return reinterpret_cast<const ImageCopyExternalTexture*>(rhs);
    }

    inline ImageCopyExternalTexture* FromAPI(WGPUImageCopyExternalTexture* rhs) {
        return reinterpret_cast<ImageCopyExternalTexture*>(rhs);
    }

    inline const wgpu::ImageCopyExternalTexture* ToCppAPI(const ImageCopyExternalTexture* rhs) {
        return reinterpret_cast<const wgpu::ImageCopyExternalTexture*>(rhs);
    }

    inline wgpu::ImageCopyExternalTexture* ToCppAPI(ImageCopyExternalTexture* rhs) {
        return reinterpret_cast<wgpu::ImageCopyExternalTexture*>(rhs);
    }

    inline const ImageCopyExternalTexture* FromCppAPI(const wgpu::ImageCopyExternalTexture* rhs) {
        return reinterpret_cast<const ImageCopyExternalTexture*>(rhs);
    }

    inline ImageCopyExternalTexture* FromCppAPI(wgpu::ImageCopyExternalTexture* rhs) {
        return reinterpret_cast<ImageCopyExternalTexture*>(rhs);
    }

    inline const WGPUImageCopyTexture* ToAPI(const ImageCopyTexture* rhs) {
        return reinterpret_cast<const WGPUImageCopyTexture*>(rhs);
    }

    inline WGPUImageCopyTexture* ToAPI(ImageCopyTexture* rhs) {
        return reinterpret_cast<WGPUImageCopyTexture*>(rhs);
    }

    inline const ImageCopyTexture* FromAPI(const WGPUImageCopyTexture* rhs) {
        return reinterpret_cast<const ImageCopyTexture*>(rhs);
    }

    inline ImageCopyTexture* FromAPI(WGPUImageCopyTexture* rhs) {
        return reinterpret_cast<ImageCopyTexture*>(rhs);
    }

    inline const wgpu::ImageCopyTexture* ToCppAPI(const ImageCopyTexture* rhs) {
        return reinterpret_cast<const wgpu::ImageCopyTexture*>(rhs);
    }

    inline wgpu::ImageCopyTexture* ToCppAPI(ImageCopyTexture* rhs) {
        return reinterpret_cast<wgpu::ImageCopyTexture*>(rhs);
    }

    inline const ImageCopyTexture* FromCppAPI(const wgpu::ImageCopyTexture* rhs) {
        return reinterpret_cast<const ImageCopyTexture*>(rhs);
    }

    inline ImageCopyTexture* FromCppAPI(wgpu::ImageCopyTexture* rhs) {
        return reinterpret_cast<ImageCopyTexture*>(rhs);
    }

    inline const WGPUProgrammableStageDescriptor* ToAPI(const ProgrammableStageDescriptor* rhs) {
        return reinterpret_cast<const WGPUProgrammableStageDescriptor*>(rhs);
    }

    inline WGPUProgrammableStageDescriptor* ToAPI(ProgrammableStageDescriptor* rhs) {
        return reinterpret_cast<WGPUProgrammableStageDescriptor*>(rhs);
    }

    inline const ProgrammableStageDescriptor* FromAPI(const WGPUProgrammableStageDescriptor* rhs) {
        return reinterpret_cast<const ProgrammableStageDescriptor*>(rhs);
    }

    inline ProgrammableStageDescriptor* FromAPI(WGPUProgrammableStageDescriptor* rhs) {
        return reinterpret_cast<ProgrammableStageDescriptor*>(rhs);
    }

    inline const wgpu::ProgrammableStageDescriptor* ToCppAPI(const ProgrammableStageDescriptor* rhs) {
        return reinterpret_cast<const wgpu::ProgrammableStageDescriptor*>(rhs);
    }

    inline wgpu::ProgrammableStageDescriptor* ToCppAPI(ProgrammableStageDescriptor* rhs) {
        return reinterpret_cast<wgpu::ProgrammableStageDescriptor*>(rhs);
    }

    inline const ProgrammableStageDescriptor* FromCppAPI(const wgpu::ProgrammableStageDescriptor* rhs) {
        return reinterpret_cast<const ProgrammableStageDescriptor*>(rhs);
    }

    inline ProgrammableStageDescriptor* FromCppAPI(wgpu::ProgrammableStageDescriptor* rhs) {
        return reinterpret_cast<ProgrammableStageDescriptor*>(rhs);
    }

    inline const WGPURenderPassColorAttachment* ToAPI(const RenderPassColorAttachment* rhs) {
        return reinterpret_cast<const WGPURenderPassColorAttachment*>(rhs);
    }

    inline WGPURenderPassColorAttachment* ToAPI(RenderPassColorAttachment* rhs) {
        return reinterpret_cast<WGPURenderPassColorAttachment*>(rhs);
    }

    inline const RenderPassColorAttachment* FromAPI(const WGPURenderPassColorAttachment* rhs) {
        return reinterpret_cast<const RenderPassColorAttachment*>(rhs);
    }

    inline RenderPassColorAttachment* FromAPI(WGPURenderPassColorAttachment* rhs) {
        return reinterpret_cast<RenderPassColorAttachment*>(rhs);
    }

    inline const wgpu::RenderPassColorAttachment* ToCppAPI(const RenderPassColorAttachment* rhs) {
        return reinterpret_cast<const wgpu::RenderPassColorAttachment*>(rhs);
    }

    inline wgpu::RenderPassColorAttachment* ToCppAPI(RenderPassColorAttachment* rhs) {
        return reinterpret_cast<wgpu::RenderPassColorAttachment*>(rhs);
    }

    inline const RenderPassColorAttachment* FromCppAPI(const wgpu::RenderPassColorAttachment* rhs) {
        return reinterpret_cast<const RenderPassColorAttachment*>(rhs);
    }

    inline RenderPassColorAttachment* FromCppAPI(wgpu::RenderPassColorAttachment* rhs) {
        return reinterpret_cast<RenderPassColorAttachment*>(rhs);
    }

    inline const WGPURequiredLimits* ToAPI(const RequiredLimits* rhs) {
        return reinterpret_cast<const WGPURequiredLimits*>(rhs);
    }

    inline WGPURequiredLimits* ToAPI(RequiredLimits* rhs) {
        return reinterpret_cast<WGPURequiredLimits*>(rhs);
    }

    inline const RequiredLimits* FromAPI(const WGPURequiredLimits* rhs) {
        return reinterpret_cast<const RequiredLimits*>(rhs);
    }

    inline RequiredLimits* FromAPI(WGPURequiredLimits* rhs) {
        return reinterpret_cast<RequiredLimits*>(rhs);
    }

    inline const wgpu::RequiredLimits* ToCppAPI(const RequiredLimits* rhs) {
        return reinterpret_cast<const wgpu::RequiredLimits*>(rhs);
    }

    inline wgpu::RequiredLimits* ToCppAPI(RequiredLimits* rhs) {
        return reinterpret_cast<wgpu::RequiredLimits*>(rhs);
    }

    inline const RequiredLimits* FromCppAPI(const wgpu::RequiredLimits* rhs) {
        return reinterpret_cast<const RequiredLimits*>(rhs);
    }

    inline RequiredLimits* FromCppAPI(wgpu::RequiredLimits* rhs) {
        return reinterpret_cast<RequiredLimits*>(rhs);
    }

    inline const WGPUSupportedLimits* ToAPI(const SupportedLimits* rhs) {
        return reinterpret_cast<const WGPUSupportedLimits*>(rhs);
    }

    inline WGPUSupportedLimits* ToAPI(SupportedLimits* rhs) {
        return reinterpret_cast<WGPUSupportedLimits*>(rhs);
    }

    inline const SupportedLimits* FromAPI(const WGPUSupportedLimits* rhs) {
        return reinterpret_cast<const SupportedLimits*>(rhs);
    }

    inline SupportedLimits* FromAPI(WGPUSupportedLimits* rhs) {
        return reinterpret_cast<SupportedLimits*>(rhs);
    }

    inline const wgpu::SupportedLimits* ToCppAPI(const SupportedLimits* rhs) {
        return reinterpret_cast<const wgpu::SupportedLimits*>(rhs);
    }

    inline wgpu::SupportedLimits* ToCppAPI(SupportedLimits* rhs) {
        return reinterpret_cast<wgpu::SupportedLimits*>(rhs);
    }

    inline const SupportedLimits* FromCppAPI(const wgpu::SupportedLimits* rhs) {
        return reinterpret_cast<const SupportedLimits*>(rhs);
    }

    inline SupportedLimits* FromCppAPI(wgpu::SupportedLimits* rhs) {
        return reinterpret_cast<SupportedLimits*>(rhs);
    }

    inline const WGPUTextureDescriptor* ToAPI(const TextureDescriptor* rhs) {
        return reinterpret_cast<const WGPUTextureDescriptor*>(rhs);
    }

    inline WGPUTextureDescriptor* ToAPI(TextureDescriptor* rhs) {
        return reinterpret_cast<WGPUTextureDescriptor*>(rhs);
    }

    inline const TextureDescriptor* FromAPI(const WGPUTextureDescriptor* rhs) {
        return reinterpret_cast<const TextureDescriptor*>(rhs);
    }

    inline TextureDescriptor* FromAPI(WGPUTextureDescriptor* rhs) {
        return reinterpret_cast<TextureDescriptor*>(rhs);
    }

    inline const wgpu::TextureDescriptor* ToCppAPI(const TextureDescriptor* rhs) {
        return reinterpret_cast<const wgpu::TextureDescriptor*>(rhs);
    }

    inline wgpu::TextureDescriptor* ToCppAPI(TextureDescriptor* rhs) {
        return reinterpret_cast<wgpu::TextureDescriptor*>(rhs);
    }

    inline const TextureDescriptor* FromCppAPI(const wgpu::TextureDescriptor* rhs) {
        return reinterpret_cast<const TextureDescriptor*>(rhs);
    }

    inline TextureDescriptor* FromCppAPI(wgpu::TextureDescriptor* rhs) {
        return reinterpret_cast<TextureDescriptor*>(rhs);
    }

    inline const WGPUVertexBufferLayout* ToAPI(const VertexBufferLayout* rhs) {
        return reinterpret_cast<const WGPUVertexBufferLayout*>(rhs);
    }

    inline WGPUVertexBufferLayout* ToAPI(VertexBufferLayout* rhs) {
        return reinterpret_cast<WGPUVertexBufferLayout*>(rhs);
    }

    inline const VertexBufferLayout* FromAPI(const WGPUVertexBufferLayout* rhs) {
        return reinterpret_cast<const VertexBufferLayout*>(rhs);
    }

    inline VertexBufferLayout* FromAPI(WGPUVertexBufferLayout* rhs) {
        return reinterpret_cast<VertexBufferLayout*>(rhs);
    }

    inline const wgpu::VertexBufferLayout* ToCppAPI(const VertexBufferLayout* rhs) {
        return reinterpret_cast<const wgpu::VertexBufferLayout*>(rhs);
    }

    inline wgpu::VertexBufferLayout* ToCppAPI(VertexBufferLayout* rhs) {
        return reinterpret_cast<wgpu::VertexBufferLayout*>(rhs);
    }

    inline const VertexBufferLayout* FromCppAPI(const wgpu::VertexBufferLayout* rhs) {
        return reinterpret_cast<const VertexBufferLayout*>(rhs);
    }

    inline VertexBufferLayout* FromCppAPI(wgpu::VertexBufferLayout* rhs) {
        return reinterpret_cast<VertexBufferLayout*>(rhs);
    }

    inline const WGPUBindGroupLayoutDescriptor* ToAPI(const BindGroupLayoutDescriptor* rhs) {
        return reinterpret_cast<const WGPUBindGroupLayoutDescriptor*>(rhs);
    }

    inline WGPUBindGroupLayoutDescriptor* ToAPI(BindGroupLayoutDescriptor* rhs) {
        return reinterpret_cast<WGPUBindGroupLayoutDescriptor*>(rhs);
    }

    inline const BindGroupLayoutDescriptor* FromAPI(const WGPUBindGroupLayoutDescriptor* rhs) {
        return reinterpret_cast<const BindGroupLayoutDescriptor*>(rhs);
    }

    inline BindGroupLayoutDescriptor* FromAPI(WGPUBindGroupLayoutDescriptor* rhs) {
        return reinterpret_cast<BindGroupLayoutDescriptor*>(rhs);
    }

    inline const wgpu::BindGroupLayoutDescriptor* ToCppAPI(const BindGroupLayoutDescriptor* rhs) {
        return reinterpret_cast<const wgpu::BindGroupLayoutDescriptor*>(rhs);
    }

    inline wgpu::BindGroupLayoutDescriptor* ToCppAPI(BindGroupLayoutDescriptor* rhs) {
        return reinterpret_cast<wgpu::BindGroupLayoutDescriptor*>(rhs);
    }

    inline const BindGroupLayoutDescriptor* FromCppAPI(const wgpu::BindGroupLayoutDescriptor* rhs) {
        return reinterpret_cast<const BindGroupLayoutDescriptor*>(rhs);
    }

    inline BindGroupLayoutDescriptor* FromCppAPI(wgpu::BindGroupLayoutDescriptor* rhs) {
        return reinterpret_cast<BindGroupLayoutDescriptor*>(rhs);
    }

    inline const WGPUColorTargetState* ToAPI(const ColorTargetState* rhs) {
        return reinterpret_cast<const WGPUColorTargetState*>(rhs);
    }

    inline WGPUColorTargetState* ToAPI(ColorTargetState* rhs) {
        return reinterpret_cast<WGPUColorTargetState*>(rhs);
    }

    inline const ColorTargetState* FromAPI(const WGPUColorTargetState* rhs) {
        return reinterpret_cast<const ColorTargetState*>(rhs);
    }

    inline ColorTargetState* FromAPI(WGPUColorTargetState* rhs) {
        return reinterpret_cast<ColorTargetState*>(rhs);
    }

    inline const wgpu::ColorTargetState* ToCppAPI(const ColorTargetState* rhs) {
        return reinterpret_cast<const wgpu::ColorTargetState*>(rhs);
    }

    inline wgpu::ColorTargetState* ToCppAPI(ColorTargetState* rhs) {
        return reinterpret_cast<wgpu::ColorTargetState*>(rhs);
    }

    inline const ColorTargetState* FromCppAPI(const wgpu::ColorTargetState* rhs) {
        return reinterpret_cast<const ColorTargetState*>(rhs);
    }

    inline ColorTargetState* FromCppAPI(wgpu::ColorTargetState* rhs) {
        return reinterpret_cast<ColorTargetState*>(rhs);
    }

    inline const WGPUComputePipelineDescriptor* ToAPI(const ComputePipelineDescriptor* rhs) {
        return reinterpret_cast<const WGPUComputePipelineDescriptor*>(rhs);
    }

    inline WGPUComputePipelineDescriptor* ToAPI(ComputePipelineDescriptor* rhs) {
        return reinterpret_cast<WGPUComputePipelineDescriptor*>(rhs);
    }

    inline const ComputePipelineDescriptor* FromAPI(const WGPUComputePipelineDescriptor* rhs) {
        return reinterpret_cast<const ComputePipelineDescriptor*>(rhs);
    }

    inline ComputePipelineDescriptor* FromAPI(WGPUComputePipelineDescriptor* rhs) {
        return reinterpret_cast<ComputePipelineDescriptor*>(rhs);
    }

    inline const wgpu::ComputePipelineDescriptor* ToCppAPI(const ComputePipelineDescriptor* rhs) {
        return reinterpret_cast<const wgpu::ComputePipelineDescriptor*>(rhs);
    }

    inline wgpu::ComputePipelineDescriptor* ToCppAPI(ComputePipelineDescriptor* rhs) {
        return reinterpret_cast<wgpu::ComputePipelineDescriptor*>(rhs);
    }

    inline const ComputePipelineDescriptor* FromCppAPI(const wgpu::ComputePipelineDescriptor* rhs) {
        return reinterpret_cast<const ComputePipelineDescriptor*>(rhs);
    }

    inline ComputePipelineDescriptor* FromCppAPI(wgpu::ComputePipelineDescriptor* rhs) {
        return reinterpret_cast<ComputePipelineDescriptor*>(rhs);
    }

    inline const WGPUDeviceDescriptor* ToAPI(const DeviceDescriptor* rhs) {
        return reinterpret_cast<const WGPUDeviceDescriptor*>(rhs);
    }

    inline WGPUDeviceDescriptor* ToAPI(DeviceDescriptor* rhs) {
        return reinterpret_cast<WGPUDeviceDescriptor*>(rhs);
    }

    inline const DeviceDescriptor* FromAPI(const WGPUDeviceDescriptor* rhs) {
        return reinterpret_cast<const DeviceDescriptor*>(rhs);
    }

    inline DeviceDescriptor* FromAPI(WGPUDeviceDescriptor* rhs) {
        return reinterpret_cast<DeviceDescriptor*>(rhs);
    }

    inline const wgpu::DeviceDescriptor* ToCppAPI(const DeviceDescriptor* rhs) {
        return reinterpret_cast<const wgpu::DeviceDescriptor*>(rhs);
    }

    inline wgpu::DeviceDescriptor* ToCppAPI(DeviceDescriptor* rhs) {
        return reinterpret_cast<wgpu::DeviceDescriptor*>(rhs);
    }

    inline const DeviceDescriptor* FromCppAPI(const wgpu::DeviceDescriptor* rhs) {
        return reinterpret_cast<const DeviceDescriptor*>(rhs);
    }

    inline DeviceDescriptor* FromCppAPI(wgpu::DeviceDescriptor* rhs) {
        return reinterpret_cast<DeviceDescriptor*>(rhs);
    }

    inline const WGPURenderPassDescriptor* ToAPI(const RenderPassDescriptor* rhs) {
        return reinterpret_cast<const WGPURenderPassDescriptor*>(rhs);
    }

    inline WGPURenderPassDescriptor* ToAPI(RenderPassDescriptor* rhs) {
        return reinterpret_cast<WGPURenderPassDescriptor*>(rhs);
    }

    inline const RenderPassDescriptor* FromAPI(const WGPURenderPassDescriptor* rhs) {
        return reinterpret_cast<const RenderPassDescriptor*>(rhs);
    }

    inline RenderPassDescriptor* FromAPI(WGPURenderPassDescriptor* rhs) {
        return reinterpret_cast<RenderPassDescriptor*>(rhs);
    }

    inline const wgpu::RenderPassDescriptor* ToCppAPI(const RenderPassDescriptor* rhs) {
        return reinterpret_cast<const wgpu::RenderPassDescriptor*>(rhs);
    }

    inline wgpu::RenderPassDescriptor* ToCppAPI(RenderPassDescriptor* rhs) {
        return reinterpret_cast<wgpu::RenderPassDescriptor*>(rhs);
    }

    inline const RenderPassDescriptor* FromCppAPI(const wgpu::RenderPassDescriptor* rhs) {
        return reinterpret_cast<const RenderPassDescriptor*>(rhs);
    }

    inline RenderPassDescriptor* FromCppAPI(wgpu::RenderPassDescriptor* rhs) {
        return reinterpret_cast<RenderPassDescriptor*>(rhs);
    }

    inline const WGPUVertexState* ToAPI(const VertexState* rhs) {
        return reinterpret_cast<const WGPUVertexState*>(rhs);
    }

    inline WGPUVertexState* ToAPI(VertexState* rhs) {
        return reinterpret_cast<WGPUVertexState*>(rhs);
    }

    inline const VertexState* FromAPI(const WGPUVertexState* rhs) {
        return reinterpret_cast<const VertexState*>(rhs);
    }

    inline VertexState* FromAPI(WGPUVertexState* rhs) {
        return reinterpret_cast<VertexState*>(rhs);
    }

    inline const wgpu::VertexState* ToCppAPI(const VertexState* rhs) {
        return reinterpret_cast<const wgpu::VertexState*>(rhs);
    }

    inline wgpu::VertexState* ToCppAPI(VertexState* rhs) {
        return reinterpret_cast<wgpu::VertexState*>(rhs);
    }

    inline const VertexState* FromCppAPI(const wgpu::VertexState* rhs) {
        return reinterpret_cast<const VertexState*>(rhs);
    }

    inline VertexState* FromCppAPI(wgpu::VertexState* rhs) {
        return reinterpret_cast<VertexState*>(rhs);
    }

    inline const WGPUFragmentState* ToAPI(const FragmentState* rhs) {
        return reinterpret_cast<const WGPUFragmentState*>(rhs);
    }

    inline WGPUFragmentState* ToAPI(FragmentState* rhs) {
        return reinterpret_cast<WGPUFragmentState*>(rhs);
    }

    inline const FragmentState* FromAPI(const WGPUFragmentState* rhs) {
        return reinterpret_cast<const FragmentState*>(rhs);
    }

    inline FragmentState* FromAPI(WGPUFragmentState* rhs) {
        return reinterpret_cast<FragmentState*>(rhs);
    }

    inline const wgpu::FragmentState* ToCppAPI(const FragmentState* rhs) {
        return reinterpret_cast<const wgpu::FragmentState*>(rhs);
    }

    inline wgpu::FragmentState* ToCppAPI(FragmentState* rhs) {
        return reinterpret_cast<wgpu::FragmentState*>(rhs);
    }

    inline const FragmentState* FromCppAPI(const wgpu::FragmentState* rhs) {
        return reinterpret_cast<const FragmentState*>(rhs);
    }

    inline FragmentState* FromCppAPI(wgpu::FragmentState* rhs) {
        return reinterpret_cast<FragmentState*>(rhs);
    }

    inline const WGPURenderPipelineDescriptor* ToAPI(const RenderPipelineDescriptor* rhs) {
        return reinterpret_cast<const WGPURenderPipelineDescriptor*>(rhs);
    }

    inline WGPURenderPipelineDescriptor* ToAPI(RenderPipelineDescriptor* rhs) {
        return reinterpret_cast<WGPURenderPipelineDescriptor*>(rhs);
    }

    inline const RenderPipelineDescriptor* FromAPI(const WGPURenderPipelineDescriptor* rhs) {
        return reinterpret_cast<const RenderPipelineDescriptor*>(rhs);
    }

    inline RenderPipelineDescriptor* FromAPI(WGPURenderPipelineDescriptor* rhs) {
        return reinterpret_cast<RenderPipelineDescriptor*>(rhs);
    }

    inline const wgpu::RenderPipelineDescriptor* ToCppAPI(const RenderPipelineDescriptor* rhs) {
        return reinterpret_cast<const wgpu::RenderPipelineDescriptor*>(rhs);
    }

    inline wgpu::RenderPipelineDescriptor* ToCppAPI(RenderPipelineDescriptor* rhs) {
        return reinterpret_cast<wgpu::RenderPipelineDescriptor*>(rhs);
    }

    inline const RenderPipelineDescriptor* FromCppAPI(const wgpu::RenderPipelineDescriptor* rhs) {
        return reinterpret_cast<const RenderPipelineDescriptor*>(rhs);
    }

    inline RenderPipelineDescriptor* FromCppAPI(wgpu::RenderPipelineDescriptor* rhs) {
        return reinterpret_cast<RenderPipelineDescriptor*>(rhs);
    }


    inline const WGPUAdapterImpl* ToAPI(const AdapterBase* rhs) {
        return reinterpret_cast<const WGPUAdapterImpl*>(rhs);
    }

    inline WGPUAdapterImpl* ToAPI(AdapterBase* rhs) {
        return reinterpret_cast<WGPUAdapterImpl*>(rhs);
    }

    inline const AdapterBase* FromAPI(const WGPUAdapterImpl* rhs) {
        return reinterpret_cast<const AdapterBase*>(rhs);
    }

    inline AdapterBase* FromAPI(WGPUAdapterImpl* rhs) {
        return reinterpret_cast<AdapterBase*>(rhs);
    }
    inline const WGPUBindGroupImpl* ToAPI(const BindGroupBase* rhs) {
        return reinterpret_cast<const WGPUBindGroupImpl*>(rhs);
    }

    inline WGPUBindGroupImpl* ToAPI(BindGroupBase* rhs) {
        return reinterpret_cast<WGPUBindGroupImpl*>(rhs);
    }

    inline const BindGroupBase* FromAPI(const WGPUBindGroupImpl* rhs) {
        return reinterpret_cast<const BindGroupBase*>(rhs);
    }

    inline BindGroupBase* FromAPI(WGPUBindGroupImpl* rhs) {
        return reinterpret_cast<BindGroupBase*>(rhs);
    }
    inline const WGPUBindGroupLayoutImpl* ToAPI(const BindGroupLayoutBase* rhs) {
        return reinterpret_cast<const WGPUBindGroupLayoutImpl*>(rhs);
    }

    inline WGPUBindGroupLayoutImpl* ToAPI(BindGroupLayoutBase* rhs) {
        return reinterpret_cast<WGPUBindGroupLayoutImpl*>(rhs);
    }

    inline const BindGroupLayoutBase* FromAPI(const WGPUBindGroupLayoutImpl* rhs) {
        return reinterpret_cast<const BindGroupLayoutBase*>(rhs);
    }

    inline BindGroupLayoutBase* FromAPI(WGPUBindGroupLayoutImpl* rhs) {
        return reinterpret_cast<BindGroupLayoutBase*>(rhs);
    }
    inline const WGPUBufferImpl* ToAPI(const BufferBase* rhs) {
        return reinterpret_cast<const WGPUBufferImpl*>(rhs);
    }

    inline WGPUBufferImpl* ToAPI(BufferBase* rhs) {
        return reinterpret_cast<WGPUBufferImpl*>(rhs);
    }

    inline const BufferBase* FromAPI(const WGPUBufferImpl* rhs) {
        return reinterpret_cast<const BufferBase*>(rhs);
    }

    inline BufferBase* FromAPI(WGPUBufferImpl* rhs) {
        return reinterpret_cast<BufferBase*>(rhs);
    }
    inline const WGPUCommandBufferImpl* ToAPI(const CommandBufferBase* rhs) {
        return reinterpret_cast<const WGPUCommandBufferImpl*>(rhs);
    }

    inline WGPUCommandBufferImpl* ToAPI(CommandBufferBase* rhs) {
        return reinterpret_cast<WGPUCommandBufferImpl*>(rhs);
    }

    inline const CommandBufferBase* FromAPI(const WGPUCommandBufferImpl* rhs) {
        return reinterpret_cast<const CommandBufferBase*>(rhs);
    }

    inline CommandBufferBase* FromAPI(WGPUCommandBufferImpl* rhs) {
        return reinterpret_cast<CommandBufferBase*>(rhs);
    }
    inline const WGPUCommandEncoderImpl* ToAPI(const CommandEncoderBase* rhs) {
        return reinterpret_cast<const WGPUCommandEncoderImpl*>(rhs);
    }

    inline WGPUCommandEncoderImpl* ToAPI(CommandEncoderBase* rhs) {
        return reinterpret_cast<WGPUCommandEncoderImpl*>(rhs);
    }

    inline const CommandEncoderBase* FromAPI(const WGPUCommandEncoderImpl* rhs) {
        return reinterpret_cast<const CommandEncoderBase*>(rhs);
    }

    inline CommandEncoderBase* FromAPI(WGPUCommandEncoderImpl* rhs) {
        return reinterpret_cast<CommandEncoderBase*>(rhs);
    }
    inline const WGPUComputePassEncoderImpl* ToAPI(const ComputePassEncoderBase* rhs) {
        return reinterpret_cast<const WGPUComputePassEncoderImpl*>(rhs);
    }

    inline WGPUComputePassEncoderImpl* ToAPI(ComputePassEncoderBase* rhs) {
        return reinterpret_cast<WGPUComputePassEncoderImpl*>(rhs);
    }

    inline const ComputePassEncoderBase* FromAPI(const WGPUComputePassEncoderImpl* rhs) {
        return reinterpret_cast<const ComputePassEncoderBase*>(rhs);
    }

    inline ComputePassEncoderBase* FromAPI(WGPUComputePassEncoderImpl* rhs) {
        return reinterpret_cast<ComputePassEncoderBase*>(rhs);
    }
    inline const WGPUComputePipelineImpl* ToAPI(const ComputePipelineBase* rhs) {
        return reinterpret_cast<const WGPUComputePipelineImpl*>(rhs);
    }

    inline WGPUComputePipelineImpl* ToAPI(ComputePipelineBase* rhs) {
        return reinterpret_cast<WGPUComputePipelineImpl*>(rhs);
    }

    inline const ComputePipelineBase* FromAPI(const WGPUComputePipelineImpl* rhs) {
        return reinterpret_cast<const ComputePipelineBase*>(rhs);
    }

    inline ComputePipelineBase* FromAPI(WGPUComputePipelineImpl* rhs) {
        return reinterpret_cast<ComputePipelineBase*>(rhs);
    }
    inline const WGPUDeviceImpl* ToAPI(const DeviceBase* rhs) {
        return reinterpret_cast<const WGPUDeviceImpl*>(rhs);
    }

    inline WGPUDeviceImpl* ToAPI(DeviceBase* rhs) {
        return reinterpret_cast<WGPUDeviceImpl*>(rhs);
    }

    inline const DeviceBase* FromAPI(const WGPUDeviceImpl* rhs) {
        return reinterpret_cast<const DeviceBase*>(rhs);
    }

    inline DeviceBase* FromAPI(WGPUDeviceImpl* rhs) {
        return reinterpret_cast<DeviceBase*>(rhs);
    }
    inline const WGPUExternalTextureImpl* ToAPI(const ExternalTextureBase* rhs) {
        return reinterpret_cast<const WGPUExternalTextureImpl*>(rhs);
    }

    inline WGPUExternalTextureImpl* ToAPI(ExternalTextureBase* rhs) {
        return reinterpret_cast<WGPUExternalTextureImpl*>(rhs);
    }

    inline const ExternalTextureBase* FromAPI(const WGPUExternalTextureImpl* rhs) {
        return reinterpret_cast<const ExternalTextureBase*>(rhs);
    }

    inline ExternalTextureBase* FromAPI(WGPUExternalTextureImpl* rhs) {
        return reinterpret_cast<ExternalTextureBase*>(rhs);
    }
    inline const WGPUInstanceImpl* ToAPI(const InstanceBase* rhs) {
        return reinterpret_cast<const WGPUInstanceImpl*>(rhs);
    }

    inline WGPUInstanceImpl* ToAPI(InstanceBase* rhs) {
        return reinterpret_cast<WGPUInstanceImpl*>(rhs);
    }

    inline const InstanceBase* FromAPI(const WGPUInstanceImpl* rhs) {
        return reinterpret_cast<const InstanceBase*>(rhs);
    }

    inline InstanceBase* FromAPI(WGPUInstanceImpl* rhs) {
        return reinterpret_cast<InstanceBase*>(rhs);
    }
    inline const WGPUPipelineLayoutImpl* ToAPI(const PipelineLayoutBase* rhs) {
        return reinterpret_cast<const WGPUPipelineLayoutImpl*>(rhs);
    }

    inline WGPUPipelineLayoutImpl* ToAPI(PipelineLayoutBase* rhs) {
        return reinterpret_cast<WGPUPipelineLayoutImpl*>(rhs);
    }

    inline const PipelineLayoutBase* FromAPI(const WGPUPipelineLayoutImpl* rhs) {
        return reinterpret_cast<const PipelineLayoutBase*>(rhs);
    }

    inline PipelineLayoutBase* FromAPI(WGPUPipelineLayoutImpl* rhs) {
        return reinterpret_cast<PipelineLayoutBase*>(rhs);
    }
    inline const WGPUQuerySetImpl* ToAPI(const QuerySetBase* rhs) {
        return reinterpret_cast<const WGPUQuerySetImpl*>(rhs);
    }

    inline WGPUQuerySetImpl* ToAPI(QuerySetBase* rhs) {
        return reinterpret_cast<WGPUQuerySetImpl*>(rhs);
    }

    inline const QuerySetBase* FromAPI(const WGPUQuerySetImpl* rhs) {
        return reinterpret_cast<const QuerySetBase*>(rhs);
    }

    inline QuerySetBase* FromAPI(WGPUQuerySetImpl* rhs) {
        return reinterpret_cast<QuerySetBase*>(rhs);
    }
    inline const WGPUQueueImpl* ToAPI(const QueueBase* rhs) {
        return reinterpret_cast<const WGPUQueueImpl*>(rhs);
    }

    inline WGPUQueueImpl* ToAPI(QueueBase* rhs) {
        return reinterpret_cast<WGPUQueueImpl*>(rhs);
    }

    inline const QueueBase* FromAPI(const WGPUQueueImpl* rhs) {
        return reinterpret_cast<const QueueBase*>(rhs);
    }

    inline QueueBase* FromAPI(WGPUQueueImpl* rhs) {
        return reinterpret_cast<QueueBase*>(rhs);
    }
    inline const WGPURenderBundleImpl* ToAPI(const RenderBundleBase* rhs) {
        return reinterpret_cast<const WGPURenderBundleImpl*>(rhs);
    }

    inline WGPURenderBundleImpl* ToAPI(RenderBundleBase* rhs) {
        return reinterpret_cast<WGPURenderBundleImpl*>(rhs);
    }

    inline const RenderBundleBase* FromAPI(const WGPURenderBundleImpl* rhs) {
        return reinterpret_cast<const RenderBundleBase*>(rhs);
    }

    inline RenderBundleBase* FromAPI(WGPURenderBundleImpl* rhs) {
        return reinterpret_cast<RenderBundleBase*>(rhs);
    }
    inline const WGPURenderBundleEncoderImpl* ToAPI(const RenderBundleEncoderBase* rhs) {
        return reinterpret_cast<const WGPURenderBundleEncoderImpl*>(rhs);
    }

    inline WGPURenderBundleEncoderImpl* ToAPI(RenderBundleEncoderBase* rhs) {
        return reinterpret_cast<WGPURenderBundleEncoderImpl*>(rhs);
    }

    inline const RenderBundleEncoderBase* FromAPI(const WGPURenderBundleEncoderImpl* rhs) {
        return reinterpret_cast<const RenderBundleEncoderBase*>(rhs);
    }

    inline RenderBundleEncoderBase* FromAPI(WGPURenderBundleEncoderImpl* rhs) {
        return reinterpret_cast<RenderBundleEncoderBase*>(rhs);
    }
    inline const WGPURenderPassEncoderImpl* ToAPI(const RenderPassEncoderBase* rhs) {
        return reinterpret_cast<const WGPURenderPassEncoderImpl*>(rhs);
    }

    inline WGPURenderPassEncoderImpl* ToAPI(RenderPassEncoderBase* rhs) {
        return reinterpret_cast<WGPURenderPassEncoderImpl*>(rhs);
    }

    inline const RenderPassEncoderBase* FromAPI(const WGPURenderPassEncoderImpl* rhs) {
        return reinterpret_cast<const RenderPassEncoderBase*>(rhs);
    }

    inline RenderPassEncoderBase* FromAPI(WGPURenderPassEncoderImpl* rhs) {
        return reinterpret_cast<RenderPassEncoderBase*>(rhs);
    }
    inline const WGPURenderPipelineImpl* ToAPI(const RenderPipelineBase* rhs) {
        return reinterpret_cast<const WGPURenderPipelineImpl*>(rhs);
    }

    inline WGPURenderPipelineImpl* ToAPI(RenderPipelineBase* rhs) {
        return reinterpret_cast<WGPURenderPipelineImpl*>(rhs);
    }

    inline const RenderPipelineBase* FromAPI(const WGPURenderPipelineImpl* rhs) {
        return reinterpret_cast<const RenderPipelineBase*>(rhs);
    }

    inline RenderPipelineBase* FromAPI(WGPURenderPipelineImpl* rhs) {
        return reinterpret_cast<RenderPipelineBase*>(rhs);
    }
    inline const WGPUSamplerImpl* ToAPI(const SamplerBase* rhs) {
        return reinterpret_cast<const WGPUSamplerImpl*>(rhs);
    }

    inline WGPUSamplerImpl* ToAPI(SamplerBase* rhs) {
        return reinterpret_cast<WGPUSamplerImpl*>(rhs);
    }

    inline const SamplerBase* FromAPI(const WGPUSamplerImpl* rhs) {
        return reinterpret_cast<const SamplerBase*>(rhs);
    }

    inline SamplerBase* FromAPI(WGPUSamplerImpl* rhs) {
        return reinterpret_cast<SamplerBase*>(rhs);
    }
    inline const WGPUShaderModuleImpl* ToAPI(const ShaderModuleBase* rhs) {
        return reinterpret_cast<const WGPUShaderModuleImpl*>(rhs);
    }

    inline WGPUShaderModuleImpl* ToAPI(ShaderModuleBase* rhs) {
        return reinterpret_cast<WGPUShaderModuleImpl*>(rhs);
    }

    inline const ShaderModuleBase* FromAPI(const WGPUShaderModuleImpl* rhs) {
        return reinterpret_cast<const ShaderModuleBase*>(rhs);
    }

    inline ShaderModuleBase* FromAPI(WGPUShaderModuleImpl* rhs) {
        return reinterpret_cast<ShaderModuleBase*>(rhs);
    }
    inline const WGPUSurfaceImpl* ToAPI(const SurfaceBase* rhs) {
        return reinterpret_cast<const WGPUSurfaceImpl*>(rhs);
    }

    inline WGPUSurfaceImpl* ToAPI(SurfaceBase* rhs) {
        return reinterpret_cast<WGPUSurfaceImpl*>(rhs);
    }

    inline const SurfaceBase* FromAPI(const WGPUSurfaceImpl* rhs) {
        return reinterpret_cast<const SurfaceBase*>(rhs);
    }

    inline SurfaceBase* FromAPI(WGPUSurfaceImpl* rhs) {
        return reinterpret_cast<SurfaceBase*>(rhs);
    }
    inline const WGPUSwapChainImpl* ToAPI(const SwapChainBase* rhs) {
        return reinterpret_cast<const WGPUSwapChainImpl*>(rhs);
    }

    inline WGPUSwapChainImpl* ToAPI(SwapChainBase* rhs) {
        return reinterpret_cast<WGPUSwapChainImpl*>(rhs);
    }

    inline const SwapChainBase* FromAPI(const WGPUSwapChainImpl* rhs) {
        return reinterpret_cast<const SwapChainBase*>(rhs);
    }

    inline SwapChainBase* FromAPI(WGPUSwapChainImpl* rhs) {
        return reinterpret_cast<SwapChainBase*>(rhs);
    }
    inline const WGPUTextureImpl* ToAPI(const TextureBase* rhs) {
        return reinterpret_cast<const WGPUTextureImpl*>(rhs);
    }

    inline WGPUTextureImpl* ToAPI(TextureBase* rhs) {
        return reinterpret_cast<WGPUTextureImpl*>(rhs);
    }

    inline const TextureBase* FromAPI(const WGPUTextureImpl* rhs) {
        return reinterpret_cast<const TextureBase*>(rhs);
    }

    inline TextureBase* FromAPI(WGPUTextureImpl* rhs) {
        return reinterpret_cast<TextureBase*>(rhs);
    }
    inline const WGPUTextureViewImpl* ToAPI(const TextureViewBase* rhs) {
        return reinterpret_cast<const WGPUTextureViewImpl*>(rhs);
    }

    inline WGPUTextureViewImpl* ToAPI(TextureViewBase* rhs) {
        return reinterpret_cast<WGPUTextureViewImpl*>(rhs);
    }

    inline const TextureViewBase* FromAPI(const WGPUTextureViewImpl* rhs) {
        return reinterpret_cast<const TextureViewBase*>(rhs);
    }

    inline TextureViewBase* FromAPI(WGPUTextureViewImpl* rhs) {
        return reinterpret_cast<TextureViewBase*>(rhs);
    }

    template <typename T>
    struct EnumCount;

    template<>
    struct EnumCount<wgpu::AdapterType> {
        static constexpr uint32_t value = 4;
    };
    template<>
    struct EnumCount<wgpu::AddressMode> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::AlphaMode> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::BackendType> {
        static constexpr uint32_t value = 9;
    };
    template<>
    struct EnumCount<wgpu::BlendFactor> {
        static constexpr uint32_t value = 17;
    };
    template<>
    struct EnumCount<wgpu::BlendOperation> {
        static constexpr uint32_t value = 5;
    };
    template<>
    struct EnumCount<wgpu::BufferBindingType> {
        static constexpr uint32_t value = 4;
    };
    template<>
    struct EnumCount<wgpu::BufferMapAsyncStatus> {
        static constexpr uint32_t value = 9;
    };
    template<>
    struct EnumCount<wgpu::BufferMapState> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::CompareFunction> {
        static constexpr uint32_t value = 9;
    };
    template<>
    struct EnumCount<wgpu::CompilationInfoRequestStatus> {
        static constexpr uint32_t value = 4;
    };
    template<>
    struct EnumCount<wgpu::CompilationMessageType> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::ComputePassTimestampLocation> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct EnumCount<wgpu::CreatePipelineAsyncStatus> {
        static constexpr uint32_t value = 6;
    };
    template<>
    struct EnumCount<wgpu::CullMode> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::DeviceLostReason> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct EnumCount<wgpu::ErrorFilter> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::ErrorType> {
        static constexpr uint32_t value = 6;
    };
    template<>
    struct EnumCount<wgpu::ExternalTextureRotation> {
        static constexpr uint32_t value = 4;
    };
    template<>
    struct EnumCount<wgpu::FilterMode> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct EnumCount<wgpu::FrontFace> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct EnumCount<wgpu::IndexFormat> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::LoadOp> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::LoggingType> {
        static constexpr uint32_t value = 4;
    };
    template<>
    struct EnumCount<wgpu::MipmapFilterMode> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct EnumCount<wgpu::PipelineStatisticName> {
        static constexpr uint32_t value = 5;
    };
    template<>
    struct EnumCount<wgpu::PowerPreference> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::PresentMode> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::PrimitiveTopology> {
        static constexpr uint32_t value = 5;
    };
    template<>
    struct EnumCount<wgpu::QueryType> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::QueueWorkDoneStatus> {
        static constexpr uint32_t value = 4;
    };
    template<>
    struct EnumCount<wgpu::RenderPassTimestampLocation> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct EnumCount<wgpu::RequestAdapterStatus> {
        static constexpr uint32_t value = 4;
    };
    template<>
    struct EnumCount<wgpu::RequestDeviceStatus> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::SamplerBindingType> {
        static constexpr uint32_t value = 4;
    };
    template<>
    struct EnumCount<wgpu::StencilOperation> {
        static constexpr uint32_t value = 8;
    };
    template<>
    struct EnumCount<wgpu::StorageTextureAccess> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct EnumCount<wgpu::StoreOp> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::TextureAspect> {
        static constexpr uint32_t value = 5;
    };
    template<>
    struct EnumCount<wgpu::TextureDimension> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct EnumCount<wgpu::TextureFormat> {
        static constexpr uint32_t value = 96;
    };
    template<>
    struct EnumCount<wgpu::TextureSampleType> {
        static constexpr uint32_t value = 6;
    };
    template<>
    struct EnumCount<wgpu::TextureViewDimension> {
        static constexpr uint32_t value = 7;
    };
    template<>
    struct EnumCount<wgpu::VertexFormat> {
        static constexpr uint32_t value = 31;
    };
    template<>
    struct EnumCount<wgpu::VertexStepMode> {
        static constexpr uint32_t value = 3;
    };

    inline WGPUAdapterType ToAPI(wgpu::AdapterType rhs) {
        return static_cast<WGPUAdapterType>(rhs);
    }

    inline wgpu::AdapterType FromAPI(WGPUAdapterType rhs) {
        return static_cast<wgpu::AdapterType>(rhs);
    }
    inline WGPUAddressMode ToAPI(wgpu::AddressMode rhs) {
        return static_cast<WGPUAddressMode>(rhs);
    }

    inline wgpu::AddressMode FromAPI(WGPUAddressMode rhs) {
        return static_cast<wgpu::AddressMode>(rhs);
    }
    inline WGPUAlphaMode ToAPI(wgpu::AlphaMode rhs) {
        return static_cast<WGPUAlphaMode>(rhs);
    }

    inline wgpu::AlphaMode FromAPI(WGPUAlphaMode rhs) {
        return static_cast<wgpu::AlphaMode>(rhs);
    }
    inline WGPUBackendType ToAPI(wgpu::BackendType rhs) {
        return static_cast<WGPUBackendType>(rhs);
    }

    inline wgpu::BackendType FromAPI(WGPUBackendType rhs) {
        return static_cast<wgpu::BackendType>(rhs);
    }
    inline WGPUBlendFactor ToAPI(wgpu::BlendFactor rhs) {
        return static_cast<WGPUBlendFactor>(rhs);
    }

    inline wgpu::BlendFactor FromAPI(WGPUBlendFactor rhs) {
        return static_cast<wgpu::BlendFactor>(rhs);
    }
    inline WGPUBlendOperation ToAPI(wgpu::BlendOperation rhs) {
        return static_cast<WGPUBlendOperation>(rhs);
    }

    inline wgpu::BlendOperation FromAPI(WGPUBlendOperation rhs) {
        return static_cast<wgpu::BlendOperation>(rhs);
    }
    inline WGPUBufferBindingType ToAPI(wgpu::BufferBindingType rhs) {
        return static_cast<WGPUBufferBindingType>(rhs);
    }

    inline wgpu::BufferBindingType FromAPI(WGPUBufferBindingType rhs) {
        return static_cast<wgpu::BufferBindingType>(rhs);
    }
    inline WGPUBufferMapAsyncStatus ToAPI(wgpu::BufferMapAsyncStatus rhs) {
        return static_cast<WGPUBufferMapAsyncStatus>(rhs);
    }

    inline wgpu::BufferMapAsyncStatus FromAPI(WGPUBufferMapAsyncStatus rhs) {
        return static_cast<wgpu::BufferMapAsyncStatus>(rhs);
    }
    inline WGPUBufferMapState ToAPI(wgpu::BufferMapState rhs) {
        return static_cast<WGPUBufferMapState>(rhs);
    }

    inline wgpu::BufferMapState FromAPI(WGPUBufferMapState rhs) {
        return static_cast<wgpu::BufferMapState>(rhs);
    }
    inline WGPUCompareFunction ToAPI(wgpu::CompareFunction rhs) {
        return static_cast<WGPUCompareFunction>(rhs);
    }

    inline wgpu::CompareFunction FromAPI(WGPUCompareFunction rhs) {
        return static_cast<wgpu::CompareFunction>(rhs);
    }
    inline WGPUCompilationInfoRequestStatus ToAPI(wgpu::CompilationInfoRequestStatus rhs) {
        return static_cast<WGPUCompilationInfoRequestStatus>(rhs);
    }

    inline wgpu::CompilationInfoRequestStatus FromAPI(WGPUCompilationInfoRequestStatus rhs) {
        return static_cast<wgpu::CompilationInfoRequestStatus>(rhs);
    }
    inline WGPUCompilationMessageType ToAPI(wgpu::CompilationMessageType rhs) {
        return static_cast<WGPUCompilationMessageType>(rhs);
    }

    inline wgpu::CompilationMessageType FromAPI(WGPUCompilationMessageType rhs) {
        return static_cast<wgpu::CompilationMessageType>(rhs);
    }
    inline WGPUComputePassTimestampLocation ToAPI(wgpu::ComputePassTimestampLocation rhs) {
        return static_cast<WGPUComputePassTimestampLocation>(rhs);
    }

    inline wgpu::ComputePassTimestampLocation FromAPI(WGPUComputePassTimestampLocation rhs) {
        return static_cast<wgpu::ComputePassTimestampLocation>(rhs);
    }
    inline WGPUCreatePipelineAsyncStatus ToAPI(wgpu::CreatePipelineAsyncStatus rhs) {
        return static_cast<WGPUCreatePipelineAsyncStatus>(rhs);
    }

    inline wgpu::CreatePipelineAsyncStatus FromAPI(WGPUCreatePipelineAsyncStatus rhs) {
        return static_cast<wgpu::CreatePipelineAsyncStatus>(rhs);
    }
    inline WGPUCullMode ToAPI(wgpu::CullMode rhs) {
        return static_cast<WGPUCullMode>(rhs);
    }

    inline wgpu::CullMode FromAPI(WGPUCullMode rhs) {
        return static_cast<wgpu::CullMode>(rhs);
    }
    inline WGPUDeviceLostReason ToAPI(wgpu::DeviceLostReason rhs) {
        return static_cast<WGPUDeviceLostReason>(rhs);
    }

    inline wgpu::DeviceLostReason FromAPI(WGPUDeviceLostReason rhs) {
        return static_cast<wgpu::DeviceLostReason>(rhs);
    }
    inline WGPUErrorFilter ToAPI(wgpu::ErrorFilter rhs) {
        return static_cast<WGPUErrorFilter>(rhs);
    }

    inline wgpu::ErrorFilter FromAPI(WGPUErrorFilter rhs) {
        return static_cast<wgpu::ErrorFilter>(rhs);
    }
    inline WGPUErrorType ToAPI(wgpu::ErrorType rhs) {
        return static_cast<WGPUErrorType>(rhs);
    }

    inline wgpu::ErrorType FromAPI(WGPUErrorType rhs) {
        return static_cast<wgpu::ErrorType>(rhs);
    }
    inline WGPUExternalTextureRotation ToAPI(wgpu::ExternalTextureRotation rhs) {
        return static_cast<WGPUExternalTextureRotation>(rhs);
    }

    inline wgpu::ExternalTextureRotation FromAPI(WGPUExternalTextureRotation rhs) {
        return static_cast<wgpu::ExternalTextureRotation>(rhs);
    }
    inline WGPUFeatureName ToAPI(wgpu::FeatureName rhs) {
        return static_cast<WGPUFeatureName>(rhs);
    }

    inline wgpu::FeatureName FromAPI(WGPUFeatureName rhs) {
        return static_cast<wgpu::FeatureName>(rhs);
    }
    inline WGPUFilterMode ToAPI(wgpu::FilterMode rhs) {
        return static_cast<WGPUFilterMode>(rhs);
    }

    inline wgpu::FilterMode FromAPI(WGPUFilterMode rhs) {
        return static_cast<wgpu::FilterMode>(rhs);
    }
    inline WGPUFrontFace ToAPI(wgpu::FrontFace rhs) {
        return static_cast<WGPUFrontFace>(rhs);
    }

    inline wgpu::FrontFace FromAPI(WGPUFrontFace rhs) {
        return static_cast<wgpu::FrontFace>(rhs);
    }
    inline WGPUIndexFormat ToAPI(wgpu::IndexFormat rhs) {
        return static_cast<WGPUIndexFormat>(rhs);
    }

    inline wgpu::IndexFormat FromAPI(WGPUIndexFormat rhs) {
        return static_cast<wgpu::IndexFormat>(rhs);
    }
    inline WGPULoadOp ToAPI(wgpu::LoadOp rhs) {
        return static_cast<WGPULoadOp>(rhs);
    }

    inline wgpu::LoadOp FromAPI(WGPULoadOp rhs) {
        return static_cast<wgpu::LoadOp>(rhs);
    }
    inline WGPULoggingType ToAPI(wgpu::LoggingType rhs) {
        return static_cast<WGPULoggingType>(rhs);
    }

    inline wgpu::LoggingType FromAPI(WGPULoggingType rhs) {
        return static_cast<wgpu::LoggingType>(rhs);
    }
    inline WGPUMipmapFilterMode ToAPI(wgpu::MipmapFilterMode rhs) {
        return static_cast<WGPUMipmapFilterMode>(rhs);
    }

    inline wgpu::MipmapFilterMode FromAPI(WGPUMipmapFilterMode rhs) {
        return static_cast<wgpu::MipmapFilterMode>(rhs);
    }
    inline WGPUPipelineStatisticName ToAPI(wgpu::PipelineStatisticName rhs) {
        return static_cast<WGPUPipelineStatisticName>(rhs);
    }

    inline wgpu::PipelineStatisticName FromAPI(WGPUPipelineStatisticName rhs) {
        return static_cast<wgpu::PipelineStatisticName>(rhs);
    }
    inline WGPUPowerPreference ToAPI(wgpu::PowerPreference rhs) {
        return static_cast<WGPUPowerPreference>(rhs);
    }

    inline wgpu::PowerPreference FromAPI(WGPUPowerPreference rhs) {
        return static_cast<wgpu::PowerPreference>(rhs);
    }
    inline WGPUPresentMode ToAPI(wgpu::PresentMode rhs) {
        return static_cast<WGPUPresentMode>(rhs);
    }

    inline wgpu::PresentMode FromAPI(WGPUPresentMode rhs) {
        return static_cast<wgpu::PresentMode>(rhs);
    }
    inline WGPUPrimitiveTopology ToAPI(wgpu::PrimitiveTopology rhs) {
        return static_cast<WGPUPrimitiveTopology>(rhs);
    }

    inline wgpu::PrimitiveTopology FromAPI(WGPUPrimitiveTopology rhs) {
        return static_cast<wgpu::PrimitiveTopology>(rhs);
    }
    inline WGPUQueryType ToAPI(wgpu::QueryType rhs) {
        return static_cast<WGPUQueryType>(rhs);
    }

    inline wgpu::QueryType FromAPI(WGPUQueryType rhs) {
        return static_cast<wgpu::QueryType>(rhs);
    }
    inline WGPUQueueWorkDoneStatus ToAPI(wgpu::QueueWorkDoneStatus rhs) {
        return static_cast<WGPUQueueWorkDoneStatus>(rhs);
    }

    inline wgpu::QueueWorkDoneStatus FromAPI(WGPUQueueWorkDoneStatus rhs) {
        return static_cast<wgpu::QueueWorkDoneStatus>(rhs);
    }
    inline WGPURenderPassTimestampLocation ToAPI(wgpu::RenderPassTimestampLocation rhs) {
        return static_cast<WGPURenderPassTimestampLocation>(rhs);
    }

    inline wgpu::RenderPassTimestampLocation FromAPI(WGPURenderPassTimestampLocation rhs) {
        return static_cast<wgpu::RenderPassTimestampLocation>(rhs);
    }
    inline WGPURequestAdapterStatus ToAPI(wgpu::RequestAdapterStatus rhs) {
        return static_cast<WGPURequestAdapterStatus>(rhs);
    }

    inline wgpu::RequestAdapterStatus FromAPI(WGPURequestAdapterStatus rhs) {
        return static_cast<wgpu::RequestAdapterStatus>(rhs);
    }
    inline WGPURequestDeviceStatus ToAPI(wgpu::RequestDeviceStatus rhs) {
        return static_cast<WGPURequestDeviceStatus>(rhs);
    }

    inline wgpu::RequestDeviceStatus FromAPI(WGPURequestDeviceStatus rhs) {
        return static_cast<wgpu::RequestDeviceStatus>(rhs);
    }
    inline WGPUSType ToAPI(wgpu::SType rhs) {
        return static_cast<WGPUSType>(rhs);
    }

    inline wgpu::SType FromAPI(WGPUSType rhs) {
        return static_cast<wgpu::SType>(rhs);
    }
    inline WGPUSamplerBindingType ToAPI(wgpu::SamplerBindingType rhs) {
        return static_cast<WGPUSamplerBindingType>(rhs);
    }

    inline wgpu::SamplerBindingType FromAPI(WGPUSamplerBindingType rhs) {
        return static_cast<wgpu::SamplerBindingType>(rhs);
    }
    inline WGPUStencilOperation ToAPI(wgpu::StencilOperation rhs) {
        return static_cast<WGPUStencilOperation>(rhs);
    }

    inline wgpu::StencilOperation FromAPI(WGPUStencilOperation rhs) {
        return static_cast<wgpu::StencilOperation>(rhs);
    }
    inline WGPUStorageTextureAccess ToAPI(wgpu::StorageTextureAccess rhs) {
        return static_cast<WGPUStorageTextureAccess>(rhs);
    }

    inline wgpu::StorageTextureAccess FromAPI(WGPUStorageTextureAccess rhs) {
        return static_cast<wgpu::StorageTextureAccess>(rhs);
    }
    inline WGPUStoreOp ToAPI(wgpu::StoreOp rhs) {
        return static_cast<WGPUStoreOp>(rhs);
    }

    inline wgpu::StoreOp FromAPI(WGPUStoreOp rhs) {
        return static_cast<wgpu::StoreOp>(rhs);
    }
    inline WGPUTextureAspect ToAPI(wgpu::TextureAspect rhs) {
        return static_cast<WGPUTextureAspect>(rhs);
    }

    inline wgpu::TextureAspect FromAPI(WGPUTextureAspect rhs) {
        return static_cast<wgpu::TextureAspect>(rhs);
    }
    inline WGPUTextureDimension ToAPI(wgpu::TextureDimension rhs) {
        return static_cast<WGPUTextureDimension>(rhs);
    }

    inline wgpu::TextureDimension FromAPI(WGPUTextureDimension rhs) {
        return static_cast<wgpu::TextureDimension>(rhs);
    }
    inline WGPUTextureFormat ToAPI(wgpu::TextureFormat rhs) {
        return static_cast<WGPUTextureFormat>(rhs);
    }

    inline wgpu::TextureFormat FromAPI(WGPUTextureFormat rhs) {
        return static_cast<wgpu::TextureFormat>(rhs);
    }
    inline WGPUTextureSampleType ToAPI(wgpu::TextureSampleType rhs) {
        return static_cast<WGPUTextureSampleType>(rhs);
    }

    inline wgpu::TextureSampleType FromAPI(WGPUTextureSampleType rhs) {
        return static_cast<wgpu::TextureSampleType>(rhs);
    }
    inline WGPUTextureViewDimension ToAPI(wgpu::TextureViewDimension rhs) {
        return static_cast<WGPUTextureViewDimension>(rhs);
    }

    inline wgpu::TextureViewDimension FromAPI(WGPUTextureViewDimension rhs) {
        return static_cast<wgpu::TextureViewDimension>(rhs);
    }
    inline WGPUVertexFormat ToAPI(wgpu::VertexFormat rhs) {
        return static_cast<WGPUVertexFormat>(rhs);
    }

    inline wgpu::VertexFormat FromAPI(WGPUVertexFormat rhs) {
        return static_cast<wgpu::VertexFormat>(rhs);
    }
    inline WGPUVertexStepMode ToAPI(wgpu::VertexStepMode rhs) {
        return static_cast<WGPUVertexStepMode>(rhs);
    }

    inline wgpu::VertexStepMode FromAPI(WGPUVertexStepMode rhs) {
        return static_cast<wgpu::VertexStepMode>(rhs);
    }
    inline WGPUBufferUsage ToAPI(wgpu::BufferUsage rhs) {
        return static_cast<WGPUBufferUsage>(rhs);
    }

    inline wgpu::BufferUsage FromAPI(WGPUBufferUsage rhs) {
        return static_cast<wgpu::BufferUsage>(rhs);
    }
    inline WGPUColorWriteMask ToAPI(wgpu::ColorWriteMask rhs) {
        return static_cast<WGPUColorWriteMask>(rhs);
    }

    inline wgpu::ColorWriteMask FromAPI(WGPUColorWriteMask rhs) {
        return static_cast<wgpu::ColorWriteMask>(rhs);
    }
    inline WGPUMapMode ToAPI(wgpu::MapMode rhs) {
        return static_cast<WGPUMapMode>(rhs);
    }

    inline wgpu::MapMode FromAPI(WGPUMapMode rhs) {
        return static_cast<wgpu::MapMode>(rhs);
    }
    inline WGPUShaderStage ToAPI(wgpu::ShaderStage rhs) {
        return static_cast<WGPUShaderStage>(rhs);
    }

    inline wgpu::ShaderStage FromAPI(WGPUShaderStage rhs) {
        return static_cast<wgpu::ShaderStage>(rhs);
    }
    inline WGPUTextureUsage ToAPI(wgpu::TextureUsage rhs) {
        return static_cast<WGPUTextureUsage>(rhs);
    }

    inline wgpu::TextureUsage FromAPI(WGPUTextureUsage rhs) {
        return static_cast<wgpu::TextureUsage>(rhs);
    }
}  // namespace dawn::native

#endif  // DAWNNATIVE_DAWN_PLATFORM_AUTOGEN_H_
