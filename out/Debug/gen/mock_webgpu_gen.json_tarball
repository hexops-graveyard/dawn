{"src/dawn/mock_webgpu.h": "\n#ifndef MOCK_WEBGPU_H\n#define MOCK_WEBGPU_H\n\n#include \"dawn/dawn_proc_table.h\"\n#include \"dawn/webgpu.h\"\n#include <gmock/gmock.h>\n\n#include <memory>\n\n// An abstract base class representing a proc table so that API calls can be mocked. Most API calls\n// are directly represented by a delete virtual method but others need minimal state tracking to be\n// useful as mocks.\nclass ProcTableAsClass {\n    public:\n        virtual ~ProcTableAsClass();\n\n        void GetProcTable(DawnProcTable* table);\n\n        // Creates an object that can be returned by a mocked call as in WillOnce(Return(foo)).\n        // It returns an object of the write type that isn't equal to any previously returned object.\n        // Otherwise some mock expectation could be triggered by two different objects having the same\n        // value.\n        WGPUAdapter GetNewAdapter();\n        WGPUBindGroup GetNewBindGroup();\n        WGPUBindGroupLayout GetNewBindGroupLayout();\n        WGPUBuffer GetNewBuffer();\n        WGPUCommandBuffer GetNewCommandBuffer();\n        WGPUCommandEncoder GetNewCommandEncoder();\n        WGPUComputePassEncoder GetNewComputePassEncoder();\n        WGPUComputePipeline GetNewComputePipeline();\n        WGPUDevice GetNewDevice();\n        WGPUExternalTexture GetNewExternalTexture();\n        WGPUInstance GetNewInstance();\n        WGPUPipelineLayout GetNewPipelineLayout();\n        WGPUQuerySet GetNewQuerySet();\n        WGPUQueue GetNewQueue();\n        WGPURenderBundle GetNewRenderBundle();\n        WGPURenderBundleEncoder GetNewRenderBundleEncoder();\n        WGPURenderPassEncoder GetNewRenderPassEncoder();\n        WGPURenderPipeline GetNewRenderPipeline();\n        WGPUSampler GetNewSampler();\n        WGPUShaderModule GetNewShaderModule();\n        WGPUSharedFence GetNewSharedFence();\n        WGPUSharedTextureMemory GetNewSharedTextureMemory();\n        WGPUSurface GetNewSurface();\n        WGPUSwapChain GetNewSwapChain();\n        WGPUTexture GetNewTexture();\n        WGPUTextureView GetNewTextureView();\n\n        virtual WGPUDevice AdapterCreateDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor) = 0;\n        virtual size_t AdapterEnumerateFeatures(WGPUAdapter adapter, WGPUFeatureName * features) = 0;\n        virtual WGPUInstance AdapterGetInstance(WGPUAdapter adapter) = 0;\n        virtual WGPUBool AdapterGetLimits(WGPUAdapter adapter, WGPUSupportedLimits * limits) = 0;\n        virtual void AdapterGetProperties(WGPUAdapter adapter, WGPUAdapterProperties * properties) = 0;\n        virtual WGPUBool AdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature) = 0;\n\n        virtual void AdapterReference(WGPUAdapter self) = 0;\n        virtual void AdapterRelease(WGPUAdapter self) = 0;\n\n        void AdapterRequestDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata);\n        virtual void OnAdapterRequestDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata) = 0;\n\n        void CallAdapterRequestDeviceCallback(WGPUAdapter adapter, WGPURequestDeviceStatus status, WGPUDevice device, char const * message);\n        virtual void BindGroupSetLabel(WGPUBindGroup bindGroup, char const * label) = 0;\n\n        virtual void BindGroupReference(WGPUBindGroup self) = 0;\n        virtual void BindGroupRelease(WGPUBindGroup self) = 0;\n\n        virtual void BindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, char const * label) = 0;\n\n        virtual void BindGroupLayoutReference(WGPUBindGroupLayout self) = 0;\n        virtual void BindGroupLayoutRelease(WGPUBindGroupLayout self) = 0;\n\n        virtual void BufferDestroy(WGPUBuffer buffer) = 0;\n        virtual void const * BufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size) = 0;\n        virtual WGPUBufferMapState BufferGetMapState(WGPUBuffer buffer) = 0;\n        virtual void * BufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size) = 0;\n        virtual uint64_t BufferGetSize(WGPUBuffer buffer) = 0;\n        virtual WGPUBufferUsage BufferGetUsage(WGPUBuffer buffer) = 0;\n        virtual void BufferSetLabel(WGPUBuffer buffer, char const * label) = 0;\n        virtual void BufferUnmap(WGPUBuffer buffer) = 0;\n\n        virtual void BufferReference(WGPUBuffer self) = 0;\n        virtual void BufferRelease(WGPUBuffer self) = 0;\n\n        void BufferMapAsync(WGPUBuffer buffer, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata);\n        virtual void OnBufferMapAsync(WGPUBuffer buffer, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata) = 0;\n\n        void CallBufferMapAsyncCallback(WGPUBuffer buffer, WGPUBufferMapAsyncStatus status);\n        virtual void CommandBufferSetLabel(WGPUCommandBuffer commandBuffer, char const * label) = 0;\n\n        virtual void CommandBufferReference(WGPUCommandBuffer self) = 0;\n        virtual void CommandBufferRelease(WGPUCommandBuffer self) = 0;\n\n        virtual WGPUComputePassEncoder CommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor const * descriptor) = 0;\n        virtual WGPURenderPassEncoder CommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor) = 0;\n        virtual void CommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size) = 0;\n        virtual void CommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size) = 0;\n        virtual void CommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) = 0;\n        virtual void CommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize) = 0;\n        virtual void CommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) = 0;\n        virtual WGPUCommandBuffer CommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor const * descriptor) = 0;\n        virtual void CommandEncoderInjectValidationError(WGPUCommandEncoder commandEncoder, char const * message) = 0;\n        virtual void CommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, char const * markerLabel) = 0;\n        virtual void CommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder) = 0;\n        virtual void CommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, char const * groupLabel) = 0;\n        virtual void CommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset) = 0;\n        virtual void CommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, char const * label) = 0;\n        virtual void CommandEncoderWriteBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size) = 0;\n        virtual void CommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex) = 0;\n\n        virtual void CommandEncoderReference(WGPUCommandEncoder self) = 0;\n        virtual void CommandEncoderRelease(WGPUCommandEncoder self) = 0;\n\n        virtual void ComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) = 0;\n        virtual void ComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) = 0;\n        virtual void ComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder) = 0;\n        virtual void ComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, char const * markerLabel) = 0;\n        virtual void ComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder) = 0;\n        virtual void ComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, char const * groupLabel) = 0;\n        virtual void ComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) = 0;\n        virtual void ComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, char const * label) = 0;\n        virtual void ComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline) = 0;\n        virtual void ComputePassEncoderWriteTimestamp(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) = 0;\n\n        virtual void ComputePassEncoderReference(WGPUComputePassEncoder self) = 0;\n        virtual void ComputePassEncoderRelease(WGPUComputePassEncoder self) = 0;\n\n        virtual WGPUBindGroupLayout ComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex) = 0;\n        virtual void ComputePipelineSetLabel(WGPUComputePipeline computePipeline, char const * label) = 0;\n\n        virtual void ComputePipelineReference(WGPUComputePipeline self) = 0;\n        virtual void ComputePipelineRelease(WGPUComputePipeline self) = 0;\n\n        virtual WGPUBindGroup DeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor) = 0;\n        virtual WGPUBindGroupLayout DeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor) = 0;\n        virtual WGPUBuffer DeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) = 0;\n        virtual WGPUCommandEncoder DeviceCreateCommandEncoder(WGPUDevice device, WGPUCommandEncoderDescriptor const * descriptor) = 0;\n        virtual WGPUComputePipeline DeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor) = 0;\n        virtual WGPUBuffer DeviceCreateErrorBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) = 0;\n        virtual WGPUExternalTexture DeviceCreateErrorExternalTexture(WGPUDevice device) = 0;\n        virtual WGPUShaderModule DeviceCreateErrorShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor, char const * errorMessage) = 0;\n        virtual WGPUTexture DeviceCreateErrorTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) = 0;\n        virtual WGPUExternalTexture DeviceCreateExternalTexture(WGPUDevice device, WGPUExternalTextureDescriptor const * externalTextureDescriptor) = 0;\n        virtual WGPUPipelineLayout DeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor) = 0;\n        virtual WGPUQuerySet DeviceCreateQuerySet(WGPUDevice device, WGPUQuerySetDescriptor const * descriptor) = 0;\n        virtual WGPURenderBundleEncoder DeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor) = 0;\n        virtual WGPURenderPipeline DeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor) = 0;\n        virtual WGPUSampler DeviceCreateSampler(WGPUDevice device, WGPUSamplerDescriptor const * descriptor) = 0;\n        virtual WGPUShaderModule DeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor) = 0;\n        virtual WGPUSwapChain DeviceCreateSwapChain(WGPUDevice device, WGPUSurface surface, WGPUSwapChainDescriptor const * descriptor) = 0;\n        virtual WGPUTexture DeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) = 0;\n        virtual void DeviceDestroy(WGPUDevice device) = 0;\n        virtual size_t DeviceEnumerateFeatures(WGPUDevice device, WGPUFeatureName * features) = 0;\n        virtual void DeviceForceLoss(WGPUDevice device, WGPUDeviceLostReason type, char const * message) = 0;\n        virtual WGPUAdapter DeviceGetAdapter(WGPUDevice device) = 0;\n        virtual WGPUBool DeviceGetLimits(WGPUDevice device, WGPUSupportedLimits * limits) = 0;\n        virtual WGPUQueue DeviceGetQueue(WGPUDevice device) = 0;\n        virtual WGPUTextureUsage DeviceGetSupportedSurfaceUsage(WGPUDevice device, WGPUSurface surface) = 0;\n        virtual WGPUBool DeviceHasFeature(WGPUDevice device, WGPUFeatureName feature) = 0;\n        virtual WGPUSharedFence DeviceImportSharedFence(WGPUDevice device, WGPUSharedFenceDescriptor const * descriptor) = 0;\n        virtual WGPUSharedTextureMemory DeviceImportSharedTextureMemory(WGPUDevice device, WGPUSharedTextureMemoryDescriptor const * descriptor) = 0;\n        virtual void DeviceInjectError(WGPUDevice device, WGPUErrorType type, char const * message) = 0;\n        virtual void DevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter) = 0;\n        virtual void DeviceSetLabel(WGPUDevice device, char const * label) = 0;\n        virtual void DeviceTick(WGPUDevice device) = 0;\n        virtual void DeviceValidateTextureDescriptor(WGPUDevice device, WGPUTextureDescriptor const * descriptor) = 0;\n\n        virtual void DeviceReference(WGPUDevice self) = 0;\n        virtual void DeviceRelease(WGPUDevice self) = 0;\n\n        void DeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata);\n        virtual void OnDeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata) = 0;\n\n        void CallDeviceCreateComputePipelineAsyncCallback(WGPUDevice device, WGPUCreatePipelineAsyncStatus status, WGPUComputePipeline pipeline, char const * message);\n        void DeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata);\n        virtual void OnDeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata) = 0;\n\n        void CallDeviceCreateRenderPipelineAsyncCallback(WGPUDevice device, WGPUCreatePipelineAsyncStatus status, WGPURenderPipeline pipeline, char const * message);\n        void DevicePopErrorScope(WGPUDevice device, WGPUErrorCallback callback, void * userdata);\n        virtual void OnDevicePopErrorScope(WGPUDevice device, WGPUErrorCallback callback, void * userdata) = 0;\n\n        void CallDevicePopErrorScopeCallback(WGPUDevice device, WGPUErrorType type, char const * message);\n        void DeviceSetDeviceLostCallback(WGPUDevice device, WGPUDeviceLostCallback callback, void * userdata);\n        virtual void OnDeviceSetDeviceLostCallback(WGPUDevice device, WGPUDeviceLostCallback callback, void * userdata) = 0;\n\n        void CallDeviceSetDeviceLostCallbackCallback(WGPUDevice device, WGPUDeviceLostReason reason, char const * message);\n        void DeviceSetLoggingCallback(WGPUDevice device, WGPULoggingCallback callback, void * userdata);\n        virtual void OnDeviceSetLoggingCallback(WGPUDevice device, WGPULoggingCallback callback, void * userdata) = 0;\n\n        void CallDeviceSetLoggingCallbackCallback(WGPUDevice device, WGPULoggingType type, char const * message);\n        void DeviceSetUncapturedErrorCallback(WGPUDevice device, WGPUErrorCallback callback, void * userdata);\n        virtual void OnDeviceSetUncapturedErrorCallback(WGPUDevice device, WGPUErrorCallback callback, void * userdata) = 0;\n\n        void CallDeviceSetUncapturedErrorCallbackCallback(WGPUDevice device, WGPUErrorType type, char const * message);\n        virtual void ExternalTextureDestroy(WGPUExternalTexture externalTexture) = 0;\n        virtual void ExternalTextureExpire(WGPUExternalTexture externalTexture) = 0;\n        virtual void ExternalTextureRefresh(WGPUExternalTexture externalTexture) = 0;\n        virtual void ExternalTextureSetLabel(WGPUExternalTexture externalTexture, char const * label) = 0;\n\n        virtual void ExternalTextureReference(WGPUExternalTexture self) = 0;\n        virtual void ExternalTextureRelease(WGPUExternalTexture self) = 0;\n\n        virtual WGPUSurface InstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor) = 0;\n        virtual void InstanceProcessEvents(WGPUInstance instance) = 0;\n\n        virtual void InstanceReference(WGPUInstance self) = 0;\n        virtual void InstanceRelease(WGPUInstance self) = 0;\n\n        void InstanceRequestAdapter(WGPUInstance instance, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata);\n        virtual void OnInstanceRequestAdapter(WGPUInstance instance, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata) = 0;\n\n        void CallInstanceRequestAdapterCallback(WGPUInstance instance, WGPURequestAdapterStatus status, WGPUAdapter adapter, char const * message);\n        virtual void PipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, char const * label) = 0;\n\n        virtual void PipelineLayoutReference(WGPUPipelineLayout self) = 0;\n        virtual void PipelineLayoutRelease(WGPUPipelineLayout self) = 0;\n\n        virtual void QuerySetDestroy(WGPUQuerySet querySet) = 0;\n        virtual uint32_t QuerySetGetCount(WGPUQuerySet querySet) = 0;\n        virtual WGPUQueryType QuerySetGetType(WGPUQuerySet querySet) = 0;\n        virtual void QuerySetSetLabel(WGPUQuerySet querySet, char const * label) = 0;\n\n        virtual void QuerySetReference(WGPUQuerySet self) = 0;\n        virtual void QuerySetRelease(WGPUQuerySet self) = 0;\n\n        virtual void QueueCopyExternalTextureForBrowser(WGPUQueue queue, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) = 0;\n        virtual void QueueCopyTextureForBrowser(WGPUQueue queue, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) = 0;\n        virtual void QueueSetLabel(WGPUQueue queue, char const * label) = 0;\n        virtual void QueueSubmit(WGPUQueue queue, size_t commandCount, WGPUCommandBuffer const * commands) = 0;\n        virtual void QueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size) = 0;\n        virtual void QueueWriteTexture(WGPUQueue queue, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize) = 0;\n\n        virtual void QueueReference(WGPUQueue self) = 0;\n        virtual void QueueRelease(WGPUQueue self) = 0;\n\n        void QueueOnSubmittedWorkDone(WGPUQueue queue, uint64_t signalValue, WGPUQueueWorkDoneCallback callback, void * userdata);\n        virtual void OnQueueOnSubmittedWorkDone(WGPUQueue queue, uint64_t signalValue, WGPUQueueWorkDoneCallback callback, void * userdata) = 0;\n\n        void CallQueueOnSubmittedWorkDoneCallback(WGPUQueue queue, WGPUQueueWorkDoneStatus status);\n        virtual void RenderBundleSetLabel(WGPURenderBundle renderBundle, char const * label) = 0;\n\n        virtual void RenderBundleReference(WGPURenderBundle self) = 0;\n        virtual void RenderBundleRelease(WGPURenderBundle self) = 0;\n\n        virtual void RenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) = 0;\n        virtual void RenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) = 0;\n        virtual void RenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) = 0;\n        virtual void RenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) = 0;\n        virtual WGPURenderBundle RenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor const * descriptor) = 0;\n        virtual void RenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, char const * markerLabel) = 0;\n        virtual void RenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder) = 0;\n        virtual void RenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel) = 0;\n        virtual void RenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) = 0;\n        virtual void RenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) = 0;\n        virtual void RenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, char const * label) = 0;\n        virtual void RenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline) = 0;\n        virtual void RenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) = 0;\n\n        virtual void RenderBundleEncoderReference(WGPURenderBundleEncoder self) = 0;\n        virtual void RenderBundleEncoderRelease(WGPURenderBundleEncoder self) = 0;\n\n        virtual void RenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex) = 0;\n        virtual void RenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) = 0;\n        virtual void RenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) = 0;\n        virtual void RenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) = 0;\n        virtual void RenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) = 0;\n        virtual void RenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder) = 0;\n        virtual void RenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder) = 0;\n        virtual void RenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, WGPURenderBundle const * bundles) = 0;\n        virtual void RenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, char const * markerLabel) = 0;\n        virtual void RenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder) = 0;\n        virtual void RenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, char const * groupLabel) = 0;\n        virtual void RenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) = 0;\n        virtual void RenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color) = 0;\n        virtual void RenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) = 0;\n        virtual void RenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, char const * label) = 0;\n        virtual void RenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline) = 0;\n        virtual void RenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height) = 0;\n        virtual void RenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference) = 0;\n        virtual void RenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) = 0;\n        virtual void RenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth) = 0;\n        virtual void RenderPassEncoderWriteTimestamp(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) = 0;\n\n        virtual void RenderPassEncoderReference(WGPURenderPassEncoder self) = 0;\n        virtual void RenderPassEncoderRelease(WGPURenderPassEncoder self) = 0;\n\n        virtual WGPUBindGroupLayout RenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex) = 0;\n        virtual void RenderPipelineSetLabel(WGPURenderPipeline renderPipeline, char const * label) = 0;\n\n        virtual void RenderPipelineReference(WGPURenderPipeline self) = 0;\n        virtual void RenderPipelineRelease(WGPURenderPipeline self) = 0;\n\n        virtual void SamplerSetLabel(WGPUSampler sampler, char const * label) = 0;\n\n        virtual void SamplerReference(WGPUSampler self) = 0;\n        virtual void SamplerRelease(WGPUSampler self) = 0;\n\n        virtual void ShaderModuleSetLabel(WGPUShaderModule shaderModule, char const * label) = 0;\n\n        virtual void ShaderModuleReference(WGPUShaderModule self) = 0;\n        virtual void ShaderModuleRelease(WGPUShaderModule self) = 0;\n\n        void ShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata);\n        virtual void OnShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata) = 0;\n\n        void CallShaderModuleGetCompilationInfoCallback(WGPUShaderModule shaderModule, WGPUCompilationInfoRequestStatus status, WGPUCompilationInfo const * compilationInfo);\n        virtual void SharedFenceExportInfo(WGPUSharedFence sharedFence, WGPUSharedFenceExportInfo * info) = 0;\n\n        virtual void SharedFenceReference(WGPUSharedFence self) = 0;\n        virtual void SharedFenceRelease(WGPUSharedFence self) = 0;\n\n        virtual void SharedTextureMemoryBeginAccess(WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryBeginAccessDescriptor const * descriptor) = 0;\n        virtual WGPUTexture SharedTextureMemoryCreateTexture(WGPUSharedTextureMemory sharedTextureMemory, WGPUTextureDescriptor const * descriptor) = 0;\n        virtual void SharedTextureMemoryEndAccess(WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryEndAccessState * descriptor) = 0;\n        virtual void SharedTextureMemoryGetProperties(WGPUSharedTextureMemory sharedTextureMemory, WGPUSharedTextureMemoryProperties * properties) = 0;\n        virtual void SharedTextureMemorySetLabel(WGPUSharedTextureMemory sharedTextureMemory, char const * label) = 0;\n\n        virtual void SharedTextureMemoryReference(WGPUSharedTextureMemory self) = 0;\n        virtual void SharedTextureMemoryRelease(WGPUSharedTextureMemory self) = 0;\n\n\n        virtual void SurfaceReference(WGPUSurface self) = 0;\n        virtual void SurfaceRelease(WGPUSurface self) = 0;\n\n        virtual WGPUTexture SwapChainGetCurrentTexture(WGPUSwapChain swapChain) = 0;\n        virtual WGPUTextureView SwapChainGetCurrentTextureView(WGPUSwapChain swapChain) = 0;\n        virtual void SwapChainPresent(WGPUSwapChain swapChain) = 0;\n\n        virtual void SwapChainReference(WGPUSwapChain self) = 0;\n        virtual void SwapChainRelease(WGPUSwapChain self) = 0;\n\n        virtual WGPUTextureView TextureCreateView(WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor) = 0;\n        virtual void TextureDestroy(WGPUTexture texture) = 0;\n        virtual uint32_t TextureGetDepthOrArrayLayers(WGPUTexture texture) = 0;\n        virtual WGPUTextureDimension TextureGetDimension(WGPUTexture texture) = 0;\n        virtual WGPUTextureFormat TextureGetFormat(WGPUTexture texture) = 0;\n        virtual uint32_t TextureGetHeight(WGPUTexture texture) = 0;\n        virtual uint32_t TextureGetMipLevelCount(WGPUTexture texture) = 0;\n        virtual uint32_t TextureGetSampleCount(WGPUTexture texture) = 0;\n        virtual WGPUTextureUsage TextureGetUsage(WGPUTexture texture) = 0;\n        virtual uint32_t TextureGetWidth(WGPUTexture texture) = 0;\n        virtual void TextureSetLabel(WGPUTexture texture, char const * label) = 0;\n\n        virtual void TextureReference(WGPUTexture self) = 0;\n        virtual void TextureRelease(WGPUTexture self) = 0;\n\n        virtual void TextureViewSetLabel(WGPUTextureView textureView, char const * label) = 0;\n\n        virtual void TextureViewReference(WGPUTextureView self) = 0;\n        virtual void TextureViewRelease(WGPUTextureView self) = 0;\n\n\n        struct Object {\n            ProcTableAsClass* procs = nullptr;\n            WGPURequestDeviceCallback mAdapterRequestDeviceCallback = nullptr;\n            WGPUBufferMapCallback mBufferMapAsyncCallback = nullptr;\n            WGPUCreateComputePipelineAsyncCallback mDeviceCreateComputePipelineAsyncCallback = nullptr;\n            WGPUCreateRenderPipelineAsyncCallback mDeviceCreateRenderPipelineAsyncCallback = nullptr;\n            WGPUErrorCallback mDevicePopErrorScopeCallback = nullptr;\n            WGPUDeviceLostCallback mDeviceSetDeviceLostCallbackCallback = nullptr;\n            WGPULoggingCallback mDeviceSetLoggingCallbackCallback = nullptr;\n            WGPUErrorCallback mDeviceSetUncapturedErrorCallbackCallback = nullptr;\n            WGPURequestAdapterCallback mInstanceRequestAdapterCallback = nullptr;\n            WGPUQueueWorkDoneCallback mQueueOnSubmittedWorkDoneCallback = nullptr;\n            WGPUCompilationInfoCallback mShaderModuleGetCompilationInfoCallback = nullptr;\n            void* userdata = 0;\n        };\n\n    private:\n        // Remembers the values returned by GetNew* so they can be freed.\n        std::vector<std::unique_ptr<Object>> mObjects;\n};\n\nclass MockProcTable : public ProcTableAsClass {\n    public:\n        MockProcTable();\n        ~MockProcTable() override;\n\n        void IgnoreAllReleaseCalls();\n\n        MOCK_METHOD(WGPUDevice, AdapterCreateDevice, (WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor), (override));\n        MOCK_METHOD(size_t, AdapterEnumerateFeatures, (WGPUAdapter adapter, WGPUFeatureName * features), (override));\n        MOCK_METHOD(WGPUInstance, AdapterGetInstance, (WGPUAdapter adapter), (override));\n        MOCK_METHOD(WGPUBool, AdapterGetLimits, (WGPUAdapter adapter, WGPUSupportedLimits * limits), (override));\n        MOCK_METHOD(void, AdapterGetProperties, (WGPUAdapter adapter, WGPUAdapterProperties * properties), (override));\n        MOCK_METHOD(WGPUBool, AdapterHasFeature, (WGPUAdapter adapter, WGPUFeatureName feature), (override));\n\n        MOCK_METHOD(void, AdapterReference, (WGPUAdapter self), (override));\n        MOCK_METHOD(void, AdapterRelease, (WGPUAdapter self), (override));\n\n        MOCK_METHOD(void, OnAdapterRequestDevice, (WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata), (override));\n        MOCK_METHOD(void, BindGroupSetLabel, (WGPUBindGroup bindGroup, char const * label), (override));\n\n        MOCK_METHOD(void, BindGroupReference, (WGPUBindGroup self), (override));\n        MOCK_METHOD(void, BindGroupRelease, (WGPUBindGroup self), (override));\n\n        MOCK_METHOD(void, BindGroupLayoutSetLabel, (WGPUBindGroupLayout bindGroupLayout, char const * label), (override));\n\n        MOCK_METHOD(void, BindGroupLayoutReference, (WGPUBindGroupLayout self), (override));\n        MOCK_METHOD(void, BindGroupLayoutRelease, (WGPUBindGroupLayout self), (override));\n\n        MOCK_METHOD(void, BufferDestroy, (WGPUBuffer buffer), (override));\n        MOCK_METHOD(void const *, BufferGetConstMappedRange, (WGPUBuffer buffer, size_t offset, size_t size), (override));\n        MOCK_METHOD(WGPUBufferMapState, BufferGetMapState, (WGPUBuffer buffer), (override));\n        MOCK_METHOD(void *, BufferGetMappedRange, (WGPUBuffer buffer, size_t offset, size_t size), (override));\n        MOCK_METHOD(uint64_t, BufferGetSize, (WGPUBuffer buffer), (override));\n        MOCK_METHOD(WGPUBufferUsage, BufferGetUsage, (WGPUBuffer buffer), (override));\n        MOCK_METHOD(void, BufferSetLabel, (WGPUBuffer buffer, char const * label), (override));\n        MOCK_METHOD(void, BufferUnmap, (WGPUBuffer buffer), (override));\n\n        MOCK_METHOD(void, BufferReference, (WGPUBuffer self), (override));\n        MOCK_METHOD(void, BufferRelease, (WGPUBuffer self), (override));\n\n        MOCK_METHOD(void, OnBufferMapAsync, (WGPUBuffer buffer, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata), (override));\n        MOCK_METHOD(void, CommandBufferSetLabel, (WGPUCommandBuffer commandBuffer, char const * label), (override));\n\n        MOCK_METHOD(void, CommandBufferReference, (WGPUCommandBuffer self), (override));\n        MOCK_METHOD(void, CommandBufferRelease, (WGPUCommandBuffer self), (override));\n\n        MOCK_METHOD(WGPUComputePassEncoder, CommandEncoderBeginComputePass, (WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPURenderPassEncoder, CommandEncoderBeginRenderPass, (WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor), (override));\n        MOCK_METHOD(void, CommandEncoderClearBuffer, (WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size), (override));\n        MOCK_METHOD(void, CommandEncoderCopyBufferToBuffer, (WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size), (override));\n        MOCK_METHOD(void, CommandEncoderCopyBufferToTexture, (WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize), (override));\n        MOCK_METHOD(void, CommandEncoderCopyTextureToBuffer, (WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize), (override));\n        MOCK_METHOD(void, CommandEncoderCopyTextureToTexture, (WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize), (override));\n        MOCK_METHOD(WGPUCommandBuffer, CommandEncoderFinish, (WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor const * descriptor), (override));\n        MOCK_METHOD(void, CommandEncoderInjectValidationError, (WGPUCommandEncoder commandEncoder, char const * message), (override));\n        MOCK_METHOD(void, CommandEncoderInsertDebugMarker, (WGPUCommandEncoder commandEncoder, char const * markerLabel), (override));\n        MOCK_METHOD(void, CommandEncoderPopDebugGroup, (WGPUCommandEncoder commandEncoder), (override));\n        MOCK_METHOD(void, CommandEncoderPushDebugGroup, (WGPUCommandEncoder commandEncoder, char const * groupLabel), (override));\n        MOCK_METHOD(void, CommandEncoderResolveQuerySet, (WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset), (override));\n        MOCK_METHOD(void, CommandEncoderSetLabel, (WGPUCommandEncoder commandEncoder, char const * label), (override));\n        MOCK_METHOD(void, CommandEncoderWriteBuffer, (WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size), (override));\n        MOCK_METHOD(void, CommandEncoderWriteTimestamp, (WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex), (override));\n\n        MOCK_METHOD(void, CommandEncoderReference, (WGPUCommandEncoder self), (override));\n        MOCK_METHOD(void, CommandEncoderRelease, (WGPUCommandEncoder self), (override));\n\n        MOCK_METHOD(void, ComputePassEncoderDispatchWorkgroups, (WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ), (override));\n        MOCK_METHOD(void, ComputePassEncoderDispatchWorkgroupsIndirect, (WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset), (override));\n        MOCK_METHOD(void, ComputePassEncoderEnd, (WGPUComputePassEncoder computePassEncoder), (override));\n        MOCK_METHOD(void, ComputePassEncoderInsertDebugMarker, (WGPUComputePassEncoder computePassEncoder, char const * markerLabel), (override));\n        MOCK_METHOD(void, ComputePassEncoderPopDebugGroup, (WGPUComputePassEncoder computePassEncoder), (override));\n        MOCK_METHOD(void, ComputePassEncoderPushDebugGroup, (WGPUComputePassEncoder computePassEncoder, char const * groupLabel), (override));\n        MOCK_METHOD(void, ComputePassEncoderSetBindGroup, (WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets), (override));\n        MOCK_METHOD(void, ComputePassEncoderSetLabel, (WGPUComputePassEncoder computePassEncoder, char const * label), (override));\n        MOCK_METHOD(void, ComputePassEncoderSetPipeline, (WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline), (override));\n        MOCK_METHOD(void, ComputePassEncoderWriteTimestamp, (WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint32_t queryIndex), (override));\n\n        MOCK_METHOD(void, ComputePassEncoderReference, (WGPUComputePassEncoder self), (override));\n        MOCK_METHOD(void, ComputePassEncoderRelease, (WGPUComputePassEncoder self), (override));\n\n        MOCK_METHOD(WGPUBindGroupLayout, ComputePipelineGetBindGroupLayout, (WGPUComputePipeline computePipeline, uint32_t groupIndex), (override));\n        MOCK_METHOD(void, ComputePipelineSetLabel, (WGPUComputePipeline computePipeline, char const * label), (override));\n\n        MOCK_METHOD(void, ComputePipelineReference, (WGPUComputePipeline self), (override));\n        MOCK_METHOD(void, ComputePipelineRelease, (WGPUComputePipeline self), (override));\n\n        MOCK_METHOD(WGPUBindGroup, DeviceCreateBindGroup, (WGPUDevice device, WGPUBindGroupDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUBindGroupLayout, DeviceCreateBindGroupLayout, (WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUBuffer, DeviceCreateBuffer, (WGPUDevice device, WGPUBufferDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUCommandEncoder, DeviceCreateCommandEncoder, (WGPUDevice device, WGPUCommandEncoderDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUComputePipeline, DeviceCreateComputePipeline, (WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUBuffer, DeviceCreateErrorBuffer, (WGPUDevice device, WGPUBufferDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUExternalTexture, DeviceCreateErrorExternalTexture, (WGPUDevice device), (override));\n        MOCK_METHOD(WGPUShaderModule, DeviceCreateErrorShaderModule, (WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor, char const * errorMessage), (override));\n        MOCK_METHOD(WGPUTexture, DeviceCreateErrorTexture, (WGPUDevice device, WGPUTextureDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUExternalTexture, DeviceCreateExternalTexture, (WGPUDevice device, WGPUExternalTextureDescriptor const * externalTextureDescriptor), (override));\n        MOCK_METHOD(WGPUPipelineLayout, DeviceCreatePipelineLayout, (WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUQuerySet, DeviceCreateQuerySet, (WGPUDevice device, WGPUQuerySetDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPURenderBundleEncoder, DeviceCreateRenderBundleEncoder, (WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPURenderPipeline, DeviceCreateRenderPipeline, (WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUSampler, DeviceCreateSampler, (WGPUDevice device, WGPUSamplerDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUShaderModule, DeviceCreateShaderModule, (WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUSwapChain, DeviceCreateSwapChain, (WGPUDevice device, WGPUSurface surface, WGPUSwapChainDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUTexture, DeviceCreateTexture, (WGPUDevice device, WGPUTextureDescriptor const * descriptor), (override));\n        MOCK_METHOD(void, DeviceDestroy, (WGPUDevice device), (override));\n        MOCK_METHOD(size_t, DeviceEnumerateFeatures, (WGPUDevice device, WGPUFeatureName * features), (override));\n        MOCK_METHOD(void, DeviceForceLoss, (WGPUDevice device, WGPUDeviceLostReason type, char const * message), (override));\n        MOCK_METHOD(WGPUAdapter, DeviceGetAdapter, (WGPUDevice device), (override));\n        MOCK_METHOD(WGPUBool, DeviceGetLimits, (WGPUDevice device, WGPUSupportedLimits * limits), (override));\n        MOCK_METHOD(WGPUQueue, DeviceGetQueue, (WGPUDevice device), (override));\n        MOCK_METHOD(WGPUTextureUsage, DeviceGetSupportedSurfaceUsage, (WGPUDevice device, WGPUSurface surface), (override));\n        MOCK_METHOD(WGPUBool, DeviceHasFeature, (WGPUDevice device, WGPUFeatureName feature), (override));\n        MOCK_METHOD(WGPUSharedFence, DeviceImportSharedFence, (WGPUDevice device, WGPUSharedFenceDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUSharedTextureMemory, DeviceImportSharedTextureMemory, (WGPUDevice device, WGPUSharedTextureMemoryDescriptor const * descriptor), (override));\n        MOCK_METHOD(void, DeviceInjectError, (WGPUDevice device, WGPUErrorType type, char const * message), (override));\n        MOCK_METHOD(void, DevicePushErrorScope, (WGPUDevice device, WGPUErrorFilter filter), (override));\n        MOCK_METHOD(void, DeviceSetLabel, (WGPUDevice device, char const * label), (override));\n        MOCK_METHOD(void, DeviceTick, (WGPUDevice device), (override));\n        MOCK_METHOD(void, DeviceValidateTextureDescriptor, (WGPUDevice device, WGPUTextureDescriptor const * descriptor), (override));\n\n        MOCK_METHOD(void, DeviceReference, (WGPUDevice self), (override));\n        MOCK_METHOD(void, DeviceRelease, (WGPUDevice self), (override));\n\n        MOCK_METHOD(void, OnDeviceCreateComputePipelineAsync, (WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata), (override));\n        MOCK_METHOD(void, OnDeviceCreateRenderPipelineAsync, (WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata), (override));\n        MOCK_METHOD(void, OnDevicePopErrorScope, (WGPUDevice device, WGPUErrorCallback callback, void * userdata), (override));\n        MOCK_METHOD(void, OnDeviceSetDeviceLostCallback, (WGPUDevice device, WGPUDeviceLostCallback callback, void * userdata), (override));\n        MOCK_METHOD(void, OnDeviceSetLoggingCallback, (WGPUDevice device, WGPULoggingCallback callback, void * userdata), (override));\n        MOCK_METHOD(void, OnDeviceSetUncapturedErrorCallback, (WGPUDevice device, WGPUErrorCallback callback, void * userdata), (override));\n        MOCK_METHOD(void, ExternalTextureDestroy, (WGPUExternalTexture externalTexture), (override));\n        MOCK_METHOD(void, ExternalTextureExpire, (WGPUExternalTexture externalTexture), (override));\n        MOCK_METHOD(void, ExternalTextureRefresh, (WGPUExternalTexture externalTexture), (override));\n        MOCK_METHOD(void, ExternalTextureSetLabel, (WGPUExternalTexture externalTexture, char const * label), (override));\n\n        MOCK_METHOD(void, ExternalTextureReference, (WGPUExternalTexture self), (override));\n        MOCK_METHOD(void, ExternalTextureRelease, (WGPUExternalTexture self), (override));\n\n        MOCK_METHOD(WGPUSurface, InstanceCreateSurface, (WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor), (override));\n        MOCK_METHOD(void, InstanceProcessEvents, (WGPUInstance instance), (override));\n\n        MOCK_METHOD(void, InstanceReference, (WGPUInstance self), (override));\n        MOCK_METHOD(void, InstanceRelease, (WGPUInstance self), (override));\n\n        MOCK_METHOD(void, OnInstanceRequestAdapter, (WGPUInstance instance, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata), (override));\n        MOCK_METHOD(void, PipelineLayoutSetLabel, (WGPUPipelineLayout pipelineLayout, char const * label), (override));\n\n        MOCK_METHOD(void, PipelineLayoutReference, (WGPUPipelineLayout self), (override));\n        MOCK_METHOD(void, PipelineLayoutRelease, (WGPUPipelineLayout self), (override));\n\n        MOCK_METHOD(void, QuerySetDestroy, (WGPUQuerySet querySet), (override));\n        MOCK_METHOD(uint32_t, QuerySetGetCount, (WGPUQuerySet querySet), (override));\n        MOCK_METHOD(WGPUQueryType, QuerySetGetType, (WGPUQuerySet querySet), (override));\n        MOCK_METHOD(void, QuerySetSetLabel, (WGPUQuerySet querySet, char const * label), (override));\n\n        MOCK_METHOD(void, QuerySetReference, (WGPUQuerySet self), (override));\n        MOCK_METHOD(void, QuerySetRelease, (WGPUQuerySet self), (override));\n\n        MOCK_METHOD(void, QueueCopyExternalTextureForBrowser, (WGPUQueue queue, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options), (override));\n        MOCK_METHOD(void, QueueCopyTextureForBrowser, (WGPUQueue queue, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options), (override));\n        MOCK_METHOD(void, QueueSetLabel, (WGPUQueue queue, char const * label), (override));\n        MOCK_METHOD(void, QueueSubmit, (WGPUQueue queue, size_t commandCount, WGPUCommandBuffer const * commands), (override));\n        MOCK_METHOD(void, QueueWriteBuffer, (WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size), (override));\n        MOCK_METHOD(void, QueueWriteTexture, (WGPUQueue queue, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize), (override));\n\n        MOCK_METHOD(void, QueueReference, (WGPUQueue self), (override));\n        MOCK_METHOD(void, QueueRelease, (WGPUQueue self), (override));\n\n        MOCK_METHOD(void, OnQueueOnSubmittedWorkDone, (WGPUQueue queue, uint64_t signalValue, WGPUQueueWorkDoneCallback callback, void * userdata), (override));\n        MOCK_METHOD(void, RenderBundleSetLabel, (WGPURenderBundle renderBundle, char const * label), (override));\n\n        MOCK_METHOD(void, RenderBundleReference, (WGPURenderBundle self), (override));\n        MOCK_METHOD(void, RenderBundleRelease, (WGPURenderBundle self), (override));\n\n        MOCK_METHOD(void, RenderBundleEncoderDraw, (WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance), (override));\n        MOCK_METHOD(void, RenderBundleEncoderDrawIndexed, (WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance), (override));\n        MOCK_METHOD(void, RenderBundleEncoderDrawIndexedIndirect, (WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset), (override));\n        MOCK_METHOD(void, RenderBundleEncoderDrawIndirect, (WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset), (override));\n        MOCK_METHOD(WGPURenderBundle, RenderBundleEncoderFinish, (WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor const * descriptor), (override));\n        MOCK_METHOD(void, RenderBundleEncoderInsertDebugMarker, (WGPURenderBundleEncoder renderBundleEncoder, char const * markerLabel), (override));\n        MOCK_METHOD(void, RenderBundleEncoderPopDebugGroup, (WGPURenderBundleEncoder renderBundleEncoder), (override));\n        MOCK_METHOD(void, RenderBundleEncoderPushDebugGroup, (WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel), (override));\n        MOCK_METHOD(void, RenderBundleEncoderSetBindGroup, (WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets), (override));\n        MOCK_METHOD(void, RenderBundleEncoderSetIndexBuffer, (WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size), (override));\n        MOCK_METHOD(void, RenderBundleEncoderSetLabel, (WGPURenderBundleEncoder renderBundleEncoder, char const * label), (override));\n        MOCK_METHOD(void, RenderBundleEncoderSetPipeline, (WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline), (override));\n        MOCK_METHOD(void, RenderBundleEncoderSetVertexBuffer, (WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size), (override));\n\n        MOCK_METHOD(void, RenderBundleEncoderReference, (WGPURenderBundleEncoder self), (override));\n        MOCK_METHOD(void, RenderBundleEncoderRelease, (WGPURenderBundleEncoder self), (override));\n\n        MOCK_METHOD(void, RenderPassEncoderBeginOcclusionQuery, (WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex), (override));\n        MOCK_METHOD(void, RenderPassEncoderDraw, (WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance), (override));\n        MOCK_METHOD(void, RenderPassEncoderDrawIndexed, (WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance), (override));\n        MOCK_METHOD(void, RenderPassEncoderDrawIndexedIndirect, (WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset), (override));\n        MOCK_METHOD(void, RenderPassEncoderDrawIndirect, (WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset), (override));\n        MOCK_METHOD(void, RenderPassEncoderEnd, (WGPURenderPassEncoder renderPassEncoder), (override));\n        MOCK_METHOD(void, RenderPassEncoderEndOcclusionQuery, (WGPURenderPassEncoder renderPassEncoder), (override));\n        MOCK_METHOD(void, RenderPassEncoderExecuteBundles, (WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, WGPURenderBundle const * bundles), (override));\n        MOCK_METHOD(void, RenderPassEncoderInsertDebugMarker, (WGPURenderPassEncoder renderPassEncoder, char const * markerLabel), (override));\n        MOCK_METHOD(void, RenderPassEncoderPopDebugGroup, (WGPURenderPassEncoder renderPassEncoder), (override));\n        MOCK_METHOD(void, RenderPassEncoderPushDebugGroup, (WGPURenderPassEncoder renderPassEncoder, char const * groupLabel), (override));\n        MOCK_METHOD(void, RenderPassEncoderSetBindGroup, (WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets), (override));\n        MOCK_METHOD(void, RenderPassEncoderSetBlendConstant, (WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color), (override));\n        MOCK_METHOD(void, RenderPassEncoderSetIndexBuffer, (WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size), (override));\n        MOCK_METHOD(void, RenderPassEncoderSetLabel, (WGPURenderPassEncoder renderPassEncoder, char const * label), (override));\n        MOCK_METHOD(void, RenderPassEncoderSetPipeline, (WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline), (override));\n        MOCK_METHOD(void, RenderPassEncoderSetScissorRect, (WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height), (override));\n        MOCK_METHOD(void, RenderPassEncoderSetStencilReference, (WGPURenderPassEncoder renderPassEncoder, uint32_t reference), (override));\n        MOCK_METHOD(void, RenderPassEncoderSetVertexBuffer, (WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size), (override));\n        MOCK_METHOD(void, RenderPassEncoderSetViewport, (WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth), (override));\n        MOCK_METHOD(void, RenderPassEncoderWriteTimestamp, (WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint32_t queryIndex), (override));\n\n        MOCK_METHOD(void, RenderPassEncoderReference, (WGPURenderPassEncoder self), (override));\n        MOCK_METHOD(void, RenderPassEncoderRelease, (WGPURenderPassEncoder self), (override));\n\n        MOCK_METHOD(WGPUBindGroupLayout, RenderPipelineGetBindGroupLayout, (WGPURenderPipeline renderPipeline, uint32_t groupIndex), (override));\n        MOCK_METHOD(void, RenderPipelineSetLabel, (WGPURenderPipeline renderPipeline, char const * label), (override));\n\n        MOCK_METHOD(void, RenderPipelineReference, (WGPURenderPipeline self), (override));\n        MOCK_METHOD(void, RenderPipelineRelease, (WGPURenderPipeline self), (override));\n\n        MOCK_METHOD(void, SamplerSetLabel, (WGPUSampler sampler, char const * label), (override));\n\n        MOCK_METHOD(void, SamplerReference, (WGPUSampler self), (override));\n        MOCK_METHOD(void, SamplerRelease, (WGPUSampler self), (override));\n\n        MOCK_METHOD(void, ShaderModuleSetLabel, (WGPUShaderModule shaderModule, char const * label), (override));\n\n        MOCK_METHOD(void, ShaderModuleReference, (WGPUShaderModule self), (override));\n        MOCK_METHOD(void, ShaderModuleRelease, (WGPUShaderModule self), (override));\n\n        MOCK_METHOD(void, OnShaderModuleGetCompilationInfo, (WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata), (override));\n        MOCK_METHOD(void, SharedFenceExportInfo, (WGPUSharedFence sharedFence, WGPUSharedFenceExportInfo * info), (override));\n\n        MOCK_METHOD(void, SharedFenceReference, (WGPUSharedFence self), (override));\n        MOCK_METHOD(void, SharedFenceRelease, (WGPUSharedFence self), (override));\n\n        MOCK_METHOD(void, SharedTextureMemoryBeginAccess, (WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryBeginAccessDescriptor const * descriptor), (override));\n        MOCK_METHOD(WGPUTexture, SharedTextureMemoryCreateTexture, (WGPUSharedTextureMemory sharedTextureMemory, WGPUTextureDescriptor const * descriptor), (override));\n        MOCK_METHOD(void, SharedTextureMemoryEndAccess, (WGPUSharedTextureMemory sharedTextureMemory, WGPUTexture texture, WGPUSharedTextureMemoryEndAccessState * descriptor), (override));\n        MOCK_METHOD(void, SharedTextureMemoryGetProperties, (WGPUSharedTextureMemory sharedTextureMemory, WGPUSharedTextureMemoryProperties * properties), (override));\n        MOCK_METHOD(void, SharedTextureMemorySetLabel, (WGPUSharedTextureMemory sharedTextureMemory, char const * label), (override));\n\n        MOCK_METHOD(void, SharedTextureMemoryReference, (WGPUSharedTextureMemory self), (override));\n        MOCK_METHOD(void, SharedTextureMemoryRelease, (WGPUSharedTextureMemory self), (override));\n\n\n        MOCK_METHOD(void, SurfaceReference, (WGPUSurface self), (override));\n        MOCK_METHOD(void, SurfaceRelease, (WGPUSurface self), (override));\n\n        MOCK_METHOD(WGPUTexture, SwapChainGetCurrentTexture, (WGPUSwapChain swapChain), (override));\n        MOCK_METHOD(WGPUTextureView, SwapChainGetCurrentTextureView, (WGPUSwapChain swapChain), (override));\n        MOCK_METHOD(void, SwapChainPresent, (WGPUSwapChain swapChain), (override));\n\n        MOCK_METHOD(void, SwapChainReference, (WGPUSwapChain self), (override));\n        MOCK_METHOD(void, SwapChainRelease, (WGPUSwapChain self), (override));\n\n        MOCK_METHOD(WGPUTextureView, TextureCreateView, (WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor), (override));\n        MOCK_METHOD(void, TextureDestroy, (WGPUTexture texture), (override));\n        MOCK_METHOD(uint32_t, TextureGetDepthOrArrayLayers, (WGPUTexture texture), (override));\n        MOCK_METHOD(WGPUTextureDimension, TextureGetDimension, (WGPUTexture texture), (override));\n        MOCK_METHOD(WGPUTextureFormat, TextureGetFormat, (WGPUTexture texture), (override));\n        MOCK_METHOD(uint32_t, TextureGetHeight, (WGPUTexture texture), (override));\n        MOCK_METHOD(uint32_t, TextureGetMipLevelCount, (WGPUTexture texture), (override));\n        MOCK_METHOD(uint32_t, TextureGetSampleCount, (WGPUTexture texture), (override));\n        MOCK_METHOD(WGPUTextureUsage, TextureGetUsage, (WGPUTexture texture), (override));\n        MOCK_METHOD(uint32_t, TextureGetWidth, (WGPUTexture texture), (override));\n        MOCK_METHOD(void, TextureSetLabel, (WGPUTexture texture, char const * label), (override));\n\n        MOCK_METHOD(void, TextureReference, (WGPUTexture self), (override));\n        MOCK_METHOD(void, TextureRelease, (WGPUTexture self), (override));\n\n        MOCK_METHOD(void, TextureViewSetLabel, (WGPUTextureView textureView, char const * label), (override));\n\n        MOCK_METHOD(void, TextureViewReference, (WGPUTextureView self), (override));\n        MOCK_METHOD(void, TextureViewRelease, (WGPUTextureView self), (override));\n\n};\n\n#endif  // MOCK_WEBGPU_H\n", "src/dawn/mock_webgpu.cpp": "\n#include \"dawn/common/Log.h\"\n#include \"mock_webgpu.h\"\n\nusing namespace testing;\n\nnamespace {\n    WGPUDevice ForwardAdapterCreateDevice(WGPUAdapter self, WGPUDeviceDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->AdapterCreateDevice(self, descriptor);\n    }\n    size_t ForwardAdapterEnumerateFeatures(WGPUAdapter self, WGPUFeatureName * features) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->AdapterEnumerateFeatures(self, features);\n    }\n    WGPUInstance ForwardAdapterGetInstance(WGPUAdapter self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->AdapterGetInstance(self);\n    }\n    WGPUBool ForwardAdapterGetLimits(WGPUAdapter self, WGPUSupportedLimits * limits) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->AdapterGetLimits(self, limits);\n    }\n    void ForwardAdapterGetProperties(WGPUAdapter self, WGPUAdapterProperties * properties) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->AdapterGetProperties(self, properties);\n    }\n    WGPUBool ForwardAdapterHasFeature(WGPUAdapter self, WGPUFeatureName feature) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->AdapterHasFeature(self, feature);\n    }\n    void ForwardAdapterRequestDevice(WGPUAdapter self, WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->AdapterRequestDevice(self, descriptor, callback, userdata);\n    }\n    void ForwardAdapterReference(WGPUAdapter self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->AdapterReference(self);\n    }\n    void ForwardAdapterRelease(WGPUAdapter self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->AdapterRelease(self);\n    }\n\n    void ForwardBindGroupSetLabel(WGPUBindGroup self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BindGroupSetLabel(self, label);\n    }\n    void ForwardBindGroupReference(WGPUBindGroup self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BindGroupReference(self);\n    }\n    void ForwardBindGroupRelease(WGPUBindGroup self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BindGroupRelease(self);\n    }\n\n    void ForwardBindGroupLayoutSetLabel(WGPUBindGroupLayout self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BindGroupLayoutSetLabel(self, label);\n    }\n    void ForwardBindGroupLayoutReference(WGPUBindGroupLayout self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BindGroupLayoutReference(self);\n    }\n    void ForwardBindGroupLayoutRelease(WGPUBindGroupLayout self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BindGroupLayoutRelease(self);\n    }\n\n    void ForwardBufferDestroy(WGPUBuffer self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BufferDestroy(self);\n    }\n    void const * ForwardBufferGetConstMappedRange(WGPUBuffer self, size_t offset, size_t size) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BufferGetConstMappedRange(self, offset, size);\n    }\n    WGPUBufferMapState ForwardBufferGetMapState(WGPUBuffer self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BufferGetMapState(self);\n    }\n    void * ForwardBufferGetMappedRange(WGPUBuffer self, size_t offset, size_t size) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BufferGetMappedRange(self, offset, size);\n    }\n    uint64_t ForwardBufferGetSize(WGPUBuffer self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BufferGetSize(self);\n    }\n    WGPUBufferUsage ForwardBufferGetUsage(WGPUBuffer self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BufferGetUsage(self);\n    }\n    void ForwardBufferMapAsync(WGPUBuffer self, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BufferMapAsync(self, mode, offset, size, callback, userdata);\n    }\n    void ForwardBufferSetLabel(WGPUBuffer self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BufferSetLabel(self, label);\n    }\n    void ForwardBufferUnmap(WGPUBuffer self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BufferUnmap(self);\n    }\n    void ForwardBufferReference(WGPUBuffer self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BufferReference(self);\n    }\n    void ForwardBufferRelease(WGPUBuffer self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->BufferRelease(self);\n    }\n\n    void ForwardCommandBufferSetLabel(WGPUCommandBuffer self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandBufferSetLabel(self, label);\n    }\n    void ForwardCommandBufferReference(WGPUCommandBuffer self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandBufferReference(self);\n    }\n    void ForwardCommandBufferRelease(WGPUCommandBuffer self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandBufferRelease(self);\n    }\n\n    WGPUComputePassEncoder ForwardCommandEncoderBeginComputePass(WGPUCommandEncoder self, WGPUComputePassDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderBeginComputePass(self, descriptor);\n    }\n    WGPURenderPassEncoder ForwardCommandEncoderBeginRenderPass(WGPUCommandEncoder self, WGPURenderPassDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderBeginRenderPass(self, descriptor);\n    }\n    void ForwardCommandEncoderClearBuffer(WGPUCommandEncoder self, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderClearBuffer(self, buffer, offset, size);\n    }\n    void ForwardCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder self, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderCopyBufferToBuffer(self, source, sourceOffset, destination, destinationOffset, size);\n    }\n    void ForwardCommandEncoderCopyBufferToTexture(WGPUCommandEncoder self, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderCopyBufferToTexture(self, source, destination, copySize);\n    }\n    void ForwardCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder self, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderCopyTextureToBuffer(self, source, destination, copySize);\n    }\n    void ForwardCommandEncoderCopyTextureToTexture(WGPUCommandEncoder self, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderCopyTextureToTexture(self, source, destination, copySize);\n    }\n    WGPUCommandBuffer ForwardCommandEncoderFinish(WGPUCommandEncoder self, WGPUCommandBufferDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderFinish(self, descriptor);\n    }\n    void ForwardCommandEncoderInjectValidationError(WGPUCommandEncoder self, char const * message) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderInjectValidationError(self, message);\n    }\n    void ForwardCommandEncoderInsertDebugMarker(WGPUCommandEncoder self, char const * markerLabel) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderInsertDebugMarker(self, markerLabel);\n    }\n    void ForwardCommandEncoderPopDebugGroup(WGPUCommandEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderPopDebugGroup(self);\n    }\n    void ForwardCommandEncoderPushDebugGroup(WGPUCommandEncoder self, char const * groupLabel) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderPushDebugGroup(self, groupLabel);\n    }\n    void ForwardCommandEncoderResolveQuerySet(WGPUCommandEncoder self, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderResolveQuerySet(self, querySet, firstQuery, queryCount, destination, destinationOffset);\n    }\n    void ForwardCommandEncoderSetLabel(WGPUCommandEncoder self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderSetLabel(self, label);\n    }\n    void ForwardCommandEncoderWriteBuffer(WGPUCommandEncoder self, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderWriteBuffer(self, buffer, bufferOffset, data, size);\n    }\n    void ForwardCommandEncoderWriteTimestamp(WGPUCommandEncoder self, WGPUQuerySet querySet, uint32_t queryIndex) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderWriteTimestamp(self, querySet, queryIndex);\n    }\n    void ForwardCommandEncoderReference(WGPUCommandEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderReference(self);\n    }\n    void ForwardCommandEncoderRelease(WGPUCommandEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->CommandEncoderRelease(self);\n    }\n\n    void ForwardComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder self, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePassEncoderDispatchWorkgroups(self, workgroupCountX, workgroupCountY, workgroupCountZ);\n    }\n    void ForwardComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder self, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePassEncoderDispatchWorkgroupsIndirect(self, indirectBuffer, indirectOffset);\n    }\n    void ForwardComputePassEncoderEnd(WGPUComputePassEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePassEncoderEnd(self);\n    }\n    void ForwardComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder self, char const * markerLabel) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePassEncoderInsertDebugMarker(self, markerLabel);\n    }\n    void ForwardComputePassEncoderPopDebugGroup(WGPUComputePassEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePassEncoderPopDebugGroup(self);\n    }\n    void ForwardComputePassEncoderPushDebugGroup(WGPUComputePassEncoder self, char const * groupLabel) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePassEncoderPushDebugGroup(self, groupLabel);\n    }\n    void ForwardComputePassEncoderSetBindGroup(WGPUComputePassEncoder self, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePassEncoderSetBindGroup(self, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n    }\n    void ForwardComputePassEncoderSetLabel(WGPUComputePassEncoder self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePassEncoderSetLabel(self, label);\n    }\n    void ForwardComputePassEncoderSetPipeline(WGPUComputePassEncoder self, WGPUComputePipeline pipeline) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePassEncoderSetPipeline(self, pipeline);\n    }\n    void ForwardComputePassEncoderWriteTimestamp(WGPUComputePassEncoder self, WGPUQuerySet querySet, uint32_t queryIndex) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePassEncoderWriteTimestamp(self, querySet, queryIndex);\n    }\n    void ForwardComputePassEncoderReference(WGPUComputePassEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePassEncoderReference(self);\n    }\n    void ForwardComputePassEncoderRelease(WGPUComputePassEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePassEncoderRelease(self);\n    }\n\n    WGPUBindGroupLayout ForwardComputePipelineGetBindGroupLayout(WGPUComputePipeline self, uint32_t groupIndex) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePipelineGetBindGroupLayout(self, groupIndex);\n    }\n    void ForwardComputePipelineSetLabel(WGPUComputePipeline self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePipelineSetLabel(self, label);\n    }\n    void ForwardComputePipelineReference(WGPUComputePipeline self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePipelineReference(self);\n    }\n    void ForwardComputePipelineRelease(WGPUComputePipeline self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ComputePipelineRelease(self);\n    }\n\n    WGPUBindGroup ForwardDeviceCreateBindGroup(WGPUDevice self, WGPUBindGroupDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateBindGroup(self, descriptor);\n    }\n    WGPUBindGroupLayout ForwardDeviceCreateBindGroupLayout(WGPUDevice self, WGPUBindGroupLayoutDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateBindGroupLayout(self, descriptor);\n    }\n    WGPUBuffer ForwardDeviceCreateBuffer(WGPUDevice self, WGPUBufferDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateBuffer(self, descriptor);\n    }\n    WGPUCommandEncoder ForwardDeviceCreateCommandEncoder(WGPUDevice self, WGPUCommandEncoderDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateCommandEncoder(self, descriptor);\n    }\n    WGPUComputePipeline ForwardDeviceCreateComputePipeline(WGPUDevice self, WGPUComputePipelineDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateComputePipeline(self, descriptor);\n    }\n    void ForwardDeviceCreateComputePipelineAsync(WGPUDevice self, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateComputePipelineAsync(self, descriptor, callback, userdata);\n    }\n    WGPUBuffer ForwardDeviceCreateErrorBuffer(WGPUDevice self, WGPUBufferDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateErrorBuffer(self, descriptor);\n    }\n    WGPUExternalTexture ForwardDeviceCreateErrorExternalTexture(WGPUDevice self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateErrorExternalTexture(self);\n    }\n    WGPUShaderModule ForwardDeviceCreateErrorShaderModule(WGPUDevice self, WGPUShaderModuleDescriptor const * descriptor, char const * errorMessage) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateErrorShaderModule(self, descriptor, errorMessage);\n    }\n    WGPUTexture ForwardDeviceCreateErrorTexture(WGPUDevice self, WGPUTextureDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateErrorTexture(self, descriptor);\n    }\n    WGPUExternalTexture ForwardDeviceCreateExternalTexture(WGPUDevice self, WGPUExternalTextureDescriptor const * externalTextureDescriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateExternalTexture(self, externalTextureDescriptor);\n    }\n    WGPUPipelineLayout ForwardDeviceCreatePipelineLayout(WGPUDevice self, WGPUPipelineLayoutDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreatePipelineLayout(self, descriptor);\n    }\n    WGPUQuerySet ForwardDeviceCreateQuerySet(WGPUDevice self, WGPUQuerySetDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateQuerySet(self, descriptor);\n    }\n    WGPURenderBundleEncoder ForwardDeviceCreateRenderBundleEncoder(WGPUDevice self, WGPURenderBundleEncoderDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateRenderBundleEncoder(self, descriptor);\n    }\n    WGPURenderPipeline ForwardDeviceCreateRenderPipeline(WGPUDevice self, WGPURenderPipelineDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateRenderPipeline(self, descriptor);\n    }\n    void ForwardDeviceCreateRenderPipelineAsync(WGPUDevice self, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateRenderPipelineAsync(self, descriptor, callback, userdata);\n    }\n    WGPUSampler ForwardDeviceCreateSampler(WGPUDevice self, WGPUSamplerDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateSampler(self, descriptor);\n    }\n    WGPUShaderModule ForwardDeviceCreateShaderModule(WGPUDevice self, WGPUShaderModuleDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateShaderModule(self, descriptor);\n    }\n    WGPUSwapChain ForwardDeviceCreateSwapChain(WGPUDevice self, WGPUSurface surface, WGPUSwapChainDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateSwapChain(self, surface, descriptor);\n    }\n    WGPUTexture ForwardDeviceCreateTexture(WGPUDevice self, WGPUTextureDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceCreateTexture(self, descriptor);\n    }\n    void ForwardDeviceDestroy(WGPUDevice self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceDestroy(self);\n    }\n    size_t ForwardDeviceEnumerateFeatures(WGPUDevice self, WGPUFeatureName * features) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceEnumerateFeatures(self, features);\n    }\n    void ForwardDeviceForceLoss(WGPUDevice self, WGPUDeviceLostReason type, char const * message) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceForceLoss(self, type, message);\n    }\n    WGPUAdapter ForwardDeviceGetAdapter(WGPUDevice self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceGetAdapter(self);\n    }\n    WGPUBool ForwardDeviceGetLimits(WGPUDevice self, WGPUSupportedLimits * limits) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceGetLimits(self, limits);\n    }\n    WGPUQueue ForwardDeviceGetQueue(WGPUDevice self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceGetQueue(self);\n    }\n    WGPUTextureUsage ForwardDeviceGetSupportedSurfaceUsage(WGPUDevice self, WGPUSurface surface) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceGetSupportedSurfaceUsage(self, surface);\n    }\n    WGPUBool ForwardDeviceHasFeature(WGPUDevice self, WGPUFeatureName feature) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceHasFeature(self, feature);\n    }\n    WGPUSharedFence ForwardDeviceImportSharedFence(WGPUDevice self, WGPUSharedFenceDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceImportSharedFence(self, descriptor);\n    }\n    WGPUSharedTextureMemory ForwardDeviceImportSharedTextureMemory(WGPUDevice self, WGPUSharedTextureMemoryDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceImportSharedTextureMemory(self, descriptor);\n    }\n    void ForwardDeviceInjectError(WGPUDevice self, WGPUErrorType type, char const * message) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceInjectError(self, type, message);\n    }\n    void ForwardDevicePopErrorScope(WGPUDevice self, WGPUErrorCallback callback, void * userdata) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DevicePopErrorScope(self, callback, userdata);\n    }\n    void ForwardDevicePushErrorScope(WGPUDevice self, WGPUErrorFilter filter) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DevicePushErrorScope(self, filter);\n    }\n    void ForwardDeviceSetDeviceLostCallback(WGPUDevice self, WGPUDeviceLostCallback callback, void * userdata) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceSetDeviceLostCallback(self, callback, userdata);\n    }\n    void ForwardDeviceSetLabel(WGPUDevice self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceSetLabel(self, label);\n    }\n    void ForwardDeviceSetLoggingCallback(WGPUDevice self, WGPULoggingCallback callback, void * userdata) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceSetLoggingCallback(self, callback, userdata);\n    }\n    void ForwardDeviceSetUncapturedErrorCallback(WGPUDevice self, WGPUErrorCallback callback, void * userdata) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceSetUncapturedErrorCallback(self, callback, userdata);\n    }\n    void ForwardDeviceTick(WGPUDevice self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceTick(self);\n    }\n    void ForwardDeviceValidateTextureDescriptor(WGPUDevice self, WGPUTextureDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceValidateTextureDescriptor(self, descriptor);\n    }\n    void ForwardDeviceReference(WGPUDevice self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceReference(self);\n    }\n    void ForwardDeviceRelease(WGPUDevice self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->DeviceRelease(self);\n    }\n\n    void ForwardExternalTextureDestroy(WGPUExternalTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ExternalTextureDestroy(self);\n    }\n    void ForwardExternalTextureExpire(WGPUExternalTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ExternalTextureExpire(self);\n    }\n    void ForwardExternalTextureRefresh(WGPUExternalTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ExternalTextureRefresh(self);\n    }\n    void ForwardExternalTextureSetLabel(WGPUExternalTexture self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ExternalTextureSetLabel(self, label);\n    }\n    void ForwardExternalTextureReference(WGPUExternalTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ExternalTextureReference(self);\n    }\n    void ForwardExternalTextureRelease(WGPUExternalTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ExternalTextureRelease(self);\n    }\n\n    WGPUSurface ForwardInstanceCreateSurface(WGPUInstance self, WGPUSurfaceDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->InstanceCreateSurface(self, descriptor);\n    }\n    void ForwardInstanceProcessEvents(WGPUInstance self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->InstanceProcessEvents(self);\n    }\n    void ForwardInstanceRequestAdapter(WGPUInstance self, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->InstanceRequestAdapter(self, options, callback, userdata);\n    }\n    void ForwardInstanceReference(WGPUInstance self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->InstanceReference(self);\n    }\n    void ForwardInstanceRelease(WGPUInstance self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->InstanceRelease(self);\n    }\n\n    void ForwardPipelineLayoutSetLabel(WGPUPipelineLayout self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->PipelineLayoutSetLabel(self, label);\n    }\n    void ForwardPipelineLayoutReference(WGPUPipelineLayout self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->PipelineLayoutReference(self);\n    }\n    void ForwardPipelineLayoutRelease(WGPUPipelineLayout self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->PipelineLayoutRelease(self);\n    }\n\n    void ForwardQuerySetDestroy(WGPUQuerySet self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QuerySetDestroy(self);\n    }\n    uint32_t ForwardQuerySetGetCount(WGPUQuerySet self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QuerySetGetCount(self);\n    }\n    WGPUQueryType ForwardQuerySetGetType(WGPUQuerySet self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QuerySetGetType(self);\n    }\n    void ForwardQuerySetSetLabel(WGPUQuerySet self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QuerySetSetLabel(self, label);\n    }\n    void ForwardQuerySetReference(WGPUQuerySet self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QuerySetReference(self);\n    }\n    void ForwardQuerySetRelease(WGPUQuerySet self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QuerySetRelease(self);\n    }\n\n    void ForwardQueueCopyExternalTextureForBrowser(WGPUQueue self, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QueueCopyExternalTextureForBrowser(self, source, destination, copySize, options);\n    }\n    void ForwardQueueCopyTextureForBrowser(WGPUQueue self, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QueueCopyTextureForBrowser(self, source, destination, copySize, options);\n    }\n    void ForwardQueueOnSubmittedWorkDone(WGPUQueue self, uint64_t signalValue, WGPUQueueWorkDoneCallback callback, void * userdata) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QueueOnSubmittedWorkDone(self, signalValue, callback, userdata);\n    }\n    void ForwardQueueSetLabel(WGPUQueue self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QueueSetLabel(self, label);\n    }\n    void ForwardQueueSubmit(WGPUQueue self, size_t commandCount, WGPUCommandBuffer const * commands) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QueueSubmit(self, commandCount, commands);\n    }\n    void ForwardQueueWriteBuffer(WGPUQueue self, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QueueWriteBuffer(self, buffer, bufferOffset, data, size);\n    }\n    void ForwardQueueWriteTexture(WGPUQueue self, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QueueWriteTexture(self, destination, data, dataSize, dataLayout, writeSize);\n    }\n    void ForwardQueueReference(WGPUQueue self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QueueReference(self);\n    }\n    void ForwardQueueRelease(WGPUQueue self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->QueueRelease(self);\n    }\n\n    void ForwardRenderBundleSetLabel(WGPURenderBundle self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleSetLabel(self, label);\n    }\n    void ForwardRenderBundleReference(WGPURenderBundle self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleReference(self);\n    }\n    void ForwardRenderBundleRelease(WGPURenderBundle self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleRelease(self);\n    }\n\n    void ForwardRenderBundleEncoderDraw(WGPURenderBundleEncoder self, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderDraw(self, vertexCount, instanceCount, firstVertex, firstInstance);\n    }\n    void ForwardRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder self, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderDrawIndexed(self, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n    }\n    void ForwardRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder self, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderDrawIndexedIndirect(self, indirectBuffer, indirectOffset);\n    }\n    void ForwardRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder self, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderDrawIndirect(self, indirectBuffer, indirectOffset);\n    }\n    WGPURenderBundle ForwardRenderBundleEncoderFinish(WGPURenderBundleEncoder self, WGPURenderBundleDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderFinish(self, descriptor);\n    }\n    void ForwardRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder self, char const * markerLabel) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderInsertDebugMarker(self, markerLabel);\n    }\n    void ForwardRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderPopDebugGroup(self);\n    }\n    void ForwardRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder self, char const * groupLabel) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderPushDebugGroup(self, groupLabel);\n    }\n    void ForwardRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder self, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderSetBindGroup(self, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n    }\n    void ForwardRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder self, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderSetIndexBuffer(self, buffer, format, offset, size);\n    }\n    void ForwardRenderBundleEncoderSetLabel(WGPURenderBundleEncoder self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderSetLabel(self, label);\n    }\n    void ForwardRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder self, WGPURenderPipeline pipeline) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderSetPipeline(self, pipeline);\n    }\n    void ForwardRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder self, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderSetVertexBuffer(self, slot, buffer, offset, size);\n    }\n    void ForwardRenderBundleEncoderReference(WGPURenderBundleEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderReference(self);\n    }\n    void ForwardRenderBundleEncoderRelease(WGPURenderBundleEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderBundleEncoderRelease(self);\n    }\n\n    void ForwardRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder self, uint32_t queryIndex) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderBeginOcclusionQuery(self, queryIndex);\n    }\n    void ForwardRenderPassEncoderDraw(WGPURenderPassEncoder self, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderDraw(self, vertexCount, instanceCount, firstVertex, firstInstance);\n    }\n    void ForwardRenderPassEncoderDrawIndexed(WGPURenderPassEncoder self, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderDrawIndexed(self, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n    }\n    void ForwardRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder self, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderDrawIndexedIndirect(self, indirectBuffer, indirectOffset);\n    }\n    void ForwardRenderPassEncoderDrawIndirect(WGPURenderPassEncoder self, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderDrawIndirect(self, indirectBuffer, indirectOffset);\n    }\n    void ForwardRenderPassEncoderEnd(WGPURenderPassEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderEnd(self);\n    }\n    void ForwardRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderEndOcclusionQuery(self);\n    }\n    void ForwardRenderPassEncoderExecuteBundles(WGPURenderPassEncoder self, size_t bundleCount, WGPURenderBundle const * bundles) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderExecuteBundles(self, bundleCount, bundles);\n    }\n    void ForwardRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder self, char const * markerLabel) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderInsertDebugMarker(self, markerLabel);\n    }\n    void ForwardRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderPopDebugGroup(self);\n    }\n    void ForwardRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder self, char const * groupLabel) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderPushDebugGroup(self, groupLabel);\n    }\n    void ForwardRenderPassEncoderSetBindGroup(WGPURenderPassEncoder self, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderSetBindGroup(self, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n    }\n    void ForwardRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder self, WGPUColor const * color) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderSetBlendConstant(self, color);\n    }\n    void ForwardRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder self, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderSetIndexBuffer(self, buffer, format, offset, size);\n    }\n    void ForwardRenderPassEncoderSetLabel(WGPURenderPassEncoder self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderSetLabel(self, label);\n    }\n    void ForwardRenderPassEncoderSetPipeline(WGPURenderPassEncoder self, WGPURenderPipeline pipeline) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderSetPipeline(self, pipeline);\n    }\n    void ForwardRenderPassEncoderSetScissorRect(WGPURenderPassEncoder self, uint32_t x, uint32_t y, uint32_t width, uint32_t height) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderSetScissorRect(self, x, y, width, height);\n    }\n    void ForwardRenderPassEncoderSetStencilReference(WGPURenderPassEncoder self, uint32_t reference) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderSetStencilReference(self, reference);\n    }\n    void ForwardRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder self, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderSetVertexBuffer(self, slot, buffer, offset, size);\n    }\n    void ForwardRenderPassEncoderSetViewport(WGPURenderPassEncoder self, float x, float y, float width, float height, float minDepth, float maxDepth) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderSetViewport(self, x, y, width, height, minDepth, maxDepth);\n    }\n    void ForwardRenderPassEncoderWriteTimestamp(WGPURenderPassEncoder self, WGPUQuerySet querySet, uint32_t queryIndex) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderWriteTimestamp(self, querySet, queryIndex);\n    }\n    void ForwardRenderPassEncoderReference(WGPURenderPassEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderReference(self);\n    }\n    void ForwardRenderPassEncoderRelease(WGPURenderPassEncoder self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPassEncoderRelease(self);\n    }\n\n    WGPUBindGroupLayout ForwardRenderPipelineGetBindGroupLayout(WGPURenderPipeline self, uint32_t groupIndex) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPipelineGetBindGroupLayout(self, groupIndex);\n    }\n    void ForwardRenderPipelineSetLabel(WGPURenderPipeline self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPipelineSetLabel(self, label);\n    }\n    void ForwardRenderPipelineReference(WGPURenderPipeline self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPipelineReference(self);\n    }\n    void ForwardRenderPipelineRelease(WGPURenderPipeline self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->RenderPipelineRelease(self);\n    }\n\n    void ForwardSamplerSetLabel(WGPUSampler self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SamplerSetLabel(self, label);\n    }\n    void ForwardSamplerReference(WGPUSampler self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SamplerReference(self);\n    }\n    void ForwardSamplerRelease(WGPUSampler self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SamplerRelease(self);\n    }\n\n    void ForwardShaderModuleGetCompilationInfo(WGPUShaderModule self, WGPUCompilationInfoCallback callback, void * userdata) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ShaderModuleGetCompilationInfo(self, callback, userdata);\n    }\n    void ForwardShaderModuleSetLabel(WGPUShaderModule self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ShaderModuleSetLabel(self, label);\n    }\n    void ForwardShaderModuleReference(WGPUShaderModule self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ShaderModuleReference(self);\n    }\n    void ForwardShaderModuleRelease(WGPUShaderModule self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->ShaderModuleRelease(self);\n    }\n\n    void ForwardSharedFenceExportInfo(WGPUSharedFence self, WGPUSharedFenceExportInfo * info) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SharedFenceExportInfo(self, info);\n    }\n    void ForwardSharedFenceReference(WGPUSharedFence self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SharedFenceReference(self);\n    }\n    void ForwardSharedFenceRelease(WGPUSharedFence self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SharedFenceRelease(self);\n    }\n\n    void ForwardSharedTextureMemoryBeginAccess(WGPUSharedTextureMemory self, WGPUTexture texture, WGPUSharedTextureMemoryBeginAccessDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SharedTextureMemoryBeginAccess(self, texture, descriptor);\n    }\n    WGPUTexture ForwardSharedTextureMemoryCreateTexture(WGPUSharedTextureMemory self, WGPUTextureDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SharedTextureMemoryCreateTexture(self, descriptor);\n    }\n    void ForwardSharedTextureMemoryEndAccess(WGPUSharedTextureMemory self, WGPUTexture texture, WGPUSharedTextureMemoryEndAccessState * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SharedTextureMemoryEndAccess(self, texture, descriptor);\n    }\n    void ForwardSharedTextureMemoryGetProperties(WGPUSharedTextureMemory self, WGPUSharedTextureMemoryProperties * properties) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SharedTextureMemoryGetProperties(self, properties);\n    }\n    void ForwardSharedTextureMemorySetLabel(WGPUSharedTextureMemory self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SharedTextureMemorySetLabel(self, label);\n    }\n    void ForwardSharedTextureMemoryReference(WGPUSharedTextureMemory self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SharedTextureMemoryReference(self);\n    }\n    void ForwardSharedTextureMemoryRelease(WGPUSharedTextureMemory self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SharedTextureMemoryRelease(self);\n    }\n\n    void ForwardSurfaceReference(WGPUSurface self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SurfaceReference(self);\n    }\n    void ForwardSurfaceRelease(WGPUSurface self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SurfaceRelease(self);\n    }\n\n    WGPUTexture ForwardSwapChainGetCurrentTexture(WGPUSwapChain self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SwapChainGetCurrentTexture(self);\n    }\n    WGPUTextureView ForwardSwapChainGetCurrentTextureView(WGPUSwapChain self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SwapChainGetCurrentTextureView(self);\n    }\n    void ForwardSwapChainPresent(WGPUSwapChain self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SwapChainPresent(self);\n    }\n    void ForwardSwapChainReference(WGPUSwapChain self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SwapChainReference(self);\n    }\n    void ForwardSwapChainRelease(WGPUSwapChain self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->SwapChainRelease(self);\n    }\n\n    WGPUTextureView ForwardTextureCreateView(WGPUTexture self, WGPUTextureViewDescriptor const * descriptor) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureCreateView(self, descriptor);\n    }\n    void ForwardTextureDestroy(WGPUTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureDestroy(self);\n    }\n    uint32_t ForwardTextureGetDepthOrArrayLayers(WGPUTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureGetDepthOrArrayLayers(self);\n    }\n    WGPUTextureDimension ForwardTextureGetDimension(WGPUTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureGetDimension(self);\n    }\n    WGPUTextureFormat ForwardTextureGetFormat(WGPUTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureGetFormat(self);\n    }\n    uint32_t ForwardTextureGetHeight(WGPUTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureGetHeight(self);\n    }\n    uint32_t ForwardTextureGetMipLevelCount(WGPUTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureGetMipLevelCount(self);\n    }\n    uint32_t ForwardTextureGetSampleCount(WGPUTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureGetSampleCount(self);\n    }\n    WGPUTextureUsage ForwardTextureGetUsage(WGPUTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureGetUsage(self);\n    }\n    uint32_t ForwardTextureGetWidth(WGPUTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureGetWidth(self);\n    }\n    void ForwardTextureSetLabel(WGPUTexture self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureSetLabel(self, label);\n    }\n    void ForwardTextureReference(WGPUTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureReference(self);\n    }\n    void ForwardTextureRelease(WGPUTexture self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureRelease(self);\n    }\n\n    void ForwardTextureViewSetLabel(WGPUTextureView self, char const * label) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureViewSetLabel(self, label);\n    }\n    void ForwardTextureViewReference(WGPUTextureView self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureViewReference(self);\n    }\n    void ForwardTextureViewRelease(WGPUTextureView self) {\n        auto object = reinterpret_cast<ProcTableAsClass::Object*>(self);\n        return object->procs->TextureViewRelease(self);\n    }\n\n}\n\nProcTableAsClass::~ProcTableAsClass() {\n}\n\nvoid ProcTableAsClass::GetProcTable(DawnProcTable* table) {\n    table->adapterCreateDevice = reinterpret_cast<WGPUProcAdapterCreateDevice>(ForwardAdapterCreateDevice);\n    table->adapterEnumerateFeatures = reinterpret_cast<WGPUProcAdapterEnumerateFeatures>(ForwardAdapterEnumerateFeatures);\n    table->adapterGetInstance = reinterpret_cast<WGPUProcAdapterGetInstance>(ForwardAdapterGetInstance);\n    table->adapterGetLimits = reinterpret_cast<WGPUProcAdapterGetLimits>(ForwardAdapterGetLimits);\n    table->adapterGetProperties = reinterpret_cast<WGPUProcAdapterGetProperties>(ForwardAdapterGetProperties);\n    table->adapterHasFeature = reinterpret_cast<WGPUProcAdapterHasFeature>(ForwardAdapterHasFeature);\n    table->adapterRequestDevice = reinterpret_cast<WGPUProcAdapterRequestDevice>(ForwardAdapterRequestDevice);\n    table->adapterReference = reinterpret_cast<WGPUProcAdapterReference>(ForwardAdapterReference);\n    table->adapterRelease = reinterpret_cast<WGPUProcAdapterRelease>(ForwardAdapterRelease);\n    table->bindGroupSetLabel = reinterpret_cast<WGPUProcBindGroupSetLabel>(ForwardBindGroupSetLabel);\n    table->bindGroupReference = reinterpret_cast<WGPUProcBindGroupReference>(ForwardBindGroupReference);\n    table->bindGroupRelease = reinterpret_cast<WGPUProcBindGroupRelease>(ForwardBindGroupRelease);\n    table->bindGroupLayoutSetLabel = reinterpret_cast<WGPUProcBindGroupLayoutSetLabel>(ForwardBindGroupLayoutSetLabel);\n    table->bindGroupLayoutReference = reinterpret_cast<WGPUProcBindGroupLayoutReference>(ForwardBindGroupLayoutReference);\n    table->bindGroupLayoutRelease = reinterpret_cast<WGPUProcBindGroupLayoutRelease>(ForwardBindGroupLayoutRelease);\n    table->bufferDestroy = reinterpret_cast<WGPUProcBufferDestroy>(ForwardBufferDestroy);\n    table->bufferGetConstMappedRange = reinterpret_cast<WGPUProcBufferGetConstMappedRange>(ForwardBufferGetConstMappedRange);\n    table->bufferGetMapState = reinterpret_cast<WGPUProcBufferGetMapState>(ForwardBufferGetMapState);\n    table->bufferGetMappedRange = reinterpret_cast<WGPUProcBufferGetMappedRange>(ForwardBufferGetMappedRange);\n    table->bufferGetSize = reinterpret_cast<WGPUProcBufferGetSize>(ForwardBufferGetSize);\n    table->bufferGetUsage = reinterpret_cast<WGPUProcBufferGetUsage>(ForwardBufferGetUsage);\n    table->bufferMapAsync = reinterpret_cast<WGPUProcBufferMapAsync>(ForwardBufferMapAsync);\n    table->bufferSetLabel = reinterpret_cast<WGPUProcBufferSetLabel>(ForwardBufferSetLabel);\n    table->bufferUnmap = reinterpret_cast<WGPUProcBufferUnmap>(ForwardBufferUnmap);\n    table->bufferReference = reinterpret_cast<WGPUProcBufferReference>(ForwardBufferReference);\n    table->bufferRelease = reinterpret_cast<WGPUProcBufferRelease>(ForwardBufferRelease);\n    table->commandBufferSetLabel = reinterpret_cast<WGPUProcCommandBufferSetLabel>(ForwardCommandBufferSetLabel);\n    table->commandBufferReference = reinterpret_cast<WGPUProcCommandBufferReference>(ForwardCommandBufferReference);\n    table->commandBufferRelease = reinterpret_cast<WGPUProcCommandBufferRelease>(ForwardCommandBufferRelease);\n    table->commandEncoderBeginComputePass = reinterpret_cast<WGPUProcCommandEncoderBeginComputePass>(ForwardCommandEncoderBeginComputePass);\n    table->commandEncoderBeginRenderPass = reinterpret_cast<WGPUProcCommandEncoderBeginRenderPass>(ForwardCommandEncoderBeginRenderPass);\n    table->commandEncoderClearBuffer = reinterpret_cast<WGPUProcCommandEncoderClearBuffer>(ForwardCommandEncoderClearBuffer);\n    table->commandEncoderCopyBufferToBuffer = reinterpret_cast<WGPUProcCommandEncoderCopyBufferToBuffer>(ForwardCommandEncoderCopyBufferToBuffer);\n    table->commandEncoderCopyBufferToTexture = reinterpret_cast<WGPUProcCommandEncoderCopyBufferToTexture>(ForwardCommandEncoderCopyBufferToTexture);\n    table->commandEncoderCopyTextureToBuffer = reinterpret_cast<WGPUProcCommandEncoderCopyTextureToBuffer>(ForwardCommandEncoderCopyTextureToBuffer);\n    table->commandEncoderCopyTextureToTexture = reinterpret_cast<WGPUProcCommandEncoderCopyTextureToTexture>(ForwardCommandEncoderCopyTextureToTexture);\n    table->commandEncoderFinish = reinterpret_cast<WGPUProcCommandEncoderFinish>(ForwardCommandEncoderFinish);\n    table->commandEncoderInjectValidationError = reinterpret_cast<WGPUProcCommandEncoderInjectValidationError>(ForwardCommandEncoderInjectValidationError);\n    table->commandEncoderInsertDebugMarker = reinterpret_cast<WGPUProcCommandEncoderInsertDebugMarker>(ForwardCommandEncoderInsertDebugMarker);\n    table->commandEncoderPopDebugGroup = reinterpret_cast<WGPUProcCommandEncoderPopDebugGroup>(ForwardCommandEncoderPopDebugGroup);\n    table->commandEncoderPushDebugGroup = reinterpret_cast<WGPUProcCommandEncoderPushDebugGroup>(ForwardCommandEncoderPushDebugGroup);\n    table->commandEncoderResolveQuerySet = reinterpret_cast<WGPUProcCommandEncoderResolveQuerySet>(ForwardCommandEncoderResolveQuerySet);\n    table->commandEncoderSetLabel = reinterpret_cast<WGPUProcCommandEncoderSetLabel>(ForwardCommandEncoderSetLabel);\n    table->commandEncoderWriteBuffer = reinterpret_cast<WGPUProcCommandEncoderWriteBuffer>(ForwardCommandEncoderWriteBuffer);\n    table->commandEncoderWriteTimestamp = reinterpret_cast<WGPUProcCommandEncoderWriteTimestamp>(ForwardCommandEncoderWriteTimestamp);\n    table->commandEncoderReference = reinterpret_cast<WGPUProcCommandEncoderReference>(ForwardCommandEncoderReference);\n    table->commandEncoderRelease = reinterpret_cast<WGPUProcCommandEncoderRelease>(ForwardCommandEncoderRelease);\n    table->computePassEncoderDispatchWorkgroups = reinterpret_cast<WGPUProcComputePassEncoderDispatchWorkgroups>(ForwardComputePassEncoderDispatchWorkgroups);\n    table->computePassEncoderDispatchWorkgroupsIndirect = reinterpret_cast<WGPUProcComputePassEncoderDispatchWorkgroupsIndirect>(ForwardComputePassEncoderDispatchWorkgroupsIndirect);\n    table->computePassEncoderEnd = reinterpret_cast<WGPUProcComputePassEncoderEnd>(ForwardComputePassEncoderEnd);\n    table->computePassEncoderInsertDebugMarker = reinterpret_cast<WGPUProcComputePassEncoderInsertDebugMarker>(ForwardComputePassEncoderInsertDebugMarker);\n    table->computePassEncoderPopDebugGroup = reinterpret_cast<WGPUProcComputePassEncoderPopDebugGroup>(ForwardComputePassEncoderPopDebugGroup);\n    table->computePassEncoderPushDebugGroup = reinterpret_cast<WGPUProcComputePassEncoderPushDebugGroup>(ForwardComputePassEncoderPushDebugGroup);\n    table->computePassEncoderSetBindGroup = reinterpret_cast<WGPUProcComputePassEncoderSetBindGroup>(ForwardComputePassEncoderSetBindGroup);\n    table->computePassEncoderSetLabel = reinterpret_cast<WGPUProcComputePassEncoderSetLabel>(ForwardComputePassEncoderSetLabel);\n    table->computePassEncoderSetPipeline = reinterpret_cast<WGPUProcComputePassEncoderSetPipeline>(ForwardComputePassEncoderSetPipeline);\n    table->computePassEncoderWriteTimestamp = reinterpret_cast<WGPUProcComputePassEncoderWriteTimestamp>(ForwardComputePassEncoderWriteTimestamp);\n    table->computePassEncoderReference = reinterpret_cast<WGPUProcComputePassEncoderReference>(ForwardComputePassEncoderReference);\n    table->computePassEncoderRelease = reinterpret_cast<WGPUProcComputePassEncoderRelease>(ForwardComputePassEncoderRelease);\n    table->computePipelineGetBindGroupLayout = reinterpret_cast<WGPUProcComputePipelineGetBindGroupLayout>(ForwardComputePipelineGetBindGroupLayout);\n    table->computePipelineSetLabel = reinterpret_cast<WGPUProcComputePipelineSetLabel>(ForwardComputePipelineSetLabel);\n    table->computePipelineReference = reinterpret_cast<WGPUProcComputePipelineReference>(ForwardComputePipelineReference);\n    table->computePipelineRelease = reinterpret_cast<WGPUProcComputePipelineRelease>(ForwardComputePipelineRelease);\n    table->deviceCreateBindGroup = reinterpret_cast<WGPUProcDeviceCreateBindGroup>(ForwardDeviceCreateBindGroup);\n    table->deviceCreateBindGroupLayout = reinterpret_cast<WGPUProcDeviceCreateBindGroupLayout>(ForwardDeviceCreateBindGroupLayout);\n    table->deviceCreateBuffer = reinterpret_cast<WGPUProcDeviceCreateBuffer>(ForwardDeviceCreateBuffer);\n    table->deviceCreateCommandEncoder = reinterpret_cast<WGPUProcDeviceCreateCommandEncoder>(ForwardDeviceCreateCommandEncoder);\n    table->deviceCreateComputePipeline = reinterpret_cast<WGPUProcDeviceCreateComputePipeline>(ForwardDeviceCreateComputePipeline);\n    table->deviceCreateComputePipelineAsync = reinterpret_cast<WGPUProcDeviceCreateComputePipelineAsync>(ForwardDeviceCreateComputePipelineAsync);\n    table->deviceCreateErrorBuffer = reinterpret_cast<WGPUProcDeviceCreateErrorBuffer>(ForwardDeviceCreateErrorBuffer);\n    table->deviceCreateErrorExternalTexture = reinterpret_cast<WGPUProcDeviceCreateErrorExternalTexture>(ForwardDeviceCreateErrorExternalTexture);\n    table->deviceCreateErrorShaderModule = reinterpret_cast<WGPUProcDeviceCreateErrorShaderModule>(ForwardDeviceCreateErrorShaderModule);\n    table->deviceCreateErrorTexture = reinterpret_cast<WGPUProcDeviceCreateErrorTexture>(ForwardDeviceCreateErrorTexture);\n    table->deviceCreateExternalTexture = reinterpret_cast<WGPUProcDeviceCreateExternalTexture>(ForwardDeviceCreateExternalTexture);\n    table->deviceCreatePipelineLayout = reinterpret_cast<WGPUProcDeviceCreatePipelineLayout>(ForwardDeviceCreatePipelineLayout);\n    table->deviceCreateQuerySet = reinterpret_cast<WGPUProcDeviceCreateQuerySet>(ForwardDeviceCreateQuerySet);\n    table->deviceCreateRenderBundleEncoder = reinterpret_cast<WGPUProcDeviceCreateRenderBundleEncoder>(ForwardDeviceCreateRenderBundleEncoder);\n    table->deviceCreateRenderPipeline = reinterpret_cast<WGPUProcDeviceCreateRenderPipeline>(ForwardDeviceCreateRenderPipeline);\n    table->deviceCreateRenderPipelineAsync = reinterpret_cast<WGPUProcDeviceCreateRenderPipelineAsync>(ForwardDeviceCreateRenderPipelineAsync);\n    table->deviceCreateSampler = reinterpret_cast<WGPUProcDeviceCreateSampler>(ForwardDeviceCreateSampler);\n    table->deviceCreateShaderModule = reinterpret_cast<WGPUProcDeviceCreateShaderModule>(ForwardDeviceCreateShaderModule);\n    table->deviceCreateSwapChain = reinterpret_cast<WGPUProcDeviceCreateSwapChain>(ForwardDeviceCreateSwapChain);\n    table->deviceCreateTexture = reinterpret_cast<WGPUProcDeviceCreateTexture>(ForwardDeviceCreateTexture);\n    table->deviceDestroy = reinterpret_cast<WGPUProcDeviceDestroy>(ForwardDeviceDestroy);\n    table->deviceEnumerateFeatures = reinterpret_cast<WGPUProcDeviceEnumerateFeatures>(ForwardDeviceEnumerateFeatures);\n    table->deviceForceLoss = reinterpret_cast<WGPUProcDeviceForceLoss>(ForwardDeviceForceLoss);\n    table->deviceGetAdapter = reinterpret_cast<WGPUProcDeviceGetAdapter>(ForwardDeviceGetAdapter);\n    table->deviceGetLimits = reinterpret_cast<WGPUProcDeviceGetLimits>(ForwardDeviceGetLimits);\n    table->deviceGetQueue = reinterpret_cast<WGPUProcDeviceGetQueue>(ForwardDeviceGetQueue);\n    table->deviceGetSupportedSurfaceUsage = reinterpret_cast<WGPUProcDeviceGetSupportedSurfaceUsage>(ForwardDeviceGetSupportedSurfaceUsage);\n    table->deviceHasFeature = reinterpret_cast<WGPUProcDeviceHasFeature>(ForwardDeviceHasFeature);\n    table->deviceImportSharedFence = reinterpret_cast<WGPUProcDeviceImportSharedFence>(ForwardDeviceImportSharedFence);\n    table->deviceImportSharedTextureMemory = reinterpret_cast<WGPUProcDeviceImportSharedTextureMemory>(ForwardDeviceImportSharedTextureMemory);\n    table->deviceInjectError = reinterpret_cast<WGPUProcDeviceInjectError>(ForwardDeviceInjectError);\n    table->devicePopErrorScope = reinterpret_cast<WGPUProcDevicePopErrorScope>(ForwardDevicePopErrorScope);\n    table->devicePushErrorScope = reinterpret_cast<WGPUProcDevicePushErrorScope>(ForwardDevicePushErrorScope);\n    table->deviceSetDeviceLostCallback = reinterpret_cast<WGPUProcDeviceSetDeviceLostCallback>(ForwardDeviceSetDeviceLostCallback);\n    table->deviceSetLabel = reinterpret_cast<WGPUProcDeviceSetLabel>(ForwardDeviceSetLabel);\n    table->deviceSetLoggingCallback = reinterpret_cast<WGPUProcDeviceSetLoggingCallback>(ForwardDeviceSetLoggingCallback);\n    table->deviceSetUncapturedErrorCallback = reinterpret_cast<WGPUProcDeviceSetUncapturedErrorCallback>(ForwardDeviceSetUncapturedErrorCallback);\n    table->deviceTick = reinterpret_cast<WGPUProcDeviceTick>(ForwardDeviceTick);\n    table->deviceValidateTextureDescriptor = reinterpret_cast<WGPUProcDeviceValidateTextureDescriptor>(ForwardDeviceValidateTextureDescriptor);\n    table->deviceReference = reinterpret_cast<WGPUProcDeviceReference>(ForwardDeviceReference);\n    table->deviceRelease = reinterpret_cast<WGPUProcDeviceRelease>(ForwardDeviceRelease);\n    table->externalTextureDestroy = reinterpret_cast<WGPUProcExternalTextureDestroy>(ForwardExternalTextureDestroy);\n    table->externalTextureExpire = reinterpret_cast<WGPUProcExternalTextureExpire>(ForwardExternalTextureExpire);\n    table->externalTextureRefresh = reinterpret_cast<WGPUProcExternalTextureRefresh>(ForwardExternalTextureRefresh);\n    table->externalTextureSetLabel = reinterpret_cast<WGPUProcExternalTextureSetLabel>(ForwardExternalTextureSetLabel);\n    table->externalTextureReference = reinterpret_cast<WGPUProcExternalTextureReference>(ForwardExternalTextureReference);\n    table->externalTextureRelease = reinterpret_cast<WGPUProcExternalTextureRelease>(ForwardExternalTextureRelease);\n    table->instanceCreateSurface = reinterpret_cast<WGPUProcInstanceCreateSurface>(ForwardInstanceCreateSurface);\n    table->instanceProcessEvents = reinterpret_cast<WGPUProcInstanceProcessEvents>(ForwardInstanceProcessEvents);\n    table->instanceRequestAdapter = reinterpret_cast<WGPUProcInstanceRequestAdapter>(ForwardInstanceRequestAdapter);\n    table->instanceReference = reinterpret_cast<WGPUProcInstanceReference>(ForwardInstanceReference);\n    table->instanceRelease = reinterpret_cast<WGPUProcInstanceRelease>(ForwardInstanceRelease);\n    table->pipelineLayoutSetLabel = reinterpret_cast<WGPUProcPipelineLayoutSetLabel>(ForwardPipelineLayoutSetLabel);\n    table->pipelineLayoutReference = reinterpret_cast<WGPUProcPipelineLayoutReference>(ForwardPipelineLayoutReference);\n    table->pipelineLayoutRelease = reinterpret_cast<WGPUProcPipelineLayoutRelease>(ForwardPipelineLayoutRelease);\n    table->querySetDestroy = reinterpret_cast<WGPUProcQuerySetDestroy>(ForwardQuerySetDestroy);\n    table->querySetGetCount = reinterpret_cast<WGPUProcQuerySetGetCount>(ForwardQuerySetGetCount);\n    table->querySetGetType = reinterpret_cast<WGPUProcQuerySetGetType>(ForwardQuerySetGetType);\n    table->querySetSetLabel = reinterpret_cast<WGPUProcQuerySetSetLabel>(ForwardQuerySetSetLabel);\n    table->querySetReference = reinterpret_cast<WGPUProcQuerySetReference>(ForwardQuerySetReference);\n    table->querySetRelease = reinterpret_cast<WGPUProcQuerySetRelease>(ForwardQuerySetRelease);\n    table->queueCopyExternalTextureForBrowser = reinterpret_cast<WGPUProcQueueCopyExternalTextureForBrowser>(ForwardQueueCopyExternalTextureForBrowser);\n    table->queueCopyTextureForBrowser = reinterpret_cast<WGPUProcQueueCopyTextureForBrowser>(ForwardQueueCopyTextureForBrowser);\n    table->queueOnSubmittedWorkDone = reinterpret_cast<WGPUProcQueueOnSubmittedWorkDone>(ForwardQueueOnSubmittedWorkDone);\n    table->queueSetLabel = reinterpret_cast<WGPUProcQueueSetLabel>(ForwardQueueSetLabel);\n    table->queueSubmit = reinterpret_cast<WGPUProcQueueSubmit>(ForwardQueueSubmit);\n    table->queueWriteBuffer = reinterpret_cast<WGPUProcQueueWriteBuffer>(ForwardQueueWriteBuffer);\n    table->queueWriteTexture = reinterpret_cast<WGPUProcQueueWriteTexture>(ForwardQueueWriteTexture);\n    table->queueReference = reinterpret_cast<WGPUProcQueueReference>(ForwardQueueReference);\n    table->queueRelease = reinterpret_cast<WGPUProcQueueRelease>(ForwardQueueRelease);\n    table->renderBundleSetLabel = reinterpret_cast<WGPUProcRenderBundleSetLabel>(ForwardRenderBundleSetLabel);\n    table->renderBundleReference = reinterpret_cast<WGPUProcRenderBundleReference>(ForwardRenderBundleReference);\n    table->renderBundleRelease = reinterpret_cast<WGPUProcRenderBundleRelease>(ForwardRenderBundleRelease);\n    table->renderBundleEncoderDraw = reinterpret_cast<WGPUProcRenderBundleEncoderDraw>(ForwardRenderBundleEncoderDraw);\n    table->renderBundleEncoderDrawIndexed = reinterpret_cast<WGPUProcRenderBundleEncoderDrawIndexed>(ForwardRenderBundleEncoderDrawIndexed);\n    table->renderBundleEncoderDrawIndexedIndirect = reinterpret_cast<WGPUProcRenderBundleEncoderDrawIndexedIndirect>(ForwardRenderBundleEncoderDrawIndexedIndirect);\n    table->renderBundleEncoderDrawIndirect = reinterpret_cast<WGPUProcRenderBundleEncoderDrawIndirect>(ForwardRenderBundleEncoderDrawIndirect);\n    table->renderBundleEncoderFinish = reinterpret_cast<WGPUProcRenderBundleEncoderFinish>(ForwardRenderBundleEncoderFinish);\n    table->renderBundleEncoderInsertDebugMarker = reinterpret_cast<WGPUProcRenderBundleEncoderInsertDebugMarker>(ForwardRenderBundleEncoderInsertDebugMarker);\n    table->renderBundleEncoderPopDebugGroup = reinterpret_cast<WGPUProcRenderBundleEncoderPopDebugGroup>(ForwardRenderBundleEncoderPopDebugGroup);\n    table->renderBundleEncoderPushDebugGroup = reinterpret_cast<WGPUProcRenderBundleEncoderPushDebugGroup>(ForwardRenderBundleEncoderPushDebugGroup);\n    table->renderBundleEncoderSetBindGroup = reinterpret_cast<WGPUProcRenderBundleEncoderSetBindGroup>(ForwardRenderBundleEncoderSetBindGroup);\n    table->renderBundleEncoderSetIndexBuffer = reinterpret_cast<WGPUProcRenderBundleEncoderSetIndexBuffer>(ForwardRenderBundleEncoderSetIndexBuffer);\n    table->renderBundleEncoderSetLabel = reinterpret_cast<WGPUProcRenderBundleEncoderSetLabel>(ForwardRenderBundleEncoderSetLabel);\n    table->renderBundleEncoderSetPipeline = reinterpret_cast<WGPUProcRenderBundleEncoderSetPipeline>(ForwardRenderBundleEncoderSetPipeline);\n    table->renderBundleEncoderSetVertexBuffer = reinterpret_cast<WGPUProcRenderBundleEncoderSetVertexBuffer>(ForwardRenderBundleEncoderSetVertexBuffer);\n    table->renderBundleEncoderReference = reinterpret_cast<WGPUProcRenderBundleEncoderReference>(ForwardRenderBundleEncoderReference);\n    table->renderBundleEncoderRelease = reinterpret_cast<WGPUProcRenderBundleEncoderRelease>(ForwardRenderBundleEncoderRelease);\n    table->renderPassEncoderBeginOcclusionQuery = reinterpret_cast<WGPUProcRenderPassEncoderBeginOcclusionQuery>(ForwardRenderPassEncoderBeginOcclusionQuery);\n    table->renderPassEncoderDraw = reinterpret_cast<WGPUProcRenderPassEncoderDraw>(ForwardRenderPassEncoderDraw);\n    table->renderPassEncoderDrawIndexed = reinterpret_cast<WGPUProcRenderPassEncoderDrawIndexed>(ForwardRenderPassEncoderDrawIndexed);\n    table->renderPassEncoderDrawIndexedIndirect = reinterpret_cast<WGPUProcRenderPassEncoderDrawIndexedIndirect>(ForwardRenderPassEncoderDrawIndexedIndirect);\n    table->renderPassEncoderDrawIndirect = reinterpret_cast<WGPUProcRenderPassEncoderDrawIndirect>(ForwardRenderPassEncoderDrawIndirect);\n    table->renderPassEncoderEnd = reinterpret_cast<WGPUProcRenderPassEncoderEnd>(ForwardRenderPassEncoderEnd);\n    table->renderPassEncoderEndOcclusionQuery = reinterpret_cast<WGPUProcRenderPassEncoderEndOcclusionQuery>(ForwardRenderPassEncoderEndOcclusionQuery);\n    table->renderPassEncoderExecuteBundles = reinterpret_cast<WGPUProcRenderPassEncoderExecuteBundles>(ForwardRenderPassEncoderExecuteBundles);\n    table->renderPassEncoderInsertDebugMarker = reinterpret_cast<WGPUProcRenderPassEncoderInsertDebugMarker>(ForwardRenderPassEncoderInsertDebugMarker);\n    table->renderPassEncoderPopDebugGroup = reinterpret_cast<WGPUProcRenderPassEncoderPopDebugGroup>(ForwardRenderPassEncoderPopDebugGroup);\n    table->renderPassEncoderPushDebugGroup = reinterpret_cast<WGPUProcRenderPassEncoderPushDebugGroup>(ForwardRenderPassEncoderPushDebugGroup);\n    table->renderPassEncoderSetBindGroup = reinterpret_cast<WGPUProcRenderPassEncoderSetBindGroup>(ForwardRenderPassEncoderSetBindGroup);\n    table->renderPassEncoderSetBlendConstant = reinterpret_cast<WGPUProcRenderPassEncoderSetBlendConstant>(ForwardRenderPassEncoderSetBlendConstant);\n    table->renderPassEncoderSetIndexBuffer = reinterpret_cast<WGPUProcRenderPassEncoderSetIndexBuffer>(ForwardRenderPassEncoderSetIndexBuffer);\n    table->renderPassEncoderSetLabel = reinterpret_cast<WGPUProcRenderPassEncoderSetLabel>(ForwardRenderPassEncoderSetLabel);\n    table->renderPassEncoderSetPipeline = reinterpret_cast<WGPUProcRenderPassEncoderSetPipeline>(ForwardRenderPassEncoderSetPipeline);\n    table->renderPassEncoderSetScissorRect = reinterpret_cast<WGPUProcRenderPassEncoderSetScissorRect>(ForwardRenderPassEncoderSetScissorRect);\n    table->renderPassEncoderSetStencilReference = reinterpret_cast<WGPUProcRenderPassEncoderSetStencilReference>(ForwardRenderPassEncoderSetStencilReference);\n    table->renderPassEncoderSetVertexBuffer = reinterpret_cast<WGPUProcRenderPassEncoderSetVertexBuffer>(ForwardRenderPassEncoderSetVertexBuffer);\n    table->renderPassEncoderSetViewport = reinterpret_cast<WGPUProcRenderPassEncoderSetViewport>(ForwardRenderPassEncoderSetViewport);\n    table->renderPassEncoderWriteTimestamp = reinterpret_cast<WGPUProcRenderPassEncoderWriteTimestamp>(ForwardRenderPassEncoderWriteTimestamp);\n    table->renderPassEncoderReference = reinterpret_cast<WGPUProcRenderPassEncoderReference>(ForwardRenderPassEncoderReference);\n    table->renderPassEncoderRelease = reinterpret_cast<WGPUProcRenderPassEncoderRelease>(ForwardRenderPassEncoderRelease);\n    table->renderPipelineGetBindGroupLayout = reinterpret_cast<WGPUProcRenderPipelineGetBindGroupLayout>(ForwardRenderPipelineGetBindGroupLayout);\n    table->renderPipelineSetLabel = reinterpret_cast<WGPUProcRenderPipelineSetLabel>(ForwardRenderPipelineSetLabel);\n    table->renderPipelineReference = reinterpret_cast<WGPUProcRenderPipelineReference>(ForwardRenderPipelineReference);\n    table->renderPipelineRelease = reinterpret_cast<WGPUProcRenderPipelineRelease>(ForwardRenderPipelineRelease);\n    table->samplerSetLabel = reinterpret_cast<WGPUProcSamplerSetLabel>(ForwardSamplerSetLabel);\n    table->samplerReference = reinterpret_cast<WGPUProcSamplerReference>(ForwardSamplerReference);\n    table->samplerRelease = reinterpret_cast<WGPUProcSamplerRelease>(ForwardSamplerRelease);\n    table->shaderModuleGetCompilationInfo = reinterpret_cast<WGPUProcShaderModuleGetCompilationInfo>(ForwardShaderModuleGetCompilationInfo);\n    table->shaderModuleSetLabel = reinterpret_cast<WGPUProcShaderModuleSetLabel>(ForwardShaderModuleSetLabel);\n    table->shaderModuleReference = reinterpret_cast<WGPUProcShaderModuleReference>(ForwardShaderModuleReference);\n    table->shaderModuleRelease = reinterpret_cast<WGPUProcShaderModuleRelease>(ForwardShaderModuleRelease);\n    table->sharedFenceExportInfo = reinterpret_cast<WGPUProcSharedFenceExportInfo>(ForwardSharedFenceExportInfo);\n    table->sharedFenceReference = reinterpret_cast<WGPUProcSharedFenceReference>(ForwardSharedFenceReference);\n    table->sharedFenceRelease = reinterpret_cast<WGPUProcSharedFenceRelease>(ForwardSharedFenceRelease);\n    table->sharedTextureMemoryBeginAccess = reinterpret_cast<WGPUProcSharedTextureMemoryBeginAccess>(ForwardSharedTextureMemoryBeginAccess);\n    table->sharedTextureMemoryCreateTexture = reinterpret_cast<WGPUProcSharedTextureMemoryCreateTexture>(ForwardSharedTextureMemoryCreateTexture);\n    table->sharedTextureMemoryEndAccess = reinterpret_cast<WGPUProcSharedTextureMemoryEndAccess>(ForwardSharedTextureMemoryEndAccess);\n    table->sharedTextureMemoryGetProperties = reinterpret_cast<WGPUProcSharedTextureMemoryGetProperties>(ForwardSharedTextureMemoryGetProperties);\n    table->sharedTextureMemorySetLabel = reinterpret_cast<WGPUProcSharedTextureMemorySetLabel>(ForwardSharedTextureMemorySetLabel);\n    table->sharedTextureMemoryReference = reinterpret_cast<WGPUProcSharedTextureMemoryReference>(ForwardSharedTextureMemoryReference);\n    table->sharedTextureMemoryRelease = reinterpret_cast<WGPUProcSharedTextureMemoryRelease>(ForwardSharedTextureMemoryRelease);\n    table->surfaceReference = reinterpret_cast<WGPUProcSurfaceReference>(ForwardSurfaceReference);\n    table->surfaceRelease = reinterpret_cast<WGPUProcSurfaceRelease>(ForwardSurfaceRelease);\n    table->swapChainGetCurrentTexture = reinterpret_cast<WGPUProcSwapChainGetCurrentTexture>(ForwardSwapChainGetCurrentTexture);\n    table->swapChainGetCurrentTextureView = reinterpret_cast<WGPUProcSwapChainGetCurrentTextureView>(ForwardSwapChainGetCurrentTextureView);\n    table->swapChainPresent = reinterpret_cast<WGPUProcSwapChainPresent>(ForwardSwapChainPresent);\n    table->swapChainReference = reinterpret_cast<WGPUProcSwapChainReference>(ForwardSwapChainReference);\n    table->swapChainRelease = reinterpret_cast<WGPUProcSwapChainRelease>(ForwardSwapChainRelease);\n    table->textureCreateView = reinterpret_cast<WGPUProcTextureCreateView>(ForwardTextureCreateView);\n    table->textureDestroy = reinterpret_cast<WGPUProcTextureDestroy>(ForwardTextureDestroy);\n    table->textureGetDepthOrArrayLayers = reinterpret_cast<WGPUProcTextureGetDepthOrArrayLayers>(ForwardTextureGetDepthOrArrayLayers);\n    table->textureGetDimension = reinterpret_cast<WGPUProcTextureGetDimension>(ForwardTextureGetDimension);\n    table->textureGetFormat = reinterpret_cast<WGPUProcTextureGetFormat>(ForwardTextureGetFormat);\n    table->textureGetHeight = reinterpret_cast<WGPUProcTextureGetHeight>(ForwardTextureGetHeight);\n    table->textureGetMipLevelCount = reinterpret_cast<WGPUProcTextureGetMipLevelCount>(ForwardTextureGetMipLevelCount);\n    table->textureGetSampleCount = reinterpret_cast<WGPUProcTextureGetSampleCount>(ForwardTextureGetSampleCount);\n    table->textureGetUsage = reinterpret_cast<WGPUProcTextureGetUsage>(ForwardTextureGetUsage);\n    table->textureGetWidth = reinterpret_cast<WGPUProcTextureGetWidth>(ForwardTextureGetWidth);\n    table->textureSetLabel = reinterpret_cast<WGPUProcTextureSetLabel>(ForwardTextureSetLabel);\n    table->textureReference = reinterpret_cast<WGPUProcTextureReference>(ForwardTextureReference);\n    table->textureRelease = reinterpret_cast<WGPUProcTextureRelease>(ForwardTextureRelease);\n    table->textureViewSetLabel = reinterpret_cast<WGPUProcTextureViewSetLabel>(ForwardTextureViewSetLabel);\n    table->textureViewReference = reinterpret_cast<WGPUProcTextureViewReference>(ForwardTextureViewReference);\n    table->textureViewRelease = reinterpret_cast<WGPUProcTextureViewRelease>(ForwardTextureViewRelease);\n\n    table->adapterPropertiesFreeMembers = [](WGPUAdapterProperties adapterProperties) {\n        dawn::WarningLog() << \"No mock available for adapterPropertiesFreeMembers\";\n    };\n    table->sharedTextureMemoryEndAccessStateFreeMembers = [](WGPUSharedTextureMemoryEndAccessState sharedTextureMemoryEndAccessState) {\n        dawn::WarningLog() << \"No mock available for sharedTextureMemoryEndAccessStateFreeMembers\";\n    };\n}\n\n\nvoid ProcTableAsClass::AdapterRequestDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(adapter);\n    object->mAdapterRequestDeviceCallback = callback;\n    object->userdata = userdata;\n    return OnAdapterRequestDevice(adapter, descriptor, callback, userdata);\n}\n\nvoid ProcTableAsClass::CallAdapterRequestDeviceCallback(WGPUAdapter adapter, WGPURequestDeviceStatus status, WGPUDevice device, char const * message) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(adapter);\n    object->mAdapterRequestDeviceCallback(status, device, message, object->userdata);\n}\n\nvoid ProcTableAsClass::BufferMapAsync(WGPUBuffer buffer, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(buffer);\n    object->mBufferMapAsyncCallback = callback;\n    object->userdata = userdata;\n    return OnBufferMapAsync(buffer, mode, offset, size, callback, userdata);\n}\n\nvoid ProcTableAsClass::CallBufferMapAsyncCallback(WGPUBuffer buffer, WGPUBufferMapAsyncStatus status) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(buffer);\n    object->mBufferMapAsyncCallback(status, object->userdata);\n}\n\nvoid ProcTableAsClass::DeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(device);\n    object->mDeviceCreateComputePipelineAsyncCallback = callback;\n    object->userdata = userdata;\n    return OnDeviceCreateComputePipelineAsync(device, descriptor, callback, userdata);\n}\n\nvoid ProcTableAsClass::CallDeviceCreateComputePipelineAsyncCallback(WGPUDevice device, WGPUCreatePipelineAsyncStatus status, WGPUComputePipeline pipeline, char const * message) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(device);\n    object->mDeviceCreateComputePipelineAsyncCallback(status, pipeline, message, object->userdata);\n}\n\nvoid ProcTableAsClass::DeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(device);\n    object->mDeviceCreateRenderPipelineAsyncCallback = callback;\n    object->userdata = userdata;\n    return OnDeviceCreateRenderPipelineAsync(device, descriptor, callback, userdata);\n}\n\nvoid ProcTableAsClass::CallDeviceCreateRenderPipelineAsyncCallback(WGPUDevice device, WGPUCreatePipelineAsyncStatus status, WGPURenderPipeline pipeline, char const * message) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(device);\n    object->mDeviceCreateRenderPipelineAsyncCallback(status, pipeline, message, object->userdata);\n}\n\nvoid ProcTableAsClass::DevicePopErrorScope(WGPUDevice device, WGPUErrorCallback callback, void * userdata) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(device);\n    object->mDevicePopErrorScopeCallback = callback;\n    object->userdata = userdata;\n    return OnDevicePopErrorScope(device, callback, userdata);\n}\n\nvoid ProcTableAsClass::CallDevicePopErrorScopeCallback(WGPUDevice device, WGPUErrorType type, char const * message) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(device);\n    object->mDevicePopErrorScopeCallback(type, message, object->userdata);\n}\n\nvoid ProcTableAsClass::DeviceSetDeviceLostCallback(WGPUDevice device, WGPUDeviceLostCallback callback, void * userdata) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(device);\n    object->mDeviceSetDeviceLostCallbackCallback = callback;\n    object->userdata = userdata;\n    return OnDeviceSetDeviceLostCallback(device, callback, userdata);\n}\n\nvoid ProcTableAsClass::CallDeviceSetDeviceLostCallbackCallback(WGPUDevice device, WGPUDeviceLostReason reason, char const * message) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(device);\n    object->mDeviceSetDeviceLostCallbackCallback(reason, message, object->userdata);\n}\n\nvoid ProcTableAsClass::DeviceSetLoggingCallback(WGPUDevice device, WGPULoggingCallback callback, void * userdata) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(device);\n    object->mDeviceSetLoggingCallbackCallback = callback;\n    object->userdata = userdata;\n    return OnDeviceSetLoggingCallback(device, callback, userdata);\n}\n\nvoid ProcTableAsClass::CallDeviceSetLoggingCallbackCallback(WGPUDevice device, WGPULoggingType type, char const * message) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(device);\n    object->mDeviceSetLoggingCallbackCallback(type, message, object->userdata);\n}\n\nvoid ProcTableAsClass::DeviceSetUncapturedErrorCallback(WGPUDevice device, WGPUErrorCallback callback, void * userdata) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(device);\n    object->mDeviceSetUncapturedErrorCallbackCallback = callback;\n    object->userdata = userdata;\n    return OnDeviceSetUncapturedErrorCallback(device, callback, userdata);\n}\n\nvoid ProcTableAsClass::CallDeviceSetUncapturedErrorCallbackCallback(WGPUDevice device, WGPUErrorType type, char const * message) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(device);\n    object->mDeviceSetUncapturedErrorCallbackCallback(type, message, object->userdata);\n}\n\nvoid ProcTableAsClass::InstanceRequestAdapter(WGPUInstance instance, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(instance);\n    object->mInstanceRequestAdapterCallback = callback;\n    object->userdata = userdata;\n    return OnInstanceRequestAdapter(instance, options, callback, userdata);\n}\n\nvoid ProcTableAsClass::CallInstanceRequestAdapterCallback(WGPUInstance instance, WGPURequestAdapterStatus status, WGPUAdapter adapter, char const * message) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(instance);\n    object->mInstanceRequestAdapterCallback(status, adapter, message, object->userdata);\n}\n\nvoid ProcTableAsClass::QueueOnSubmittedWorkDone(WGPUQueue queue, uint64_t signalValue, WGPUQueueWorkDoneCallback callback, void * userdata) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(queue);\n    object->mQueueOnSubmittedWorkDoneCallback = callback;\n    object->userdata = userdata;\n    return OnQueueOnSubmittedWorkDone(queue, signalValue, callback, userdata);\n}\n\nvoid ProcTableAsClass::CallQueueOnSubmittedWorkDoneCallback(WGPUQueue queue, WGPUQueueWorkDoneStatus status) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(queue);\n    object->mQueueOnSubmittedWorkDoneCallback(status, object->userdata);\n}\n\nvoid ProcTableAsClass::ShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(shaderModule);\n    object->mShaderModuleGetCompilationInfoCallback = callback;\n    object->userdata = userdata;\n    return OnShaderModuleGetCompilationInfo(shaderModule, callback, userdata);\n}\n\nvoid ProcTableAsClass::CallShaderModuleGetCompilationInfoCallback(WGPUShaderModule shaderModule, WGPUCompilationInfoRequestStatus status, WGPUCompilationInfo const * compilationInfo) {\n    ProcTableAsClass::Object* object = reinterpret_cast<ProcTableAsClass::Object*>(shaderModule);\n    object->mShaderModuleGetCompilationInfoCallback(status, compilationInfo, object->userdata);\n}\n\nWGPUAdapter ProcTableAsClass::GetNewAdapter() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUAdapter>(mObjects.back().get());\n}\nWGPUBindGroup ProcTableAsClass::GetNewBindGroup() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUBindGroup>(mObjects.back().get());\n}\nWGPUBindGroupLayout ProcTableAsClass::GetNewBindGroupLayout() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUBindGroupLayout>(mObjects.back().get());\n}\nWGPUBuffer ProcTableAsClass::GetNewBuffer() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUBuffer>(mObjects.back().get());\n}\nWGPUCommandBuffer ProcTableAsClass::GetNewCommandBuffer() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUCommandBuffer>(mObjects.back().get());\n}\nWGPUCommandEncoder ProcTableAsClass::GetNewCommandEncoder() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUCommandEncoder>(mObjects.back().get());\n}\nWGPUComputePassEncoder ProcTableAsClass::GetNewComputePassEncoder() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUComputePassEncoder>(mObjects.back().get());\n}\nWGPUComputePipeline ProcTableAsClass::GetNewComputePipeline() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUComputePipeline>(mObjects.back().get());\n}\nWGPUDevice ProcTableAsClass::GetNewDevice() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUDevice>(mObjects.back().get());\n}\nWGPUExternalTexture ProcTableAsClass::GetNewExternalTexture() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUExternalTexture>(mObjects.back().get());\n}\nWGPUInstance ProcTableAsClass::GetNewInstance() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUInstance>(mObjects.back().get());\n}\nWGPUPipelineLayout ProcTableAsClass::GetNewPipelineLayout() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUPipelineLayout>(mObjects.back().get());\n}\nWGPUQuerySet ProcTableAsClass::GetNewQuerySet() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUQuerySet>(mObjects.back().get());\n}\nWGPUQueue ProcTableAsClass::GetNewQueue() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUQueue>(mObjects.back().get());\n}\nWGPURenderBundle ProcTableAsClass::GetNewRenderBundle() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPURenderBundle>(mObjects.back().get());\n}\nWGPURenderBundleEncoder ProcTableAsClass::GetNewRenderBundleEncoder() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPURenderBundleEncoder>(mObjects.back().get());\n}\nWGPURenderPassEncoder ProcTableAsClass::GetNewRenderPassEncoder() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPURenderPassEncoder>(mObjects.back().get());\n}\nWGPURenderPipeline ProcTableAsClass::GetNewRenderPipeline() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPURenderPipeline>(mObjects.back().get());\n}\nWGPUSampler ProcTableAsClass::GetNewSampler() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUSampler>(mObjects.back().get());\n}\nWGPUShaderModule ProcTableAsClass::GetNewShaderModule() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUShaderModule>(mObjects.back().get());\n}\nWGPUSharedFence ProcTableAsClass::GetNewSharedFence() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUSharedFence>(mObjects.back().get());\n}\nWGPUSharedTextureMemory ProcTableAsClass::GetNewSharedTextureMemory() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUSharedTextureMemory>(mObjects.back().get());\n}\nWGPUSurface ProcTableAsClass::GetNewSurface() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUSurface>(mObjects.back().get());\n}\nWGPUSwapChain ProcTableAsClass::GetNewSwapChain() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUSwapChain>(mObjects.back().get());\n}\nWGPUTexture ProcTableAsClass::GetNewTexture() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUTexture>(mObjects.back().get());\n}\nWGPUTextureView ProcTableAsClass::GetNewTextureView() {\n    mObjects.emplace_back(new Object);\n    mObjects.back()->procs = this;\n    return reinterpret_cast<WGPUTextureView>(mObjects.back().get());\n}\n\nMockProcTable::MockProcTable() = default;\n\nMockProcTable::~MockProcTable() = default;\n\nvoid MockProcTable::IgnoreAllReleaseCalls() {\n    EXPECT_CALL(*this, AdapterRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, BindGroupRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, BindGroupLayoutRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, BufferRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, CommandBufferRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, CommandEncoderRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, ComputePassEncoderRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, ComputePipelineRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, DeviceRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, ExternalTextureRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, InstanceRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, PipelineLayoutRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, QuerySetRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, QueueRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, RenderBundleRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, RenderBundleEncoderRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, RenderPassEncoderRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, RenderPipelineRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, SamplerRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, ShaderModuleRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, SharedFenceRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, SharedTextureMemoryRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, SurfaceRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, SwapChainRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, TextureRelease(_)).Times(AnyNumber());\n    EXPECT_CALL(*this, TextureViewRelease(_)).Times(AnyNumber());\n}\n"}