{"src/dawn/webgpu_cpp.cpp": "\n#include <utility>\n\n#include \"dawn/webgpu_cpp.h\"\n\n#ifdef __GNUC__\n// error: 'offsetof' within non-standard-layout type 'wgpu::XXX' is conditionally-supported\n#pragma GCC diagnostic ignored \"-Winvalid-offsetof\"\n#endif\n\nnamespace wgpu {\n\n    // AdapterType\n\n    static_assert(sizeof(AdapterType) == sizeof(WGPUAdapterType), \"sizeof mismatch for AdapterType\");\n    static_assert(alignof(AdapterType) == alignof(WGPUAdapterType), \"alignof mismatch for AdapterType\");\n\n    static_assert(static_cast<uint32_t>(AdapterType::DiscreteGPU) == WGPUAdapterType_DiscreteGPU, \"value mismatch for AdapterType::DiscreteGPU\");\n    static_assert(static_cast<uint32_t>(AdapterType::IntegratedGPU) == WGPUAdapterType_IntegratedGPU, \"value mismatch for AdapterType::IntegratedGPU\");\n    static_assert(static_cast<uint32_t>(AdapterType::CPU) == WGPUAdapterType_CPU, \"value mismatch for AdapterType::CPU\");\n    static_assert(static_cast<uint32_t>(AdapterType::Unknown) == WGPUAdapterType_Unknown, \"value mismatch for AdapterType::Unknown\");\n\n    // AddressMode\n\n    static_assert(sizeof(AddressMode) == sizeof(WGPUAddressMode), \"sizeof mismatch for AddressMode\");\n    static_assert(alignof(AddressMode) == alignof(WGPUAddressMode), \"alignof mismatch for AddressMode\");\n\n    static_assert(static_cast<uint32_t>(AddressMode::Repeat) == WGPUAddressMode_Repeat, \"value mismatch for AddressMode::Repeat\");\n    static_assert(static_cast<uint32_t>(AddressMode::MirrorRepeat) == WGPUAddressMode_MirrorRepeat, \"value mismatch for AddressMode::MirrorRepeat\");\n    static_assert(static_cast<uint32_t>(AddressMode::ClampToEdge) == WGPUAddressMode_ClampToEdge, \"value mismatch for AddressMode::ClampToEdge\");\n\n    // AlphaMode\n\n    static_assert(sizeof(AlphaMode) == sizeof(WGPUAlphaMode), \"sizeof mismatch for AlphaMode\");\n    static_assert(alignof(AlphaMode) == alignof(WGPUAlphaMode), \"alignof mismatch for AlphaMode\");\n\n    static_assert(static_cast<uint32_t>(AlphaMode::Premultiplied) == WGPUAlphaMode_Premultiplied, \"value mismatch for AlphaMode::Premultiplied\");\n    static_assert(static_cast<uint32_t>(AlphaMode::Unpremultiplied) == WGPUAlphaMode_Unpremultiplied, \"value mismatch for AlphaMode::Unpremultiplied\");\n    static_assert(static_cast<uint32_t>(AlphaMode::Opaque) == WGPUAlphaMode_Opaque, \"value mismatch for AlphaMode::Opaque\");\n\n    // BackendType\n\n    static_assert(sizeof(BackendType) == sizeof(WGPUBackendType), \"sizeof mismatch for BackendType\");\n    static_assert(alignof(BackendType) == alignof(WGPUBackendType), \"alignof mismatch for BackendType\");\n\n    static_assert(static_cast<uint32_t>(BackendType::Undefined) == WGPUBackendType_Undefined, \"value mismatch for BackendType::Undefined\");\n    static_assert(static_cast<uint32_t>(BackendType::Null) == WGPUBackendType_Null, \"value mismatch for BackendType::Null\");\n    static_assert(static_cast<uint32_t>(BackendType::WebGPU) == WGPUBackendType_WebGPU, \"value mismatch for BackendType::WebGPU\");\n    static_assert(static_cast<uint32_t>(BackendType::D3D11) == WGPUBackendType_D3D11, \"value mismatch for BackendType::D3D11\");\n    static_assert(static_cast<uint32_t>(BackendType::D3D12) == WGPUBackendType_D3D12, \"value mismatch for BackendType::D3D12\");\n    static_assert(static_cast<uint32_t>(BackendType::Metal) == WGPUBackendType_Metal, \"value mismatch for BackendType::Metal\");\n    static_assert(static_cast<uint32_t>(BackendType::Vulkan) == WGPUBackendType_Vulkan, \"value mismatch for BackendType::Vulkan\");\n    static_assert(static_cast<uint32_t>(BackendType::OpenGL) == WGPUBackendType_OpenGL, \"value mismatch for BackendType::OpenGL\");\n    static_assert(static_cast<uint32_t>(BackendType::OpenGLES) == WGPUBackendType_OpenGLES, \"value mismatch for BackendType::OpenGLES\");\n\n    // BlendFactor\n\n    static_assert(sizeof(BlendFactor) == sizeof(WGPUBlendFactor), \"sizeof mismatch for BlendFactor\");\n    static_assert(alignof(BlendFactor) == alignof(WGPUBlendFactor), \"alignof mismatch for BlendFactor\");\n\n    static_assert(static_cast<uint32_t>(BlendFactor::Zero) == WGPUBlendFactor_Zero, \"value mismatch for BlendFactor::Zero\");\n    static_assert(static_cast<uint32_t>(BlendFactor::One) == WGPUBlendFactor_One, \"value mismatch for BlendFactor::One\");\n    static_assert(static_cast<uint32_t>(BlendFactor::Src) == WGPUBlendFactor_Src, \"value mismatch for BlendFactor::Src\");\n    static_assert(static_cast<uint32_t>(BlendFactor::OneMinusSrc) == WGPUBlendFactor_OneMinusSrc, \"value mismatch for BlendFactor::OneMinusSrc\");\n    static_assert(static_cast<uint32_t>(BlendFactor::SrcAlpha) == WGPUBlendFactor_SrcAlpha, \"value mismatch for BlendFactor::SrcAlpha\");\n    static_assert(static_cast<uint32_t>(BlendFactor::OneMinusSrcAlpha) == WGPUBlendFactor_OneMinusSrcAlpha, \"value mismatch for BlendFactor::OneMinusSrcAlpha\");\n    static_assert(static_cast<uint32_t>(BlendFactor::Dst) == WGPUBlendFactor_Dst, \"value mismatch for BlendFactor::Dst\");\n    static_assert(static_cast<uint32_t>(BlendFactor::OneMinusDst) == WGPUBlendFactor_OneMinusDst, \"value mismatch for BlendFactor::OneMinusDst\");\n    static_assert(static_cast<uint32_t>(BlendFactor::DstAlpha) == WGPUBlendFactor_DstAlpha, \"value mismatch for BlendFactor::DstAlpha\");\n    static_assert(static_cast<uint32_t>(BlendFactor::OneMinusDstAlpha) == WGPUBlendFactor_OneMinusDstAlpha, \"value mismatch for BlendFactor::OneMinusDstAlpha\");\n    static_assert(static_cast<uint32_t>(BlendFactor::SrcAlphaSaturated) == WGPUBlendFactor_SrcAlphaSaturated, \"value mismatch for BlendFactor::SrcAlphaSaturated\");\n    static_assert(static_cast<uint32_t>(BlendFactor::Constant) == WGPUBlendFactor_Constant, \"value mismatch for BlendFactor::Constant\");\n    static_assert(static_cast<uint32_t>(BlendFactor::OneMinusConstant) == WGPUBlendFactor_OneMinusConstant, \"value mismatch for BlendFactor::OneMinusConstant\");\n    static_assert(static_cast<uint32_t>(BlendFactor::Src1) == WGPUBlendFactor_Src1, \"value mismatch for BlendFactor::Src1\");\n    static_assert(static_cast<uint32_t>(BlendFactor::OneMinusSrc1) == WGPUBlendFactor_OneMinusSrc1, \"value mismatch for BlendFactor::OneMinusSrc1\");\n    static_assert(static_cast<uint32_t>(BlendFactor::Src1Alpha) == WGPUBlendFactor_Src1Alpha, \"value mismatch for BlendFactor::Src1Alpha\");\n    static_assert(static_cast<uint32_t>(BlendFactor::OneMinusSrc1Alpha) == WGPUBlendFactor_OneMinusSrc1Alpha, \"value mismatch for BlendFactor::OneMinusSrc1Alpha\");\n\n    // BlendOperation\n\n    static_assert(sizeof(BlendOperation) == sizeof(WGPUBlendOperation), \"sizeof mismatch for BlendOperation\");\n    static_assert(alignof(BlendOperation) == alignof(WGPUBlendOperation), \"alignof mismatch for BlendOperation\");\n\n    static_assert(static_cast<uint32_t>(BlendOperation::Add) == WGPUBlendOperation_Add, \"value mismatch for BlendOperation::Add\");\n    static_assert(static_cast<uint32_t>(BlendOperation::Subtract) == WGPUBlendOperation_Subtract, \"value mismatch for BlendOperation::Subtract\");\n    static_assert(static_cast<uint32_t>(BlendOperation::ReverseSubtract) == WGPUBlendOperation_ReverseSubtract, \"value mismatch for BlendOperation::ReverseSubtract\");\n    static_assert(static_cast<uint32_t>(BlendOperation::Min) == WGPUBlendOperation_Min, \"value mismatch for BlendOperation::Min\");\n    static_assert(static_cast<uint32_t>(BlendOperation::Max) == WGPUBlendOperation_Max, \"value mismatch for BlendOperation::Max\");\n\n    // BufferBindingType\n\n    static_assert(sizeof(BufferBindingType) == sizeof(WGPUBufferBindingType), \"sizeof mismatch for BufferBindingType\");\n    static_assert(alignof(BufferBindingType) == alignof(WGPUBufferBindingType), \"alignof mismatch for BufferBindingType\");\n\n    static_assert(static_cast<uint32_t>(BufferBindingType::Undefined) == WGPUBufferBindingType_Undefined, \"value mismatch for BufferBindingType::Undefined\");\n    static_assert(static_cast<uint32_t>(BufferBindingType::Uniform) == WGPUBufferBindingType_Uniform, \"value mismatch for BufferBindingType::Uniform\");\n    static_assert(static_cast<uint32_t>(BufferBindingType::Storage) == WGPUBufferBindingType_Storage, \"value mismatch for BufferBindingType::Storage\");\n    static_assert(static_cast<uint32_t>(BufferBindingType::ReadOnlyStorage) == WGPUBufferBindingType_ReadOnlyStorage, \"value mismatch for BufferBindingType::ReadOnlyStorage\");\n\n    // BufferMapAsyncStatus\n\n    static_assert(sizeof(BufferMapAsyncStatus) == sizeof(WGPUBufferMapAsyncStatus), \"sizeof mismatch for BufferMapAsyncStatus\");\n    static_assert(alignof(BufferMapAsyncStatus) == alignof(WGPUBufferMapAsyncStatus), \"alignof mismatch for BufferMapAsyncStatus\");\n\n    static_assert(static_cast<uint32_t>(BufferMapAsyncStatus::Success) == WGPUBufferMapAsyncStatus_Success, \"value mismatch for BufferMapAsyncStatus::Success\");\n    static_assert(static_cast<uint32_t>(BufferMapAsyncStatus::ValidationError) == WGPUBufferMapAsyncStatus_ValidationError, \"value mismatch for BufferMapAsyncStatus::ValidationError\");\n    static_assert(static_cast<uint32_t>(BufferMapAsyncStatus::Unknown) == WGPUBufferMapAsyncStatus_Unknown, \"value mismatch for BufferMapAsyncStatus::Unknown\");\n    static_assert(static_cast<uint32_t>(BufferMapAsyncStatus::DeviceLost) == WGPUBufferMapAsyncStatus_DeviceLost, \"value mismatch for BufferMapAsyncStatus::DeviceLost\");\n    static_assert(static_cast<uint32_t>(BufferMapAsyncStatus::DestroyedBeforeCallback) == WGPUBufferMapAsyncStatus_DestroyedBeforeCallback, \"value mismatch for BufferMapAsyncStatus::DestroyedBeforeCallback\");\n    static_assert(static_cast<uint32_t>(BufferMapAsyncStatus::UnmappedBeforeCallback) == WGPUBufferMapAsyncStatus_UnmappedBeforeCallback, \"value mismatch for BufferMapAsyncStatus::UnmappedBeforeCallback\");\n    static_assert(static_cast<uint32_t>(BufferMapAsyncStatus::MappingAlreadyPending) == WGPUBufferMapAsyncStatus_MappingAlreadyPending, \"value mismatch for BufferMapAsyncStatus::MappingAlreadyPending\");\n    static_assert(static_cast<uint32_t>(BufferMapAsyncStatus::OffsetOutOfRange) == WGPUBufferMapAsyncStatus_OffsetOutOfRange, \"value mismatch for BufferMapAsyncStatus::OffsetOutOfRange\");\n    static_assert(static_cast<uint32_t>(BufferMapAsyncStatus::SizeOutOfRange) == WGPUBufferMapAsyncStatus_SizeOutOfRange, \"value mismatch for BufferMapAsyncStatus::SizeOutOfRange\");\n\n    // BufferMapState\n\n    static_assert(sizeof(BufferMapState) == sizeof(WGPUBufferMapState), \"sizeof mismatch for BufferMapState\");\n    static_assert(alignof(BufferMapState) == alignof(WGPUBufferMapState), \"alignof mismatch for BufferMapState\");\n\n    static_assert(static_cast<uint32_t>(BufferMapState::Unmapped) == WGPUBufferMapState_Unmapped, \"value mismatch for BufferMapState::Unmapped\");\n    static_assert(static_cast<uint32_t>(BufferMapState::Pending) == WGPUBufferMapState_Pending, \"value mismatch for BufferMapState::Pending\");\n    static_assert(static_cast<uint32_t>(BufferMapState::Mapped) == WGPUBufferMapState_Mapped, \"value mismatch for BufferMapState::Mapped\");\n\n    // CompareFunction\n\n    static_assert(sizeof(CompareFunction) == sizeof(WGPUCompareFunction), \"sizeof mismatch for CompareFunction\");\n    static_assert(alignof(CompareFunction) == alignof(WGPUCompareFunction), \"alignof mismatch for CompareFunction\");\n\n    static_assert(static_cast<uint32_t>(CompareFunction::Undefined) == WGPUCompareFunction_Undefined, \"value mismatch for CompareFunction::Undefined\");\n    static_assert(static_cast<uint32_t>(CompareFunction::Never) == WGPUCompareFunction_Never, \"value mismatch for CompareFunction::Never\");\n    static_assert(static_cast<uint32_t>(CompareFunction::Less) == WGPUCompareFunction_Less, \"value mismatch for CompareFunction::Less\");\n    static_assert(static_cast<uint32_t>(CompareFunction::LessEqual) == WGPUCompareFunction_LessEqual, \"value mismatch for CompareFunction::LessEqual\");\n    static_assert(static_cast<uint32_t>(CompareFunction::Greater) == WGPUCompareFunction_Greater, \"value mismatch for CompareFunction::Greater\");\n    static_assert(static_cast<uint32_t>(CompareFunction::GreaterEqual) == WGPUCompareFunction_GreaterEqual, \"value mismatch for CompareFunction::GreaterEqual\");\n    static_assert(static_cast<uint32_t>(CompareFunction::Equal) == WGPUCompareFunction_Equal, \"value mismatch for CompareFunction::Equal\");\n    static_assert(static_cast<uint32_t>(CompareFunction::NotEqual) == WGPUCompareFunction_NotEqual, \"value mismatch for CompareFunction::NotEqual\");\n    static_assert(static_cast<uint32_t>(CompareFunction::Always) == WGPUCompareFunction_Always, \"value mismatch for CompareFunction::Always\");\n\n    // CompilationInfoRequestStatus\n\n    static_assert(sizeof(CompilationInfoRequestStatus) == sizeof(WGPUCompilationInfoRequestStatus), \"sizeof mismatch for CompilationInfoRequestStatus\");\n    static_assert(alignof(CompilationInfoRequestStatus) == alignof(WGPUCompilationInfoRequestStatus), \"alignof mismatch for CompilationInfoRequestStatus\");\n\n    static_assert(static_cast<uint32_t>(CompilationInfoRequestStatus::Success) == WGPUCompilationInfoRequestStatus_Success, \"value mismatch for CompilationInfoRequestStatus::Success\");\n    static_assert(static_cast<uint32_t>(CompilationInfoRequestStatus::Error) == WGPUCompilationInfoRequestStatus_Error, \"value mismatch for CompilationInfoRequestStatus::Error\");\n    static_assert(static_cast<uint32_t>(CompilationInfoRequestStatus::DeviceLost) == WGPUCompilationInfoRequestStatus_DeviceLost, \"value mismatch for CompilationInfoRequestStatus::DeviceLost\");\n    static_assert(static_cast<uint32_t>(CompilationInfoRequestStatus::Unknown) == WGPUCompilationInfoRequestStatus_Unknown, \"value mismatch for CompilationInfoRequestStatus::Unknown\");\n\n    // CompilationMessageType\n\n    static_assert(sizeof(CompilationMessageType) == sizeof(WGPUCompilationMessageType), \"sizeof mismatch for CompilationMessageType\");\n    static_assert(alignof(CompilationMessageType) == alignof(WGPUCompilationMessageType), \"alignof mismatch for CompilationMessageType\");\n\n    static_assert(static_cast<uint32_t>(CompilationMessageType::Error) == WGPUCompilationMessageType_Error, \"value mismatch for CompilationMessageType::Error\");\n    static_assert(static_cast<uint32_t>(CompilationMessageType::Warning) == WGPUCompilationMessageType_Warning, \"value mismatch for CompilationMessageType::Warning\");\n    static_assert(static_cast<uint32_t>(CompilationMessageType::Info) == WGPUCompilationMessageType_Info, \"value mismatch for CompilationMessageType::Info\");\n\n    // ComputePassTimestampLocation\n\n    static_assert(sizeof(ComputePassTimestampLocation) == sizeof(WGPUComputePassTimestampLocation), \"sizeof mismatch for ComputePassTimestampLocation\");\n    static_assert(alignof(ComputePassTimestampLocation) == alignof(WGPUComputePassTimestampLocation), \"alignof mismatch for ComputePassTimestampLocation\");\n\n    static_assert(static_cast<uint32_t>(ComputePassTimestampLocation::Beginning) == WGPUComputePassTimestampLocation_Beginning, \"value mismatch for ComputePassTimestampLocation::Beginning\");\n    static_assert(static_cast<uint32_t>(ComputePassTimestampLocation::End) == WGPUComputePassTimestampLocation_End, \"value mismatch for ComputePassTimestampLocation::End\");\n\n    // CreatePipelineAsyncStatus\n\n    static_assert(sizeof(CreatePipelineAsyncStatus) == sizeof(WGPUCreatePipelineAsyncStatus), \"sizeof mismatch for CreatePipelineAsyncStatus\");\n    static_assert(alignof(CreatePipelineAsyncStatus) == alignof(WGPUCreatePipelineAsyncStatus), \"alignof mismatch for CreatePipelineAsyncStatus\");\n\n    static_assert(static_cast<uint32_t>(CreatePipelineAsyncStatus::Success) == WGPUCreatePipelineAsyncStatus_Success, \"value mismatch for CreatePipelineAsyncStatus::Success\");\n    static_assert(static_cast<uint32_t>(CreatePipelineAsyncStatus::ValidationError) == WGPUCreatePipelineAsyncStatus_ValidationError, \"value mismatch for CreatePipelineAsyncStatus::ValidationError\");\n    static_assert(static_cast<uint32_t>(CreatePipelineAsyncStatus::InternalError) == WGPUCreatePipelineAsyncStatus_InternalError, \"value mismatch for CreatePipelineAsyncStatus::InternalError\");\n    static_assert(static_cast<uint32_t>(CreatePipelineAsyncStatus::DeviceLost) == WGPUCreatePipelineAsyncStatus_DeviceLost, \"value mismatch for CreatePipelineAsyncStatus::DeviceLost\");\n    static_assert(static_cast<uint32_t>(CreatePipelineAsyncStatus::DeviceDestroyed) == WGPUCreatePipelineAsyncStatus_DeviceDestroyed, \"value mismatch for CreatePipelineAsyncStatus::DeviceDestroyed\");\n    static_assert(static_cast<uint32_t>(CreatePipelineAsyncStatus::Unknown) == WGPUCreatePipelineAsyncStatus_Unknown, \"value mismatch for CreatePipelineAsyncStatus::Unknown\");\n\n    // CullMode\n\n    static_assert(sizeof(CullMode) == sizeof(WGPUCullMode), \"sizeof mismatch for CullMode\");\n    static_assert(alignof(CullMode) == alignof(WGPUCullMode), \"alignof mismatch for CullMode\");\n\n    static_assert(static_cast<uint32_t>(CullMode::None) == WGPUCullMode_None, \"value mismatch for CullMode::None\");\n    static_assert(static_cast<uint32_t>(CullMode::Front) == WGPUCullMode_Front, \"value mismatch for CullMode::Front\");\n    static_assert(static_cast<uint32_t>(CullMode::Back) == WGPUCullMode_Back, \"value mismatch for CullMode::Back\");\n\n    // DeviceLostReason\n\n    static_assert(sizeof(DeviceLostReason) == sizeof(WGPUDeviceLostReason), \"sizeof mismatch for DeviceLostReason\");\n    static_assert(alignof(DeviceLostReason) == alignof(WGPUDeviceLostReason), \"alignof mismatch for DeviceLostReason\");\n\n    static_assert(static_cast<uint32_t>(DeviceLostReason::Undefined) == WGPUDeviceLostReason_Undefined, \"value mismatch for DeviceLostReason::Undefined\");\n    static_assert(static_cast<uint32_t>(DeviceLostReason::Destroyed) == WGPUDeviceLostReason_Destroyed, \"value mismatch for DeviceLostReason::Destroyed\");\n\n    // ErrorFilter\n\n    static_assert(sizeof(ErrorFilter) == sizeof(WGPUErrorFilter), \"sizeof mismatch for ErrorFilter\");\n    static_assert(alignof(ErrorFilter) == alignof(WGPUErrorFilter), \"alignof mismatch for ErrorFilter\");\n\n    static_assert(static_cast<uint32_t>(ErrorFilter::Validation) == WGPUErrorFilter_Validation, \"value mismatch for ErrorFilter::Validation\");\n    static_assert(static_cast<uint32_t>(ErrorFilter::OutOfMemory) == WGPUErrorFilter_OutOfMemory, \"value mismatch for ErrorFilter::OutOfMemory\");\n    static_assert(static_cast<uint32_t>(ErrorFilter::Internal) == WGPUErrorFilter_Internal, \"value mismatch for ErrorFilter::Internal\");\n\n    // ErrorType\n\n    static_assert(sizeof(ErrorType) == sizeof(WGPUErrorType), \"sizeof mismatch for ErrorType\");\n    static_assert(alignof(ErrorType) == alignof(WGPUErrorType), \"alignof mismatch for ErrorType\");\n\n    static_assert(static_cast<uint32_t>(ErrorType::NoError) == WGPUErrorType_NoError, \"value mismatch for ErrorType::NoError\");\n    static_assert(static_cast<uint32_t>(ErrorType::Validation) == WGPUErrorType_Validation, \"value mismatch for ErrorType::Validation\");\n    static_assert(static_cast<uint32_t>(ErrorType::OutOfMemory) == WGPUErrorType_OutOfMemory, \"value mismatch for ErrorType::OutOfMemory\");\n    static_assert(static_cast<uint32_t>(ErrorType::Internal) == WGPUErrorType_Internal, \"value mismatch for ErrorType::Internal\");\n    static_assert(static_cast<uint32_t>(ErrorType::Unknown) == WGPUErrorType_Unknown, \"value mismatch for ErrorType::Unknown\");\n    static_assert(static_cast<uint32_t>(ErrorType::DeviceLost) == WGPUErrorType_DeviceLost, \"value mismatch for ErrorType::DeviceLost\");\n\n    // ExternalTextureRotation\n\n    static_assert(sizeof(ExternalTextureRotation) == sizeof(WGPUExternalTextureRotation), \"sizeof mismatch for ExternalTextureRotation\");\n    static_assert(alignof(ExternalTextureRotation) == alignof(WGPUExternalTextureRotation), \"alignof mismatch for ExternalTextureRotation\");\n\n    static_assert(static_cast<uint32_t>(ExternalTextureRotation::Rotate0Degrees) == WGPUExternalTextureRotation_Rotate0Degrees, \"value mismatch for ExternalTextureRotation::Rotate0Degrees\");\n    static_assert(static_cast<uint32_t>(ExternalTextureRotation::Rotate90Degrees) == WGPUExternalTextureRotation_Rotate90Degrees, \"value mismatch for ExternalTextureRotation::Rotate90Degrees\");\n    static_assert(static_cast<uint32_t>(ExternalTextureRotation::Rotate180Degrees) == WGPUExternalTextureRotation_Rotate180Degrees, \"value mismatch for ExternalTextureRotation::Rotate180Degrees\");\n    static_assert(static_cast<uint32_t>(ExternalTextureRotation::Rotate270Degrees) == WGPUExternalTextureRotation_Rotate270Degrees, \"value mismatch for ExternalTextureRotation::Rotate270Degrees\");\n\n    // FeatureName\n\n    static_assert(sizeof(FeatureName) == sizeof(WGPUFeatureName), \"sizeof mismatch for FeatureName\");\n    static_assert(alignof(FeatureName) == alignof(WGPUFeatureName), \"alignof mismatch for FeatureName\");\n\n    static_assert(static_cast<uint32_t>(FeatureName::Undefined) == WGPUFeatureName_Undefined, \"value mismatch for FeatureName::Undefined\");\n    static_assert(static_cast<uint32_t>(FeatureName::DepthClipControl) == WGPUFeatureName_DepthClipControl, \"value mismatch for FeatureName::DepthClipControl\");\n    static_assert(static_cast<uint32_t>(FeatureName::Depth32FloatStencil8) == WGPUFeatureName_Depth32FloatStencil8, \"value mismatch for FeatureName::Depth32FloatStencil8\");\n    static_assert(static_cast<uint32_t>(FeatureName::TimestampQuery) == WGPUFeatureName_TimestampQuery, \"value mismatch for FeatureName::TimestampQuery\");\n    static_assert(static_cast<uint32_t>(FeatureName::PipelineStatisticsQuery) == WGPUFeatureName_PipelineStatisticsQuery, \"value mismatch for FeatureName::PipelineStatisticsQuery\");\n    static_assert(static_cast<uint32_t>(FeatureName::TextureCompressionBC) == WGPUFeatureName_TextureCompressionBC, \"value mismatch for FeatureName::TextureCompressionBC\");\n    static_assert(static_cast<uint32_t>(FeatureName::TextureCompressionETC2) == WGPUFeatureName_TextureCompressionETC2, \"value mismatch for FeatureName::TextureCompressionETC2\");\n    static_assert(static_cast<uint32_t>(FeatureName::TextureCompressionASTC) == WGPUFeatureName_TextureCompressionASTC, \"value mismatch for FeatureName::TextureCompressionASTC\");\n    static_assert(static_cast<uint32_t>(FeatureName::IndirectFirstInstance) == WGPUFeatureName_IndirectFirstInstance, \"value mismatch for FeatureName::IndirectFirstInstance\");\n    static_assert(static_cast<uint32_t>(FeatureName::ShaderF16) == WGPUFeatureName_ShaderF16, \"value mismatch for FeatureName::ShaderF16\");\n    static_assert(static_cast<uint32_t>(FeatureName::RG11B10UfloatRenderable) == WGPUFeatureName_RG11B10UfloatRenderable, \"value mismatch for FeatureName::RG11B10UfloatRenderable\");\n    static_assert(static_cast<uint32_t>(FeatureName::BGRA8UnormStorage) == WGPUFeatureName_BGRA8UnormStorage, \"value mismatch for FeatureName::BGRA8UnormStorage\");\n    static_assert(static_cast<uint32_t>(FeatureName::Float32Filterable) == WGPUFeatureName_Float32Filterable, \"value mismatch for FeatureName::Float32Filterable\");\n    static_assert(static_cast<uint32_t>(FeatureName::DawnInternalUsages) == WGPUFeatureName_DawnInternalUsages, \"value mismatch for FeatureName::DawnInternalUsages\");\n    static_assert(static_cast<uint32_t>(FeatureName::DawnMultiPlanarFormats) == WGPUFeatureName_DawnMultiPlanarFormats, \"value mismatch for FeatureName::DawnMultiPlanarFormats\");\n    static_assert(static_cast<uint32_t>(FeatureName::DawnNative) == WGPUFeatureName_DawnNative, \"value mismatch for FeatureName::DawnNative\");\n    static_assert(static_cast<uint32_t>(FeatureName::ChromiumExperimentalDp4a) == WGPUFeatureName_ChromiumExperimentalDp4a, \"value mismatch for FeatureName::ChromiumExperimentalDp4a\");\n    static_assert(static_cast<uint32_t>(FeatureName::TimestampQueryInsidePasses) == WGPUFeatureName_TimestampQueryInsidePasses, \"value mismatch for FeatureName::TimestampQueryInsidePasses\");\n    static_assert(static_cast<uint32_t>(FeatureName::ImplicitDeviceSynchronization) == WGPUFeatureName_ImplicitDeviceSynchronization, \"value mismatch for FeatureName::ImplicitDeviceSynchronization\");\n    static_assert(static_cast<uint32_t>(FeatureName::SurfaceCapabilities) == WGPUFeatureName_SurfaceCapabilities, \"value mismatch for FeatureName::SurfaceCapabilities\");\n    static_assert(static_cast<uint32_t>(FeatureName::TransientAttachments) == WGPUFeatureName_TransientAttachments, \"value mismatch for FeatureName::TransientAttachments\");\n    static_assert(static_cast<uint32_t>(FeatureName::MSAARenderToSingleSampled) == WGPUFeatureName_MSAARenderToSingleSampled, \"value mismatch for FeatureName::MSAARenderToSingleSampled\");\n    static_assert(static_cast<uint32_t>(FeatureName::DualSourceBlending) == WGPUFeatureName_DualSourceBlending, \"value mismatch for FeatureName::DualSourceBlending\");\n    static_assert(static_cast<uint32_t>(FeatureName::D3D11MultithreadProtected) == WGPUFeatureName_D3D11MultithreadProtected, \"value mismatch for FeatureName::D3D11MultithreadProtected\");\n    static_assert(static_cast<uint32_t>(FeatureName::ANGLETextureSharing) == WGPUFeatureName_ANGLETextureSharing, \"value mismatch for FeatureName::ANGLETextureSharing\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedTextureMemoryVkDedicatedAllocation) == WGPUFeatureName_SharedTextureMemoryVkDedicatedAllocation, \"value mismatch for FeatureName::SharedTextureMemoryVkDedicatedAllocation\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedTextureMemoryAHardwareBuffer) == WGPUFeatureName_SharedTextureMemoryAHardwareBuffer, \"value mismatch for FeatureName::SharedTextureMemoryAHardwareBuffer\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedTextureMemoryDmaBuf) == WGPUFeatureName_SharedTextureMemoryDmaBuf, \"value mismatch for FeatureName::SharedTextureMemoryDmaBuf\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedTextureMemoryOpaqueFD) == WGPUFeatureName_SharedTextureMemoryOpaqueFD, \"value mismatch for FeatureName::SharedTextureMemoryOpaqueFD\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedTextureMemoryZirconHandle) == WGPUFeatureName_SharedTextureMemoryZirconHandle, \"value mismatch for FeatureName::SharedTextureMemoryZirconHandle\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedTextureMemoryDXGISharedHandle) == WGPUFeatureName_SharedTextureMemoryDXGISharedHandle, \"value mismatch for FeatureName::SharedTextureMemoryDXGISharedHandle\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedTextureMemoryD3D11Texture2D) == WGPUFeatureName_SharedTextureMemoryD3D11Texture2D, \"value mismatch for FeatureName::SharedTextureMemoryD3D11Texture2D\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedTextureMemoryIOSurface) == WGPUFeatureName_SharedTextureMemoryIOSurface, \"value mismatch for FeatureName::SharedTextureMemoryIOSurface\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedTextureMemoryEGLImage) == WGPUFeatureName_SharedTextureMemoryEGLImage, \"value mismatch for FeatureName::SharedTextureMemoryEGLImage\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedFenceVkSemaphoreOpaqueFD) == WGPUFeatureName_SharedFenceVkSemaphoreOpaqueFD, \"value mismatch for FeatureName::SharedFenceVkSemaphoreOpaqueFD\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedFenceVkSemaphoreSyncFD) == WGPUFeatureName_SharedFenceVkSemaphoreSyncFD, \"value mismatch for FeatureName::SharedFenceVkSemaphoreSyncFD\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedFenceVkSemaphoreZirconHandle) == WGPUFeatureName_SharedFenceVkSemaphoreZirconHandle, \"value mismatch for FeatureName::SharedFenceVkSemaphoreZirconHandle\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedFenceDXGISharedHandle) == WGPUFeatureName_SharedFenceDXGISharedHandle, \"value mismatch for FeatureName::SharedFenceDXGISharedHandle\");\n    static_assert(static_cast<uint32_t>(FeatureName::SharedFenceMTLSharedEvent) == WGPUFeatureName_SharedFenceMTLSharedEvent, \"value mismatch for FeatureName::SharedFenceMTLSharedEvent\");\n\n    // FilterMode\n\n    static_assert(sizeof(FilterMode) == sizeof(WGPUFilterMode), \"sizeof mismatch for FilterMode\");\n    static_assert(alignof(FilterMode) == alignof(WGPUFilterMode), \"alignof mismatch for FilterMode\");\n\n    static_assert(static_cast<uint32_t>(FilterMode::Nearest) == WGPUFilterMode_Nearest, \"value mismatch for FilterMode::Nearest\");\n    static_assert(static_cast<uint32_t>(FilterMode::Linear) == WGPUFilterMode_Linear, \"value mismatch for FilterMode::Linear\");\n\n    // FrontFace\n\n    static_assert(sizeof(FrontFace) == sizeof(WGPUFrontFace), \"sizeof mismatch for FrontFace\");\n    static_assert(alignof(FrontFace) == alignof(WGPUFrontFace), \"alignof mismatch for FrontFace\");\n\n    static_assert(static_cast<uint32_t>(FrontFace::CCW) == WGPUFrontFace_CCW, \"value mismatch for FrontFace::CCW\");\n    static_assert(static_cast<uint32_t>(FrontFace::CW) == WGPUFrontFace_CW, \"value mismatch for FrontFace::CW\");\n\n    // IndexFormat\n\n    static_assert(sizeof(IndexFormat) == sizeof(WGPUIndexFormat), \"sizeof mismatch for IndexFormat\");\n    static_assert(alignof(IndexFormat) == alignof(WGPUIndexFormat), \"alignof mismatch for IndexFormat\");\n\n    static_assert(static_cast<uint32_t>(IndexFormat::Undefined) == WGPUIndexFormat_Undefined, \"value mismatch for IndexFormat::Undefined\");\n    static_assert(static_cast<uint32_t>(IndexFormat::Uint16) == WGPUIndexFormat_Uint16, \"value mismatch for IndexFormat::Uint16\");\n    static_assert(static_cast<uint32_t>(IndexFormat::Uint32) == WGPUIndexFormat_Uint32, \"value mismatch for IndexFormat::Uint32\");\n\n    // LoadOp\n\n    static_assert(sizeof(LoadOp) == sizeof(WGPULoadOp), \"sizeof mismatch for LoadOp\");\n    static_assert(alignof(LoadOp) == alignof(WGPULoadOp), \"alignof mismatch for LoadOp\");\n\n    static_assert(static_cast<uint32_t>(LoadOp::Undefined) == WGPULoadOp_Undefined, \"value mismatch for LoadOp::Undefined\");\n    static_assert(static_cast<uint32_t>(LoadOp::Clear) == WGPULoadOp_Clear, \"value mismatch for LoadOp::Clear\");\n    static_assert(static_cast<uint32_t>(LoadOp::Load) == WGPULoadOp_Load, \"value mismatch for LoadOp::Load\");\n\n    // LoggingType\n\n    static_assert(sizeof(LoggingType) == sizeof(WGPULoggingType), \"sizeof mismatch for LoggingType\");\n    static_assert(alignof(LoggingType) == alignof(WGPULoggingType), \"alignof mismatch for LoggingType\");\n\n    static_assert(static_cast<uint32_t>(LoggingType::Verbose) == WGPULoggingType_Verbose, \"value mismatch for LoggingType::Verbose\");\n    static_assert(static_cast<uint32_t>(LoggingType::Info) == WGPULoggingType_Info, \"value mismatch for LoggingType::Info\");\n    static_assert(static_cast<uint32_t>(LoggingType::Warning) == WGPULoggingType_Warning, \"value mismatch for LoggingType::Warning\");\n    static_assert(static_cast<uint32_t>(LoggingType::Error) == WGPULoggingType_Error, \"value mismatch for LoggingType::Error\");\n\n    // MipmapFilterMode\n\n    static_assert(sizeof(MipmapFilterMode) == sizeof(WGPUMipmapFilterMode), \"sizeof mismatch for MipmapFilterMode\");\n    static_assert(alignof(MipmapFilterMode) == alignof(WGPUMipmapFilterMode), \"alignof mismatch for MipmapFilterMode\");\n\n    static_assert(static_cast<uint32_t>(MipmapFilterMode::Nearest) == WGPUMipmapFilterMode_Nearest, \"value mismatch for MipmapFilterMode::Nearest\");\n    static_assert(static_cast<uint32_t>(MipmapFilterMode::Linear) == WGPUMipmapFilterMode_Linear, \"value mismatch for MipmapFilterMode::Linear\");\n\n    // PipelineStatisticName\n\n    static_assert(sizeof(PipelineStatisticName) == sizeof(WGPUPipelineStatisticName), \"sizeof mismatch for PipelineStatisticName\");\n    static_assert(alignof(PipelineStatisticName) == alignof(WGPUPipelineStatisticName), \"alignof mismatch for PipelineStatisticName\");\n\n    static_assert(static_cast<uint32_t>(PipelineStatisticName::VertexShaderInvocations) == WGPUPipelineStatisticName_VertexShaderInvocations, \"value mismatch for PipelineStatisticName::VertexShaderInvocations\");\n    static_assert(static_cast<uint32_t>(PipelineStatisticName::ClipperInvocations) == WGPUPipelineStatisticName_ClipperInvocations, \"value mismatch for PipelineStatisticName::ClipperInvocations\");\n    static_assert(static_cast<uint32_t>(PipelineStatisticName::ClipperPrimitivesOut) == WGPUPipelineStatisticName_ClipperPrimitivesOut, \"value mismatch for PipelineStatisticName::ClipperPrimitivesOut\");\n    static_assert(static_cast<uint32_t>(PipelineStatisticName::FragmentShaderInvocations) == WGPUPipelineStatisticName_FragmentShaderInvocations, \"value mismatch for PipelineStatisticName::FragmentShaderInvocations\");\n    static_assert(static_cast<uint32_t>(PipelineStatisticName::ComputeShaderInvocations) == WGPUPipelineStatisticName_ComputeShaderInvocations, \"value mismatch for PipelineStatisticName::ComputeShaderInvocations\");\n\n    // PowerPreference\n\n    static_assert(sizeof(PowerPreference) == sizeof(WGPUPowerPreference), \"sizeof mismatch for PowerPreference\");\n    static_assert(alignof(PowerPreference) == alignof(WGPUPowerPreference), \"alignof mismatch for PowerPreference\");\n\n    static_assert(static_cast<uint32_t>(PowerPreference::Undefined) == WGPUPowerPreference_Undefined, \"value mismatch for PowerPreference::Undefined\");\n    static_assert(static_cast<uint32_t>(PowerPreference::LowPower) == WGPUPowerPreference_LowPower, \"value mismatch for PowerPreference::LowPower\");\n    static_assert(static_cast<uint32_t>(PowerPreference::HighPerformance) == WGPUPowerPreference_HighPerformance, \"value mismatch for PowerPreference::HighPerformance\");\n\n    // PresentMode\n\n    static_assert(sizeof(PresentMode) == sizeof(WGPUPresentMode), \"sizeof mismatch for PresentMode\");\n    static_assert(alignof(PresentMode) == alignof(WGPUPresentMode), \"alignof mismatch for PresentMode\");\n\n    static_assert(static_cast<uint32_t>(PresentMode::Immediate) == WGPUPresentMode_Immediate, \"value mismatch for PresentMode::Immediate\");\n    static_assert(static_cast<uint32_t>(PresentMode::Mailbox) == WGPUPresentMode_Mailbox, \"value mismatch for PresentMode::Mailbox\");\n    static_assert(static_cast<uint32_t>(PresentMode::Fifo) == WGPUPresentMode_Fifo, \"value mismatch for PresentMode::Fifo\");\n\n    // PrimitiveTopology\n\n    static_assert(sizeof(PrimitiveTopology) == sizeof(WGPUPrimitiveTopology), \"sizeof mismatch for PrimitiveTopology\");\n    static_assert(alignof(PrimitiveTopology) == alignof(WGPUPrimitiveTopology), \"alignof mismatch for PrimitiveTopology\");\n\n    static_assert(static_cast<uint32_t>(PrimitiveTopology::PointList) == WGPUPrimitiveTopology_PointList, \"value mismatch for PrimitiveTopology::PointList\");\n    static_assert(static_cast<uint32_t>(PrimitiveTopology::LineList) == WGPUPrimitiveTopology_LineList, \"value mismatch for PrimitiveTopology::LineList\");\n    static_assert(static_cast<uint32_t>(PrimitiveTopology::LineStrip) == WGPUPrimitiveTopology_LineStrip, \"value mismatch for PrimitiveTopology::LineStrip\");\n    static_assert(static_cast<uint32_t>(PrimitiveTopology::TriangleList) == WGPUPrimitiveTopology_TriangleList, \"value mismatch for PrimitiveTopology::TriangleList\");\n    static_assert(static_cast<uint32_t>(PrimitiveTopology::TriangleStrip) == WGPUPrimitiveTopology_TriangleStrip, \"value mismatch for PrimitiveTopology::TriangleStrip\");\n\n    // QueryType\n\n    static_assert(sizeof(QueryType) == sizeof(WGPUQueryType), \"sizeof mismatch for QueryType\");\n    static_assert(alignof(QueryType) == alignof(WGPUQueryType), \"alignof mismatch for QueryType\");\n\n    static_assert(static_cast<uint32_t>(QueryType::Occlusion) == WGPUQueryType_Occlusion, \"value mismatch for QueryType::Occlusion\");\n    static_assert(static_cast<uint32_t>(QueryType::PipelineStatistics) == WGPUQueryType_PipelineStatistics, \"value mismatch for QueryType::PipelineStatistics\");\n    static_assert(static_cast<uint32_t>(QueryType::Timestamp) == WGPUQueryType_Timestamp, \"value mismatch for QueryType::Timestamp\");\n\n    // QueueWorkDoneStatus\n\n    static_assert(sizeof(QueueWorkDoneStatus) == sizeof(WGPUQueueWorkDoneStatus), \"sizeof mismatch for QueueWorkDoneStatus\");\n    static_assert(alignof(QueueWorkDoneStatus) == alignof(WGPUQueueWorkDoneStatus), \"alignof mismatch for QueueWorkDoneStatus\");\n\n    static_assert(static_cast<uint32_t>(QueueWorkDoneStatus::Success) == WGPUQueueWorkDoneStatus_Success, \"value mismatch for QueueWorkDoneStatus::Success\");\n    static_assert(static_cast<uint32_t>(QueueWorkDoneStatus::Error) == WGPUQueueWorkDoneStatus_Error, \"value mismatch for QueueWorkDoneStatus::Error\");\n    static_assert(static_cast<uint32_t>(QueueWorkDoneStatus::Unknown) == WGPUQueueWorkDoneStatus_Unknown, \"value mismatch for QueueWorkDoneStatus::Unknown\");\n    static_assert(static_cast<uint32_t>(QueueWorkDoneStatus::DeviceLost) == WGPUQueueWorkDoneStatus_DeviceLost, \"value mismatch for QueueWorkDoneStatus::DeviceLost\");\n\n    // RenderPassTimestampLocation\n\n    static_assert(sizeof(RenderPassTimestampLocation) == sizeof(WGPURenderPassTimestampLocation), \"sizeof mismatch for RenderPassTimestampLocation\");\n    static_assert(alignof(RenderPassTimestampLocation) == alignof(WGPURenderPassTimestampLocation), \"alignof mismatch for RenderPassTimestampLocation\");\n\n    static_assert(static_cast<uint32_t>(RenderPassTimestampLocation::Beginning) == WGPURenderPassTimestampLocation_Beginning, \"value mismatch for RenderPassTimestampLocation::Beginning\");\n    static_assert(static_cast<uint32_t>(RenderPassTimestampLocation::End) == WGPURenderPassTimestampLocation_End, \"value mismatch for RenderPassTimestampLocation::End\");\n\n    // RequestAdapterStatus\n\n    static_assert(sizeof(RequestAdapterStatus) == sizeof(WGPURequestAdapterStatus), \"sizeof mismatch for RequestAdapterStatus\");\n    static_assert(alignof(RequestAdapterStatus) == alignof(WGPURequestAdapterStatus), \"alignof mismatch for RequestAdapterStatus\");\n\n    static_assert(static_cast<uint32_t>(RequestAdapterStatus::Success) == WGPURequestAdapterStatus_Success, \"value mismatch for RequestAdapterStatus::Success\");\n    static_assert(static_cast<uint32_t>(RequestAdapterStatus::Unavailable) == WGPURequestAdapterStatus_Unavailable, \"value mismatch for RequestAdapterStatus::Unavailable\");\n    static_assert(static_cast<uint32_t>(RequestAdapterStatus::Error) == WGPURequestAdapterStatus_Error, \"value mismatch for RequestAdapterStatus::Error\");\n    static_assert(static_cast<uint32_t>(RequestAdapterStatus::Unknown) == WGPURequestAdapterStatus_Unknown, \"value mismatch for RequestAdapterStatus::Unknown\");\n\n    // RequestDeviceStatus\n\n    static_assert(sizeof(RequestDeviceStatus) == sizeof(WGPURequestDeviceStatus), \"sizeof mismatch for RequestDeviceStatus\");\n    static_assert(alignof(RequestDeviceStatus) == alignof(WGPURequestDeviceStatus), \"alignof mismatch for RequestDeviceStatus\");\n\n    static_assert(static_cast<uint32_t>(RequestDeviceStatus::Success) == WGPURequestDeviceStatus_Success, \"value mismatch for RequestDeviceStatus::Success\");\n    static_assert(static_cast<uint32_t>(RequestDeviceStatus::Error) == WGPURequestDeviceStatus_Error, \"value mismatch for RequestDeviceStatus::Error\");\n    static_assert(static_cast<uint32_t>(RequestDeviceStatus::Unknown) == WGPURequestDeviceStatus_Unknown, \"value mismatch for RequestDeviceStatus::Unknown\");\n\n    // SType\n\n    static_assert(sizeof(SType) == sizeof(WGPUSType), \"sizeof mismatch for SType\");\n    static_assert(alignof(SType) == alignof(WGPUSType), \"alignof mismatch for SType\");\n\n    static_assert(static_cast<uint32_t>(SType::Invalid) == WGPUSType_Invalid, \"value mismatch for SType::Invalid\");\n    static_assert(static_cast<uint32_t>(SType::SurfaceDescriptorFromMetalLayer) == WGPUSType_SurfaceDescriptorFromMetalLayer, \"value mismatch for SType::SurfaceDescriptorFromMetalLayer\");\n    static_assert(static_cast<uint32_t>(SType::SurfaceDescriptorFromWindowsHWND) == WGPUSType_SurfaceDescriptorFromWindowsHWND, \"value mismatch for SType::SurfaceDescriptorFromWindowsHWND\");\n    static_assert(static_cast<uint32_t>(SType::SurfaceDescriptorFromXlibWindow) == WGPUSType_SurfaceDescriptorFromXlibWindow, \"value mismatch for SType::SurfaceDescriptorFromXlibWindow\");\n    static_assert(static_cast<uint32_t>(SType::SurfaceDescriptorFromCanvasHTMLSelector) == WGPUSType_SurfaceDescriptorFromCanvasHTMLSelector, \"value mismatch for SType::SurfaceDescriptorFromCanvasHTMLSelector\");\n    static_assert(static_cast<uint32_t>(SType::ShaderModuleSPIRVDescriptor) == WGPUSType_ShaderModuleSPIRVDescriptor, \"value mismatch for SType::ShaderModuleSPIRVDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::ShaderModuleWGSLDescriptor) == WGPUSType_ShaderModuleWGSLDescriptor, \"value mismatch for SType::ShaderModuleWGSLDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::PrimitiveDepthClipControl) == WGPUSType_PrimitiveDepthClipControl, \"value mismatch for SType::PrimitiveDepthClipControl\");\n    static_assert(static_cast<uint32_t>(SType::SurfaceDescriptorFromWaylandSurface) == WGPUSType_SurfaceDescriptorFromWaylandSurface, \"value mismatch for SType::SurfaceDescriptorFromWaylandSurface\");\n    static_assert(static_cast<uint32_t>(SType::SurfaceDescriptorFromAndroidNativeWindow) == WGPUSType_SurfaceDescriptorFromAndroidNativeWindow, \"value mismatch for SType::SurfaceDescriptorFromAndroidNativeWindow\");\n    static_assert(static_cast<uint32_t>(SType::SurfaceDescriptorFromWindowsCoreWindow) == WGPUSType_SurfaceDescriptorFromWindowsCoreWindow, \"value mismatch for SType::SurfaceDescriptorFromWindowsCoreWindow\");\n    static_assert(static_cast<uint32_t>(SType::ExternalTextureBindingEntry) == WGPUSType_ExternalTextureBindingEntry, \"value mismatch for SType::ExternalTextureBindingEntry\");\n    static_assert(static_cast<uint32_t>(SType::ExternalTextureBindingLayout) == WGPUSType_ExternalTextureBindingLayout, \"value mismatch for SType::ExternalTextureBindingLayout\");\n    static_assert(static_cast<uint32_t>(SType::SurfaceDescriptorFromWindowsSwapChainPanel) == WGPUSType_SurfaceDescriptorFromWindowsSwapChainPanel, \"value mismatch for SType::SurfaceDescriptorFromWindowsSwapChainPanel\");\n    static_assert(static_cast<uint32_t>(SType::RenderPassDescriptorMaxDrawCount) == WGPUSType_RenderPassDescriptorMaxDrawCount, \"value mismatch for SType::RenderPassDescriptorMaxDrawCount\");\n    static_assert(static_cast<uint32_t>(SType::DawnTextureInternalUsageDescriptor) == WGPUSType_DawnTextureInternalUsageDescriptor, \"value mismatch for SType::DawnTextureInternalUsageDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::DawnEncoderInternalUsageDescriptor) == WGPUSType_DawnEncoderInternalUsageDescriptor, \"value mismatch for SType::DawnEncoderInternalUsageDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::DawnInstanceDescriptor) == WGPUSType_DawnInstanceDescriptor, \"value mismatch for SType::DawnInstanceDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::DawnCacheDeviceDescriptor) == WGPUSType_DawnCacheDeviceDescriptor, \"value mismatch for SType::DawnCacheDeviceDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::DawnAdapterPropertiesPowerPreference) == WGPUSType_DawnAdapterPropertiesPowerPreference, \"value mismatch for SType::DawnAdapterPropertiesPowerPreference\");\n    static_assert(static_cast<uint32_t>(SType::DawnBufferDescriptorErrorInfoFromWireClient) == WGPUSType_DawnBufferDescriptorErrorInfoFromWireClient, \"value mismatch for SType::DawnBufferDescriptorErrorInfoFromWireClient\");\n    static_assert(static_cast<uint32_t>(SType::DawnTogglesDescriptor) == WGPUSType_DawnTogglesDescriptor, \"value mismatch for SType::DawnTogglesDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::DawnShaderModuleSPIRVOptionsDescriptor) == WGPUSType_DawnShaderModuleSPIRVOptionsDescriptor, \"value mismatch for SType::DawnShaderModuleSPIRVOptionsDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::RequestAdapterOptionsLUID) == WGPUSType_RequestAdapterOptionsLUID, \"value mismatch for SType::RequestAdapterOptionsLUID\");\n    static_assert(static_cast<uint32_t>(SType::RequestAdapterOptionsGetGLProc) == WGPUSType_RequestAdapterOptionsGetGLProc, \"value mismatch for SType::RequestAdapterOptionsGetGLProc\");\n    static_assert(static_cast<uint32_t>(SType::DawnMultisampleStateRenderToSingleSampled) == WGPUSType_DawnMultisampleStateRenderToSingleSampled, \"value mismatch for SType::DawnMultisampleStateRenderToSingleSampled\");\n    static_assert(static_cast<uint32_t>(SType::DawnRenderPassColorAttachmentRenderToSingleSampled) == WGPUSType_DawnRenderPassColorAttachmentRenderToSingleSampled, \"value mismatch for SType::DawnRenderPassColorAttachmentRenderToSingleSampled\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryVkImageDescriptor) == WGPUSType_SharedTextureMemoryVkImageDescriptor, \"value mismatch for SType::SharedTextureMemoryVkImageDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryVkDedicatedAllocationDescriptor) == WGPUSType_SharedTextureMemoryVkDedicatedAllocationDescriptor, \"value mismatch for SType::SharedTextureMemoryVkDedicatedAllocationDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryAHardwareBufferDescriptor) == WGPUSType_SharedTextureMemoryAHardwareBufferDescriptor, \"value mismatch for SType::SharedTextureMemoryAHardwareBufferDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryDmaBufDescriptor) == WGPUSType_SharedTextureMemoryDmaBufDescriptor, \"value mismatch for SType::SharedTextureMemoryDmaBufDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryOpaqueFDDescriptor) == WGPUSType_SharedTextureMemoryOpaqueFDDescriptor, \"value mismatch for SType::SharedTextureMemoryOpaqueFDDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryZirconHandleDescriptor) == WGPUSType_SharedTextureMemoryZirconHandleDescriptor, \"value mismatch for SType::SharedTextureMemoryZirconHandleDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryDXGISharedHandleDescriptor) == WGPUSType_SharedTextureMemoryDXGISharedHandleDescriptor, \"value mismatch for SType::SharedTextureMemoryDXGISharedHandleDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryD3D11Texture2DDescriptor) == WGPUSType_SharedTextureMemoryD3D11Texture2DDescriptor, \"value mismatch for SType::SharedTextureMemoryD3D11Texture2DDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryIOSurfaceDescriptor) == WGPUSType_SharedTextureMemoryIOSurfaceDescriptor, \"value mismatch for SType::SharedTextureMemoryIOSurfaceDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryEGLImageDescriptor) == WGPUSType_SharedTextureMemoryEGLImageDescriptor, \"value mismatch for SType::SharedTextureMemoryEGLImageDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryInitializedBeginState) == WGPUSType_SharedTextureMemoryInitializedBeginState, \"value mismatch for SType::SharedTextureMemoryInitializedBeginState\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryInitializedEndState) == WGPUSType_SharedTextureMemoryInitializedEndState, \"value mismatch for SType::SharedTextureMemoryInitializedEndState\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryVkImageLayoutBeginState) == WGPUSType_SharedTextureMemoryVkImageLayoutBeginState, \"value mismatch for SType::SharedTextureMemoryVkImageLayoutBeginState\");\n    static_assert(static_cast<uint32_t>(SType::SharedTextureMemoryVkImageLayoutEndState) == WGPUSType_SharedTextureMemoryVkImageLayoutEndState, \"value mismatch for SType::SharedTextureMemoryVkImageLayoutEndState\");\n    static_assert(static_cast<uint32_t>(SType::SharedFenceVkSemaphoreOpaqueFDDescriptor) == WGPUSType_SharedFenceVkSemaphoreOpaqueFDDescriptor, \"value mismatch for SType::SharedFenceVkSemaphoreOpaqueFDDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedFenceVkSemaphoreOpaqueFDExportInfo) == WGPUSType_SharedFenceVkSemaphoreOpaqueFDExportInfo, \"value mismatch for SType::SharedFenceVkSemaphoreOpaqueFDExportInfo\");\n    static_assert(static_cast<uint32_t>(SType::SharedFenceVkSemaphoreSyncFDDescriptor) == WGPUSType_SharedFenceVkSemaphoreSyncFDDescriptor, \"value mismatch for SType::SharedFenceVkSemaphoreSyncFDDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedFenceVkSemaphoreSyncFDExportInfo) == WGPUSType_SharedFenceVkSemaphoreSyncFDExportInfo, \"value mismatch for SType::SharedFenceVkSemaphoreSyncFDExportInfo\");\n    static_assert(static_cast<uint32_t>(SType::SharedFenceVkSemaphoreZirconHandleDescriptor) == WGPUSType_SharedFenceVkSemaphoreZirconHandleDescriptor, \"value mismatch for SType::SharedFenceVkSemaphoreZirconHandleDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedFenceVkSemaphoreZirconHandleExportInfo) == WGPUSType_SharedFenceVkSemaphoreZirconHandleExportInfo, \"value mismatch for SType::SharedFenceVkSemaphoreZirconHandleExportInfo\");\n    static_assert(static_cast<uint32_t>(SType::SharedFenceDXGISharedHandleDescriptor) == WGPUSType_SharedFenceDXGISharedHandleDescriptor, \"value mismatch for SType::SharedFenceDXGISharedHandleDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedFenceDXGISharedHandleExportInfo) == WGPUSType_SharedFenceDXGISharedHandleExportInfo, \"value mismatch for SType::SharedFenceDXGISharedHandleExportInfo\");\n    static_assert(static_cast<uint32_t>(SType::SharedFenceMTLSharedEventDescriptor) == WGPUSType_SharedFenceMTLSharedEventDescriptor, \"value mismatch for SType::SharedFenceMTLSharedEventDescriptor\");\n    static_assert(static_cast<uint32_t>(SType::SharedFenceMTLSharedEventExportInfo) == WGPUSType_SharedFenceMTLSharedEventExportInfo, \"value mismatch for SType::SharedFenceMTLSharedEventExportInfo\");\n\n    // SamplerBindingType\n\n    static_assert(sizeof(SamplerBindingType) == sizeof(WGPUSamplerBindingType), \"sizeof mismatch for SamplerBindingType\");\n    static_assert(alignof(SamplerBindingType) == alignof(WGPUSamplerBindingType), \"alignof mismatch for SamplerBindingType\");\n\n    static_assert(static_cast<uint32_t>(SamplerBindingType::Undefined) == WGPUSamplerBindingType_Undefined, \"value mismatch for SamplerBindingType::Undefined\");\n    static_assert(static_cast<uint32_t>(SamplerBindingType::Filtering) == WGPUSamplerBindingType_Filtering, \"value mismatch for SamplerBindingType::Filtering\");\n    static_assert(static_cast<uint32_t>(SamplerBindingType::NonFiltering) == WGPUSamplerBindingType_NonFiltering, \"value mismatch for SamplerBindingType::NonFiltering\");\n    static_assert(static_cast<uint32_t>(SamplerBindingType::Comparison) == WGPUSamplerBindingType_Comparison, \"value mismatch for SamplerBindingType::Comparison\");\n\n    // SharedFenceType\n\n    static_assert(sizeof(SharedFenceType) == sizeof(WGPUSharedFenceType), \"sizeof mismatch for SharedFenceType\");\n    static_assert(alignof(SharedFenceType) == alignof(WGPUSharedFenceType), \"alignof mismatch for SharedFenceType\");\n\n    static_assert(static_cast<uint32_t>(SharedFenceType::Undefined) == WGPUSharedFenceType_Undefined, \"value mismatch for SharedFenceType::Undefined\");\n    static_assert(static_cast<uint32_t>(SharedFenceType::VkSemaphoreOpaqueFD) == WGPUSharedFenceType_VkSemaphoreOpaqueFD, \"value mismatch for SharedFenceType::VkSemaphoreOpaqueFD\");\n    static_assert(static_cast<uint32_t>(SharedFenceType::VkSemaphoreSyncFD) == WGPUSharedFenceType_VkSemaphoreSyncFD, \"value mismatch for SharedFenceType::VkSemaphoreSyncFD\");\n    static_assert(static_cast<uint32_t>(SharedFenceType::VkSemaphoreZirconHandle) == WGPUSharedFenceType_VkSemaphoreZirconHandle, \"value mismatch for SharedFenceType::VkSemaphoreZirconHandle\");\n    static_assert(static_cast<uint32_t>(SharedFenceType::DXGISharedHandle) == WGPUSharedFenceType_DXGISharedHandle, \"value mismatch for SharedFenceType::DXGISharedHandle\");\n    static_assert(static_cast<uint32_t>(SharedFenceType::MTLSharedEvent) == WGPUSharedFenceType_MTLSharedEvent, \"value mismatch for SharedFenceType::MTLSharedEvent\");\n\n    // StencilOperation\n\n    static_assert(sizeof(StencilOperation) == sizeof(WGPUStencilOperation), \"sizeof mismatch for StencilOperation\");\n    static_assert(alignof(StencilOperation) == alignof(WGPUStencilOperation), \"alignof mismatch for StencilOperation\");\n\n    static_assert(static_cast<uint32_t>(StencilOperation::Keep) == WGPUStencilOperation_Keep, \"value mismatch for StencilOperation::Keep\");\n    static_assert(static_cast<uint32_t>(StencilOperation::Zero) == WGPUStencilOperation_Zero, \"value mismatch for StencilOperation::Zero\");\n    static_assert(static_cast<uint32_t>(StencilOperation::Replace) == WGPUStencilOperation_Replace, \"value mismatch for StencilOperation::Replace\");\n    static_assert(static_cast<uint32_t>(StencilOperation::Invert) == WGPUStencilOperation_Invert, \"value mismatch for StencilOperation::Invert\");\n    static_assert(static_cast<uint32_t>(StencilOperation::IncrementClamp) == WGPUStencilOperation_IncrementClamp, \"value mismatch for StencilOperation::IncrementClamp\");\n    static_assert(static_cast<uint32_t>(StencilOperation::DecrementClamp) == WGPUStencilOperation_DecrementClamp, \"value mismatch for StencilOperation::DecrementClamp\");\n    static_assert(static_cast<uint32_t>(StencilOperation::IncrementWrap) == WGPUStencilOperation_IncrementWrap, \"value mismatch for StencilOperation::IncrementWrap\");\n    static_assert(static_cast<uint32_t>(StencilOperation::DecrementWrap) == WGPUStencilOperation_DecrementWrap, \"value mismatch for StencilOperation::DecrementWrap\");\n\n    // StorageTextureAccess\n\n    static_assert(sizeof(StorageTextureAccess) == sizeof(WGPUStorageTextureAccess), \"sizeof mismatch for StorageTextureAccess\");\n    static_assert(alignof(StorageTextureAccess) == alignof(WGPUStorageTextureAccess), \"alignof mismatch for StorageTextureAccess\");\n\n    static_assert(static_cast<uint32_t>(StorageTextureAccess::Undefined) == WGPUStorageTextureAccess_Undefined, \"value mismatch for StorageTextureAccess::Undefined\");\n    static_assert(static_cast<uint32_t>(StorageTextureAccess::WriteOnly) == WGPUStorageTextureAccess_WriteOnly, \"value mismatch for StorageTextureAccess::WriteOnly\");\n\n    // StoreOp\n\n    static_assert(sizeof(StoreOp) == sizeof(WGPUStoreOp), \"sizeof mismatch for StoreOp\");\n    static_assert(alignof(StoreOp) == alignof(WGPUStoreOp), \"alignof mismatch for StoreOp\");\n\n    static_assert(static_cast<uint32_t>(StoreOp::Undefined) == WGPUStoreOp_Undefined, \"value mismatch for StoreOp::Undefined\");\n    static_assert(static_cast<uint32_t>(StoreOp::Store) == WGPUStoreOp_Store, \"value mismatch for StoreOp::Store\");\n    static_assert(static_cast<uint32_t>(StoreOp::Discard) == WGPUStoreOp_Discard, \"value mismatch for StoreOp::Discard\");\n\n    // TextureAspect\n\n    static_assert(sizeof(TextureAspect) == sizeof(WGPUTextureAspect), \"sizeof mismatch for TextureAspect\");\n    static_assert(alignof(TextureAspect) == alignof(WGPUTextureAspect), \"alignof mismatch for TextureAspect\");\n\n    static_assert(static_cast<uint32_t>(TextureAspect::All) == WGPUTextureAspect_All, \"value mismatch for TextureAspect::All\");\n    static_assert(static_cast<uint32_t>(TextureAspect::StencilOnly) == WGPUTextureAspect_StencilOnly, \"value mismatch for TextureAspect::StencilOnly\");\n    static_assert(static_cast<uint32_t>(TextureAspect::DepthOnly) == WGPUTextureAspect_DepthOnly, \"value mismatch for TextureAspect::DepthOnly\");\n    static_assert(static_cast<uint32_t>(TextureAspect::Plane0Only) == WGPUTextureAspect_Plane0Only, \"value mismatch for TextureAspect::Plane0Only\");\n    static_assert(static_cast<uint32_t>(TextureAspect::Plane1Only) == WGPUTextureAspect_Plane1Only, \"value mismatch for TextureAspect::Plane1Only\");\n\n    // TextureDimension\n\n    static_assert(sizeof(TextureDimension) == sizeof(WGPUTextureDimension), \"sizeof mismatch for TextureDimension\");\n    static_assert(alignof(TextureDimension) == alignof(WGPUTextureDimension), \"alignof mismatch for TextureDimension\");\n\n    static_assert(static_cast<uint32_t>(TextureDimension::e1D) == WGPUTextureDimension_1D, \"value mismatch for TextureDimension::e1D\");\n    static_assert(static_cast<uint32_t>(TextureDimension::e2D) == WGPUTextureDimension_2D, \"value mismatch for TextureDimension::e2D\");\n    static_assert(static_cast<uint32_t>(TextureDimension::e3D) == WGPUTextureDimension_3D, \"value mismatch for TextureDimension::e3D\");\n\n    // TextureFormat\n\n    static_assert(sizeof(TextureFormat) == sizeof(WGPUTextureFormat), \"sizeof mismatch for TextureFormat\");\n    static_assert(alignof(TextureFormat) == alignof(WGPUTextureFormat), \"alignof mismatch for TextureFormat\");\n\n    static_assert(static_cast<uint32_t>(TextureFormat::Undefined) == WGPUTextureFormat_Undefined, \"value mismatch for TextureFormat::Undefined\");\n    static_assert(static_cast<uint32_t>(TextureFormat::R8Unorm) == WGPUTextureFormat_R8Unorm, \"value mismatch for TextureFormat::R8Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::R8Snorm) == WGPUTextureFormat_R8Snorm, \"value mismatch for TextureFormat::R8Snorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::R8Uint) == WGPUTextureFormat_R8Uint, \"value mismatch for TextureFormat::R8Uint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::R8Sint) == WGPUTextureFormat_R8Sint, \"value mismatch for TextureFormat::R8Sint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::R16Uint) == WGPUTextureFormat_R16Uint, \"value mismatch for TextureFormat::R16Uint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::R16Sint) == WGPUTextureFormat_R16Sint, \"value mismatch for TextureFormat::R16Sint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::R16Float) == WGPUTextureFormat_R16Float, \"value mismatch for TextureFormat::R16Float\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RG8Unorm) == WGPUTextureFormat_RG8Unorm, \"value mismatch for TextureFormat::RG8Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RG8Snorm) == WGPUTextureFormat_RG8Snorm, \"value mismatch for TextureFormat::RG8Snorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RG8Uint) == WGPUTextureFormat_RG8Uint, \"value mismatch for TextureFormat::RG8Uint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RG8Sint) == WGPUTextureFormat_RG8Sint, \"value mismatch for TextureFormat::RG8Sint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::R32Float) == WGPUTextureFormat_R32Float, \"value mismatch for TextureFormat::R32Float\");\n    static_assert(static_cast<uint32_t>(TextureFormat::R32Uint) == WGPUTextureFormat_R32Uint, \"value mismatch for TextureFormat::R32Uint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::R32Sint) == WGPUTextureFormat_R32Sint, \"value mismatch for TextureFormat::R32Sint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RG16Uint) == WGPUTextureFormat_RG16Uint, \"value mismatch for TextureFormat::RG16Uint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RG16Sint) == WGPUTextureFormat_RG16Sint, \"value mismatch for TextureFormat::RG16Sint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RG16Float) == WGPUTextureFormat_RG16Float, \"value mismatch for TextureFormat::RG16Float\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGBA8Unorm) == WGPUTextureFormat_RGBA8Unorm, \"value mismatch for TextureFormat::RGBA8Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGBA8UnormSrgb) == WGPUTextureFormat_RGBA8UnormSrgb, \"value mismatch for TextureFormat::RGBA8UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGBA8Snorm) == WGPUTextureFormat_RGBA8Snorm, \"value mismatch for TextureFormat::RGBA8Snorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGBA8Uint) == WGPUTextureFormat_RGBA8Uint, \"value mismatch for TextureFormat::RGBA8Uint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGBA8Sint) == WGPUTextureFormat_RGBA8Sint, \"value mismatch for TextureFormat::RGBA8Sint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BGRA8Unorm) == WGPUTextureFormat_BGRA8Unorm, \"value mismatch for TextureFormat::BGRA8Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BGRA8UnormSrgb) == WGPUTextureFormat_BGRA8UnormSrgb, \"value mismatch for TextureFormat::BGRA8UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGB10A2Unorm) == WGPUTextureFormat_RGB10A2Unorm, \"value mismatch for TextureFormat::RGB10A2Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RG11B10Ufloat) == WGPUTextureFormat_RG11B10Ufloat, \"value mismatch for TextureFormat::RG11B10Ufloat\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGB9E5Ufloat) == WGPUTextureFormat_RGB9E5Ufloat, \"value mismatch for TextureFormat::RGB9E5Ufloat\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RG32Float) == WGPUTextureFormat_RG32Float, \"value mismatch for TextureFormat::RG32Float\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RG32Uint) == WGPUTextureFormat_RG32Uint, \"value mismatch for TextureFormat::RG32Uint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RG32Sint) == WGPUTextureFormat_RG32Sint, \"value mismatch for TextureFormat::RG32Sint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGBA16Uint) == WGPUTextureFormat_RGBA16Uint, \"value mismatch for TextureFormat::RGBA16Uint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGBA16Sint) == WGPUTextureFormat_RGBA16Sint, \"value mismatch for TextureFormat::RGBA16Sint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGBA16Float) == WGPUTextureFormat_RGBA16Float, \"value mismatch for TextureFormat::RGBA16Float\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGBA32Float) == WGPUTextureFormat_RGBA32Float, \"value mismatch for TextureFormat::RGBA32Float\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGBA32Uint) == WGPUTextureFormat_RGBA32Uint, \"value mismatch for TextureFormat::RGBA32Uint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::RGBA32Sint) == WGPUTextureFormat_RGBA32Sint, \"value mismatch for TextureFormat::RGBA32Sint\");\n    static_assert(static_cast<uint32_t>(TextureFormat::Stencil8) == WGPUTextureFormat_Stencil8, \"value mismatch for TextureFormat::Stencil8\");\n    static_assert(static_cast<uint32_t>(TextureFormat::Depth16Unorm) == WGPUTextureFormat_Depth16Unorm, \"value mismatch for TextureFormat::Depth16Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::Depth24Plus) == WGPUTextureFormat_Depth24Plus, \"value mismatch for TextureFormat::Depth24Plus\");\n    static_assert(static_cast<uint32_t>(TextureFormat::Depth24PlusStencil8) == WGPUTextureFormat_Depth24PlusStencil8, \"value mismatch for TextureFormat::Depth24PlusStencil8\");\n    static_assert(static_cast<uint32_t>(TextureFormat::Depth32Float) == WGPUTextureFormat_Depth32Float, \"value mismatch for TextureFormat::Depth32Float\");\n    static_assert(static_cast<uint32_t>(TextureFormat::Depth32FloatStencil8) == WGPUTextureFormat_Depth32FloatStencil8, \"value mismatch for TextureFormat::Depth32FloatStencil8\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC1RGBAUnorm) == WGPUTextureFormat_BC1RGBAUnorm, \"value mismatch for TextureFormat::BC1RGBAUnorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC1RGBAUnormSrgb) == WGPUTextureFormat_BC1RGBAUnormSrgb, \"value mismatch for TextureFormat::BC1RGBAUnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC2RGBAUnorm) == WGPUTextureFormat_BC2RGBAUnorm, \"value mismatch for TextureFormat::BC2RGBAUnorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC2RGBAUnormSrgb) == WGPUTextureFormat_BC2RGBAUnormSrgb, \"value mismatch for TextureFormat::BC2RGBAUnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC3RGBAUnorm) == WGPUTextureFormat_BC3RGBAUnorm, \"value mismatch for TextureFormat::BC3RGBAUnorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC3RGBAUnormSrgb) == WGPUTextureFormat_BC3RGBAUnormSrgb, \"value mismatch for TextureFormat::BC3RGBAUnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC4RUnorm) == WGPUTextureFormat_BC4RUnorm, \"value mismatch for TextureFormat::BC4RUnorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC4RSnorm) == WGPUTextureFormat_BC4RSnorm, \"value mismatch for TextureFormat::BC4RSnorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC5RGUnorm) == WGPUTextureFormat_BC5RGUnorm, \"value mismatch for TextureFormat::BC5RGUnorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC5RGSnorm) == WGPUTextureFormat_BC5RGSnorm, \"value mismatch for TextureFormat::BC5RGSnorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC6HRGBUfloat) == WGPUTextureFormat_BC6HRGBUfloat, \"value mismatch for TextureFormat::BC6HRGBUfloat\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC6HRGBFloat) == WGPUTextureFormat_BC6HRGBFloat, \"value mismatch for TextureFormat::BC6HRGBFloat\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC7RGBAUnorm) == WGPUTextureFormat_BC7RGBAUnorm, \"value mismatch for TextureFormat::BC7RGBAUnorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::BC7RGBAUnormSrgb) == WGPUTextureFormat_BC7RGBAUnormSrgb, \"value mismatch for TextureFormat::BC7RGBAUnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ETC2RGB8Unorm) == WGPUTextureFormat_ETC2RGB8Unorm, \"value mismatch for TextureFormat::ETC2RGB8Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ETC2RGB8UnormSrgb) == WGPUTextureFormat_ETC2RGB8UnormSrgb, \"value mismatch for TextureFormat::ETC2RGB8UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ETC2RGB8A1Unorm) == WGPUTextureFormat_ETC2RGB8A1Unorm, \"value mismatch for TextureFormat::ETC2RGB8A1Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ETC2RGB8A1UnormSrgb) == WGPUTextureFormat_ETC2RGB8A1UnormSrgb, \"value mismatch for TextureFormat::ETC2RGB8A1UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ETC2RGBA8Unorm) == WGPUTextureFormat_ETC2RGBA8Unorm, \"value mismatch for TextureFormat::ETC2RGBA8Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ETC2RGBA8UnormSrgb) == WGPUTextureFormat_ETC2RGBA8UnormSrgb, \"value mismatch for TextureFormat::ETC2RGBA8UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::EACR11Unorm) == WGPUTextureFormat_EACR11Unorm, \"value mismatch for TextureFormat::EACR11Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::EACR11Snorm) == WGPUTextureFormat_EACR11Snorm, \"value mismatch for TextureFormat::EACR11Snorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::EACRG11Unorm) == WGPUTextureFormat_EACRG11Unorm, \"value mismatch for TextureFormat::EACRG11Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::EACRG11Snorm) == WGPUTextureFormat_EACRG11Snorm, \"value mismatch for TextureFormat::EACRG11Snorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC4x4Unorm) == WGPUTextureFormat_ASTC4x4Unorm, \"value mismatch for TextureFormat::ASTC4x4Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC4x4UnormSrgb) == WGPUTextureFormat_ASTC4x4UnormSrgb, \"value mismatch for TextureFormat::ASTC4x4UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC5x4Unorm) == WGPUTextureFormat_ASTC5x4Unorm, \"value mismatch for TextureFormat::ASTC5x4Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC5x4UnormSrgb) == WGPUTextureFormat_ASTC5x4UnormSrgb, \"value mismatch for TextureFormat::ASTC5x4UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC5x5Unorm) == WGPUTextureFormat_ASTC5x5Unorm, \"value mismatch for TextureFormat::ASTC5x5Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC5x5UnormSrgb) == WGPUTextureFormat_ASTC5x5UnormSrgb, \"value mismatch for TextureFormat::ASTC5x5UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC6x5Unorm) == WGPUTextureFormat_ASTC6x5Unorm, \"value mismatch for TextureFormat::ASTC6x5Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC6x5UnormSrgb) == WGPUTextureFormat_ASTC6x5UnormSrgb, \"value mismatch for TextureFormat::ASTC6x5UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC6x6Unorm) == WGPUTextureFormat_ASTC6x6Unorm, \"value mismatch for TextureFormat::ASTC6x6Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC6x6UnormSrgb) == WGPUTextureFormat_ASTC6x6UnormSrgb, \"value mismatch for TextureFormat::ASTC6x6UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC8x5Unorm) == WGPUTextureFormat_ASTC8x5Unorm, \"value mismatch for TextureFormat::ASTC8x5Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC8x5UnormSrgb) == WGPUTextureFormat_ASTC8x5UnormSrgb, \"value mismatch for TextureFormat::ASTC8x5UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC8x6Unorm) == WGPUTextureFormat_ASTC8x6Unorm, \"value mismatch for TextureFormat::ASTC8x6Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC8x6UnormSrgb) == WGPUTextureFormat_ASTC8x6UnormSrgb, \"value mismatch for TextureFormat::ASTC8x6UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC8x8Unorm) == WGPUTextureFormat_ASTC8x8Unorm, \"value mismatch for TextureFormat::ASTC8x8Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC8x8UnormSrgb) == WGPUTextureFormat_ASTC8x8UnormSrgb, \"value mismatch for TextureFormat::ASTC8x8UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC10x5Unorm) == WGPUTextureFormat_ASTC10x5Unorm, \"value mismatch for TextureFormat::ASTC10x5Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC10x5UnormSrgb) == WGPUTextureFormat_ASTC10x5UnormSrgb, \"value mismatch for TextureFormat::ASTC10x5UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC10x6Unorm) == WGPUTextureFormat_ASTC10x6Unorm, \"value mismatch for TextureFormat::ASTC10x6Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC10x6UnormSrgb) == WGPUTextureFormat_ASTC10x6UnormSrgb, \"value mismatch for TextureFormat::ASTC10x6UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC10x8Unorm) == WGPUTextureFormat_ASTC10x8Unorm, \"value mismatch for TextureFormat::ASTC10x8Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC10x8UnormSrgb) == WGPUTextureFormat_ASTC10x8UnormSrgb, \"value mismatch for TextureFormat::ASTC10x8UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC10x10Unorm) == WGPUTextureFormat_ASTC10x10Unorm, \"value mismatch for TextureFormat::ASTC10x10Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC10x10UnormSrgb) == WGPUTextureFormat_ASTC10x10UnormSrgb, \"value mismatch for TextureFormat::ASTC10x10UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC12x10Unorm) == WGPUTextureFormat_ASTC12x10Unorm, \"value mismatch for TextureFormat::ASTC12x10Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC12x10UnormSrgb) == WGPUTextureFormat_ASTC12x10UnormSrgb, \"value mismatch for TextureFormat::ASTC12x10UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC12x12Unorm) == WGPUTextureFormat_ASTC12x12Unorm, \"value mismatch for TextureFormat::ASTC12x12Unorm\");\n    static_assert(static_cast<uint32_t>(TextureFormat::ASTC12x12UnormSrgb) == WGPUTextureFormat_ASTC12x12UnormSrgb, \"value mismatch for TextureFormat::ASTC12x12UnormSrgb\");\n    static_assert(static_cast<uint32_t>(TextureFormat::R8BG8Biplanar420Unorm) == WGPUTextureFormat_R8BG8Biplanar420Unorm, \"value mismatch for TextureFormat::R8BG8Biplanar420Unorm\");\n\n    // TextureSampleType\n\n    static_assert(sizeof(TextureSampleType) == sizeof(WGPUTextureSampleType), \"sizeof mismatch for TextureSampleType\");\n    static_assert(alignof(TextureSampleType) == alignof(WGPUTextureSampleType), \"alignof mismatch for TextureSampleType\");\n\n    static_assert(static_cast<uint32_t>(TextureSampleType::Undefined) == WGPUTextureSampleType_Undefined, \"value mismatch for TextureSampleType::Undefined\");\n    static_assert(static_cast<uint32_t>(TextureSampleType::Float) == WGPUTextureSampleType_Float, \"value mismatch for TextureSampleType::Float\");\n    static_assert(static_cast<uint32_t>(TextureSampleType::UnfilterableFloat) == WGPUTextureSampleType_UnfilterableFloat, \"value mismatch for TextureSampleType::UnfilterableFloat\");\n    static_assert(static_cast<uint32_t>(TextureSampleType::Depth) == WGPUTextureSampleType_Depth, \"value mismatch for TextureSampleType::Depth\");\n    static_assert(static_cast<uint32_t>(TextureSampleType::Sint) == WGPUTextureSampleType_Sint, \"value mismatch for TextureSampleType::Sint\");\n    static_assert(static_cast<uint32_t>(TextureSampleType::Uint) == WGPUTextureSampleType_Uint, \"value mismatch for TextureSampleType::Uint\");\n\n    // TextureViewDimension\n\n    static_assert(sizeof(TextureViewDimension) == sizeof(WGPUTextureViewDimension), \"sizeof mismatch for TextureViewDimension\");\n    static_assert(alignof(TextureViewDimension) == alignof(WGPUTextureViewDimension), \"alignof mismatch for TextureViewDimension\");\n\n    static_assert(static_cast<uint32_t>(TextureViewDimension::Undefined) == WGPUTextureViewDimension_Undefined, \"value mismatch for TextureViewDimension::Undefined\");\n    static_assert(static_cast<uint32_t>(TextureViewDimension::e1D) == WGPUTextureViewDimension_1D, \"value mismatch for TextureViewDimension::e1D\");\n    static_assert(static_cast<uint32_t>(TextureViewDimension::e2D) == WGPUTextureViewDimension_2D, \"value mismatch for TextureViewDimension::e2D\");\n    static_assert(static_cast<uint32_t>(TextureViewDimension::e2DArray) == WGPUTextureViewDimension_2DArray, \"value mismatch for TextureViewDimension::e2DArray\");\n    static_assert(static_cast<uint32_t>(TextureViewDimension::Cube) == WGPUTextureViewDimension_Cube, \"value mismatch for TextureViewDimension::Cube\");\n    static_assert(static_cast<uint32_t>(TextureViewDimension::CubeArray) == WGPUTextureViewDimension_CubeArray, \"value mismatch for TextureViewDimension::CubeArray\");\n    static_assert(static_cast<uint32_t>(TextureViewDimension::e3D) == WGPUTextureViewDimension_3D, \"value mismatch for TextureViewDimension::e3D\");\n\n    // VertexFormat\n\n    static_assert(sizeof(VertexFormat) == sizeof(WGPUVertexFormat), \"sizeof mismatch for VertexFormat\");\n    static_assert(alignof(VertexFormat) == alignof(WGPUVertexFormat), \"alignof mismatch for VertexFormat\");\n\n    static_assert(static_cast<uint32_t>(VertexFormat::Undefined) == WGPUVertexFormat_Undefined, \"value mismatch for VertexFormat::Undefined\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Uint8x2) == WGPUVertexFormat_Uint8x2, \"value mismatch for VertexFormat::Uint8x2\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Uint8x4) == WGPUVertexFormat_Uint8x4, \"value mismatch for VertexFormat::Uint8x4\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Sint8x2) == WGPUVertexFormat_Sint8x2, \"value mismatch for VertexFormat::Sint8x2\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Sint8x4) == WGPUVertexFormat_Sint8x4, \"value mismatch for VertexFormat::Sint8x4\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Unorm8x2) == WGPUVertexFormat_Unorm8x2, \"value mismatch for VertexFormat::Unorm8x2\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Unorm8x4) == WGPUVertexFormat_Unorm8x4, \"value mismatch for VertexFormat::Unorm8x4\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Snorm8x2) == WGPUVertexFormat_Snorm8x2, \"value mismatch for VertexFormat::Snorm8x2\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Snorm8x4) == WGPUVertexFormat_Snorm8x4, \"value mismatch for VertexFormat::Snorm8x4\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Uint16x2) == WGPUVertexFormat_Uint16x2, \"value mismatch for VertexFormat::Uint16x2\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Uint16x4) == WGPUVertexFormat_Uint16x4, \"value mismatch for VertexFormat::Uint16x4\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Sint16x2) == WGPUVertexFormat_Sint16x2, \"value mismatch for VertexFormat::Sint16x2\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Sint16x4) == WGPUVertexFormat_Sint16x4, \"value mismatch for VertexFormat::Sint16x4\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Unorm16x2) == WGPUVertexFormat_Unorm16x2, \"value mismatch for VertexFormat::Unorm16x2\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Unorm16x4) == WGPUVertexFormat_Unorm16x4, \"value mismatch for VertexFormat::Unorm16x4\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Snorm16x2) == WGPUVertexFormat_Snorm16x2, \"value mismatch for VertexFormat::Snorm16x2\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Snorm16x4) == WGPUVertexFormat_Snorm16x4, \"value mismatch for VertexFormat::Snorm16x4\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Float16x2) == WGPUVertexFormat_Float16x2, \"value mismatch for VertexFormat::Float16x2\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Float16x4) == WGPUVertexFormat_Float16x4, \"value mismatch for VertexFormat::Float16x4\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Float32) == WGPUVertexFormat_Float32, \"value mismatch for VertexFormat::Float32\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Float32x2) == WGPUVertexFormat_Float32x2, \"value mismatch for VertexFormat::Float32x2\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Float32x3) == WGPUVertexFormat_Float32x3, \"value mismatch for VertexFormat::Float32x3\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Float32x4) == WGPUVertexFormat_Float32x4, \"value mismatch for VertexFormat::Float32x4\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Uint32) == WGPUVertexFormat_Uint32, \"value mismatch for VertexFormat::Uint32\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Uint32x2) == WGPUVertexFormat_Uint32x2, \"value mismatch for VertexFormat::Uint32x2\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Uint32x3) == WGPUVertexFormat_Uint32x3, \"value mismatch for VertexFormat::Uint32x3\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Uint32x4) == WGPUVertexFormat_Uint32x4, \"value mismatch for VertexFormat::Uint32x4\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Sint32) == WGPUVertexFormat_Sint32, \"value mismatch for VertexFormat::Sint32\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Sint32x2) == WGPUVertexFormat_Sint32x2, \"value mismatch for VertexFormat::Sint32x2\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Sint32x3) == WGPUVertexFormat_Sint32x3, \"value mismatch for VertexFormat::Sint32x3\");\n    static_assert(static_cast<uint32_t>(VertexFormat::Sint32x4) == WGPUVertexFormat_Sint32x4, \"value mismatch for VertexFormat::Sint32x4\");\n\n    // VertexStepMode\n\n    static_assert(sizeof(VertexStepMode) == sizeof(WGPUVertexStepMode), \"sizeof mismatch for VertexStepMode\");\n    static_assert(alignof(VertexStepMode) == alignof(WGPUVertexStepMode), \"alignof mismatch for VertexStepMode\");\n\n    static_assert(static_cast<uint32_t>(VertexStepMode::Vertex) == WGPUVertexStepMode_Vertex, \"value mismatch for VertexStepMode::Vertex\");\n    static_assert(static_cast<uint32_t>(VertexStepMode::Instance) == WGPUVertexStepMode_Instance, \"value mismatch for VertexStepMode::Instance\");\n    static_assert(static_cast<uint32_t>(VertexStepMode::VertexBufferNotUsed) == WGPUVertexStepMode_VertexBufferNotUsed, \"value mismatch for VertexStepMode::VertexBufferNotUsed\");\n\n    // BufferUsage\n\n    static_assert(sizeof(BufferUsage) == sizeof(WGPUBufferUsageFlags), \"sizeof mismatch for BufferUsage\");\n    static_assert(alignof(BufferUsage) == alignof(WGPUBufferUsageFlags), \"alignof mismatch for BufferUsage\");\n\n    static_assert(static_cast<uint32_t>(BufferUsage::None) == WGPUBufferUsage_None, \"value mismatch for BufferUsage::None\");\n    static_assert(static_cast<uint32_t>(BufferUsage::MapRead) == WGPUBufferUsage_MapRead, \"value mismatch for BufferUsage::MapRead\");\n    static_assert(static_cast<uint32_t>(BufferUsage::MapWrite) == WGPUBufferUsage_MapWrite, \"value mismatch for BufferUsage::MapWrite\");\n    static_assert(static_cast<uint32_t>(BufferUsage::CopySrc) == WGPUBufferUsage_CopySrc, \"value mismatch for BufferUsage::CopySrc\");\n    static_assert(static_cast<uint32_t>(BufferUsage::CopyDst) == WGPUBufferUsage_CopyDst, \"value mismatch for BufferUsage::CopyDst\");\n    static_assert(static_cast<uint32_t>(BufferUsage::Index) == WGPUBufferUsage_Index, \"value mismatch for BufferUsage::Index\");\n    static_assert(static_cast<uint32_t>(BufferUsage::Vertex) == WGPUBufferUsage_Vertex, \"value mismatch for BufferUsage::Vertex\");\n    static_assert(static_cast<uint32_t>(BufferUsage::Uniform) == WGPUBufferUsage_Uniform, \"value mismatch for BufferUsage::Uniform\");\n    static_assert(static_cast<uint32_t>(BufferUsage::Storage) == WGPUBufferUsage_Storage, \"value mismatch for BufferUsage::Storage\");\n    static_assert(static_cast<uint32_t>(BufferUsage::Indirect) == WGPUBufferUsage_Indirect, \"value mismatch for BufferUsage::Indirect\");\n    static_assert(static_cast<uint32_t>(BufferUsage::QueryResolve) == WGPUBufferUsage_QueryResolve, \"value mismatch for BufferUsage::QueryResolve\");\n\n    // ColorWriteMask\n\n    static_assert(sizeof(ColorWriteMask) == sizeof(WGPUColorWriteMaskFlags), \"sizeof mismatch for ColorWriteMask\");\n    static_assert(alignof(ColorWriteMask) == alignof(WGPUColorWriteMaskFlags), \"alignof mismatch for ColorWriteMask\");\n\n    static_assert(static_cast<uint32_t>(ColorWriteMask::None) == WGPUColorWriteMask_None, \"value mismatch for ColorWriteMask::None\");\n    static_assert(static_cast<uint32_t>(ColorWriteMask::Red) == WGPUColorWriteMask_Red, \"value mismatch for ColorWriteMask::Red\");\n    static_assert(static_cast<uint32_t>(ColorWriteMask::Green) == WGPUColorWriteMask_Green, \"value mismatch for ColorWriteMask::Green\");\n    static_assert(static_cast<uint32_t>(ColorWriteMask::Blue) == WGPUColorWriteMask_Blue, \"value mismatch for ColorWriteMask::Blue\");\n    static_assert(static_cast<uint32_t>(ColorWriteMask::Alpha) == WGPUColorWriteMask_Alpha, \"value mismatch for ColorWriteMask::Alpha\");\n    static_assert(static_cast<uint32_t>(ColorWriteMask::All) == WGPUColorWriteMask_All, \"value mismatch for ColorWriteMask::All\");\n\n    // MapMode\n\n    static_assert(sizeof(MapMode) == sizeof(WGPUMapModeFlags), \"sizeof mismatch for MapMode\");\n    static_assert(alignof(MapMode) == alignof(WGPUMapModeFlags), \"alignof mismatch for MapMode\");\n\n    static_assert(static_cast<uint32_t>(MapMode::None) == WGPUMapMode_None, \"value mismatch for MapMode::None\");\n    static_assert(static_cast<uint32_t>(MapMode::Read) == WGPUMapMode_Read, \"value mismatch for MapMode::Read\");\n    static_assert(static_cast<uint32_t>(MapMode::Write) == WGPUMapMode_Write, \"value mismatch for MapMode::Write\");\n\n    // ShaderStage\n\n    static_assert(sizeof(ShaderStage) == sizeof(WGPUShaderStageFlags), \"sizeof mismatch for ShaderStage\");\n    static_assert(alignof(ShaderStage) == alignof(WGPUShaderStageFlags), \"alignof mismatch for ShaderStage\");\n\n    static_assert(static_cast<uint32_t>(ShaderStage::None) == WGPUShaderStage_None, \"value mismatch for ShaderStage::None\");\n    static_assert(static_cast<uint32_t>(ShaderStage::Vertex) == WGPUShaderStage_Vertex, \"value mismatch for ShaderStage::Vertex\");\n    static_assert(static_cast<uint32_t>(ShaderStage::Fragment) == WGPUShaderStage_Fragment, \"value mismatch for ShaderStage::Fragment\");\n    static_assert(static_cast<uint32_t>(ShaderStage::Compute) == WGPUShaderStage_Compute, \"value mismatch for ShaderStage::Compute\");\n\n    // TextureUsage\n\n    static_assert(sizeof(TextureUsage) == sizeof(WGPUTextureUsageFlags), \"sizeof mismatch for TextureUsage\");\n    static_assert(alignof(TextureUsage) == alignof(WGPUTextureUsageFlags), \"alignof mismatch for TextureUsage\");\n\n    static_assert(static_cast<uint32_t>(TextureUsage::None) == WGPUTextureUsage_None, \"value mismatch for TextureUsage::None\");\n    static_assert(static_cast<uint32_t>(TextureUsage::CopySrc) == WGPUTextureUsage_CopySrc, \"value mismatch for TextureUsage::CopySrc\");\n    static_assert(static_cast<uint32_t>(TextureUsage::CopyDst) == WGPUTextureUsage_CopyDst, \"value mismatch for TextureUsage::CopyDst\");\n    static_assert(static_cast<uint32_t>(TextureUsage::TextureBinding) == WGPUTextureUsage_TextureBinding, \"value mismatch for TextureUsage::TextureBinding\");\n    static_assert(static_cast<uint32_t>(TextureUsage::StorageBinding) == WGPUTextureUsage_StorageBinding, \"value mismatch for TextureUsage::StorageBinding\");\n    static_assert(static_cast<uint32_t>(TextureUsage::RenderAttachment) == WGPUTextureUsage_RenderAttachment, \"value mismatch for TextureUsage::RenderAttachment\");\n    static_assert(static_cast<uint32_t>(TextureUsage::TransientAttachment) == WGPUTextureUsage_TransientAttachment, \"value mismatch for TextureUsage::TransientAttachment\");\n\n    // ChainedStruct\n\n    static_assert(sizeof(ChainedStruct) == sizeof(WGPUChainedStruct),\n            \"sizeof mismatch for ChainedStruct\");\n    static_assert(alignof(ChainedStruct) == alignof(WGPUChainedStruct),\n            \"alignof mismatch for ChainedStruct\");\n    static_assert(offsetof(ChainedStruct, nextInChain) == offsetof(WGPUChainedStruct, next),\n            \"offsetof mismatch for ChainedStruct::nextInChain\");\n    static_assert(offsetof(ChainedStruct, sType) == offsetof(WGPUChainedStruct, sType),\n            \"offsetof mismatch for ChainedStruct::sType\");\n\n    // AdapterProperties\n\n    static_assert(sizeof(AdapterProperties) == sizeof(WGPUAdapterProperties), \"sizeof mismatch for AdapterProperties\");\n    static_assert(alignof(AdapterProperties) == alignof(WGPUAdapterProperties), \"alignof mismatch for AdapterProperties\");\n\n    static_assert(offsetof(AdapterProperties, nextInChain) == offsetof(WGPUAdapterProperties, nextInChain),\n            \"offsetof mismatch for AdapterProperties::nextInChain\");\n    static_assert(offsetof(AdapterProperties, vendorID) == offsetof(WGPUAdapterProperties, vendorID),\n            \"offsetof mismatch for AdapterProperties::vendorID\");\n    static_assert(offsetof(AdapterProperties, vendorName) == offsetof(WGPUAdapterProperties, vendorName),\n            \"offsetof mismatch for AdapterProperties::vendorName\");\n    static_assert(offsetof(AdapterProperties, architecture) == offsetof(WGPUAdapterProperties, architecture),\n            \"offsetof mismatch for AdapterProperties::architecture\");\n    static_assert(offsetof(AdapterProperties, deviceID) == offsetof(WGPUAdapterProperties, deviceID),\n            \"offsetof mismatch for AdapterProperties::deviceID\");\n    static_assert(offsetof(AdapterProperties, name) == offsetof(WGPUAdapterProperties, name),\n            \"offsetof mismatch for AdapterProperties::name\");\n    static_assert(offsetof(AdapterProperties, driverDescription) == offsetof(WGPUAdapterProperties, driverDescription),\n            \"offsetof mismatch for AdapterProperties::driverDescription\");\n    static_assert(offsetof(AdapterProperties, adapterType) == offsetof(WGPUAdapterProperties, adapterType),\n            \"offsetof mismatch for AdapterProperties::adapterType\");\n    static_assert(offsetof(AdapterProperties, backendType) == offsetof(WGPUAdapterProperties, backendType),\n            \"offsetof mismatch for AdapterProperties::backendType\");\n    static_assert(offsetof(AdapterProperties, compatibilityMode) == offsetof(WGPUAdapterProperties, compatibilityMode),\n            \"offsetof mismatch for AdapterProperties::compatibilityMode\");\n\n    // BindGroupEntry\n\n    static_assert(sizeof(BindGroupEntry) == sizeof(WGPUBindGroupEntry), \"sizeof mismatch for BindGroupEntry\");\n    static_assert(alignof(BindGroupEntry) == alignof(WGPUBindGroupEntry), \"alignof mismatch for BindGroupEntry\");\n\n    static_assert(offsetof(BindGroupEntry, nextInChain) == offsetof(WGPUBindGroupEntry, nextInChain),\n            \"offsetof mismatch for BindGroupEntry::nextInChain\");\n    static_assert(offsetof(BindGroupEntry, binding) == offsetof(WGPUBindGroupEntry, binding),\n            \"offsetof mismatch for BindGroupEntry::binding\");\n    static_assert(offsetof(BindGroupEntry, buffer) == offsetof(WGPUBindGroupEntry, buffer),\n            \"offsetof mismatch for BindGroupEntry::buffer\");\n    static_assert(offsetof(BindGroupEntry, offset) == offsetof(WGPUBindGroupEntry, offset),\n            \"offsetof mismatch for BindGroupEntry::offset\");\n    static_assert(offsetof(BindGroupEntry, size) == offsetof(WGPUBindGroupEntry, size),\n            \"offsetof mismatch for BindGroupEntry::size\");\n    static_assert(offsetof(BindGroupEntry, sampler) == offsetof(WGPUBindGroupEntry, sampler),\n            \"offsetof mismatch for BindGroupEntry::sampler\");\n    static_assert(offsetof(BindGroupEntry, textureView) == offsetof(WGPUBindGroupEntry, textureView),\n            \"offsetof mismatch for BindGroupEntry::textureView\");\n\n    // BlendComponent\n\n    static_assert(sizeof(BlendComponent) == sizeof(WGPUBlendComponent), \"sizeof mismatch for BlendComponent\");\n    static_assert(alignof(BlendComponent) == alignof(WGPUBlendComponent), \"alignof mismatch for BlendComponent\");\n\n    static_assert(offsetof(BlendComponent, operation) == offsetof(WGPUBlendComponent, operation),\n            \"offsetof mismatch for BlendComponent::operation\");\n    static_assert(offsetof(BlendComponent, srcFactor) == offsetof(WGPUBlendComponent, srcFactor),\n            \"offsetof mismatch for BlendComponent::srcFactor\");\n    static_assert(offsetof(BlendComponent, dstFactor) == offsetof(WGPUBlendComponent, dstFactor),\n            \"offsetof mismatch for BlendComponent::dstFactor\");\n\n    // BufferBindingLayout\n\n    static_assert(sizeof(BufferBindingLayout) == sizeof(WGPUBufferBindingLayout), \"sizeof mismatch for BufferBindingLayout\");\n    static_assert(alignof(BufferBindingLayout) == alignof(WGPUBufferBindingLayout), \"alignof mismatch for BufferBindingLayout\");\n\n    static_assert(offsetof(BufferBindingLayout, nextInChain) == offsetof(WGPUBufferBindingLayout, nextInChain),\n            \"offsetof mismatch for BufferBindingLayout::nextInChain\");\n    static_assert(offsetof(BufferBindingLayout, type) == offsetof(WGPUBufferBindingLayout, type),\n            \"offsetof mismatch for BufferBindingLayout::type\");\n    static_assert(offsetof(BufferBindingLayout, hasDynamicOffset) == offsetof(WGPUBufferBindingLayout, hasDynamicOffset),\n            \"offsetof mismatch for BufferBindingLayout::hasDynamicOffset\");\n    static_assert(offsetof(BufferBindingLayout, minBindingSize) == offsetof(WGPUBufferBindingLayout, minBindingSize),\n            \"offsetof mismatch for BufferBindingLayout::minBindingSize\");\n\n    // BufferDescriptor\n\n    static_assert(sizeof(BufferDescriptor) == sizeof(WGPUBufferDescriptor), \"sizeof mismatch for BufferDescriptor\");\n    static_assert(alignof(BufferDescriptor) == alignof(WGPUBufferDescriptor), \"alignof mismatch for BufferDescriptor\");\n\n    static_assert(offsetof(BufferDescriptor, nextInChain) == offsetof(WGPUBufferDescriptor, nextInChain),\n            \"offsetof mismatch for BufferDescriptor::nextInChain\");\n    static_assert(offsetof(BufferDescriptor, label) == offsetof(WGPUBufferDescriptor, label),\n            \"offsetof mismatch for BufferDescriptor::label\");\n    static_assert(offsetof(BufferDescriptor, usage) == offsetof(WGPUBufferDescriptor, usage),\n            \"offsetof mismatch for BufferDescriptor::usage\");\n    static_assert(offsetof(BufferDescriptor, size) == offsetof(WGPUBufferDescriptor, size),\n            \"offsetof mismatch for BufferDescriptor::size\");\n    static_assert(offsetof(BufferDescriptor, mappedAtCreation) == offsetof(WGPUBufferDescriptor, mappedAtCreation),\n            \"offsetof mismatch for BufferDescriptor::mappedAtCreation\");\n\n    // Color\n\n    static_assert(sizeof(Color) == sizeof(WGPUColor), \"sizeof mismatch for Color\");\n    static_assert(alignof(Color) == alignof(WGPUColor), \"alignof mismatch for Color\");\n\n    static_assert(offsetof(Color, r) == offsetof(WGPUColor, r),\n            \"offsetof mismatch for Color::r\");\n    static_assert(offsetof(Color, g) == offsetof(WGPUColor, g),\n            \"offsetof mismatch for Color::g\");\n    static_assert(offsetof(Color, b) == offsetof(WGPUColor, b),\n            \"offsetof mismatch for Color::b\");\n    static_assert(offsetof(Color, a) == offsetof(WGPUColor, a),\n            \"offsetof mismatch for Color::a\");\n\n    // CommandBufferDescriptor\n\n    static_assert(sizeof(CommandBufferDescriptor) == sizeof(WGPUCommandBufferDescriptor), \"sizeof mismatch for CommandBufferDescriptor\");\n    static_assert(alignof(CommandBufferDescriptor) == alignof(WGPUCommandBufferDescriptor), \"alignof mismatch for CommandBufferDescriptor\");\n\n    static_assert(offsetof(CommandBufferDescriptor, nextInChain) == offsetof(WGPUCommandBufferDescriptor, nextInChain),\n            \"offsetof mismatch for CommandBufferDescriptor::nextInChain\");\n    static_assert(offsetof(CommandBufferDescriptor, label) == offsetof(WGPUCommandBufferDescriptor, label),\n            \"offsetof mismatch for CommandBufferDescriptor::label\");\n\n    // CommandEncoderDescriptor\n\n    static_assert(sizeof(CommandEncoderDescriptor) == sizeof(WGPUCommandEncoderDescriptor), \"sizeof mismatch for CommandEncoderDescriptor\");\n    static_assert(alignof(CommandEncoderDescriptor) == alignof(WGPUCommandEncoderDescriptor), \"alignof mismatch for CommandEncoderDescriptor\");\n\n    static_assert(offsetof(CommandEncoderDescriptor, nextInChain) == offsetof(WGPUCommandEncoderDescriptor, nextInChain),\n            \"offsetof mismatch for CommandEncoderDescriptor::nextInChain\");\n    static_assert(offsetof(CommandEncoderDescriptor, label) == offsetof(WGPUCommandEncoderDescriptor, label),\n            \"offsetof mismatch for CommandEncoderDescriptor::label\");\n\n    // CompilationMessage\n\n    static_assert(sizeof(CompilationMessage) == sizeof(WGPUCompilationMessage), \"sizeof mismatch for CompilationMessage\");\n    static_assert(alignof(CompilationMessage) == alignof(WGPUCompilationMessage), \"alignof mismatch for CompilationMessage\");\n\n    static_assert(offsetof(CompilationMessage, nextInChain) == offsetof(WGPUCompilationMessage, nextInChain),\n            \"offsetof mismatch for CompilationMessage::nextInChain\");\n    static_assert(offsetof(CompilationMessage, message) == offsetof(WGPUCompilationMessage, message),\n            \"offsetof mismatch for CompilationMessage::message\");\n    static_assert(offsetof(CompilationMessage, type) == offsetof(WGPUCompilationMessage, type),\n            \"offsetof mismatch for CompilationMessage::type\");\n    static_assert(offsetof(CompilationMessage, lineNum) == offsetof(WGPUCompilationMessage, lineNum),\n            \"offsetof mismatch for CompilationMessage::lineNum\");\n    static_assert(offsetof(CompilationMessage, linePos) == offsetof(WGPUCompilationMessage, linePos),\n            \"offsetof mismatch for CompilationMessage::linePos\");\n    static_assert(offsetof(CompilationMessage, offset) == offsetof(WGPUCompilationMessage, offset),\n            \"offsetof mismatch for CompilationMessage::offset\");\n    static_assert(offsetof(CompilationMessage, length) == offsetof(WGPUCompilationMessage, length),\n            \"offsetof mismatch for CompilationMessage::length\");\n    static_assert(offsetof(CompilationMessage, utf16LinePos) == offsetof(WGPUCompilationMessage, utf16LinePos),\n            \"offsetof mismatch for CompilationMessage::utf16LinePos\");\n    static_assert(offsetof(CompilationMessage, utf16Offset) == offsetof(WGPUCompilationMessage, utf16Offset),\n            \"offsetof mismatch for CompilationMessage::utf16Offset\");\n    static_assert(offsetof(CompilationMessage, utf16Length) == offsetof(WGPUCompilationMessage, utf16Length),\n            \"offsetof mismatch for CompilationMessage::utf16Length\");\n\n    // ComputePassTimestampWrite\n\n    static_assert(sizeof(ComputePassTimestampWrite) == sizeof(WGPUComputePassTimestampWrite), \"sizeof mismatch for ComputePassTimestampWrite\");\n    static_assert(alignof(ComputePassTimestampWrite) == alignof(WGPUComputePassTimestampWrite), \"alignof mismatch for ComputePassTimestampWrite\");\n\n    static_assert(offsetof(ComputePassTimestampWrite, querySet) == offsetof(WGPUComputePassTimestampWrite, querySet),\n            \"offsetof mismatch for ComputePassTimestampWrite::querySet\");\n    static_assert(offsetof(ComputePassTimestampWrite, queryIndex) == offsetof(WGPUComputePassTimestampWrite, queryIndex),\n            \"offsetof mismatch for ComputePassTimestampWrite::queryIndex\");\n    static_assert(offsetof(ComputePassTimestampWrite, location) == offsetof(WGPUComputePassTimestampWrite, location),\n            \"offsetof mismatch for ComputePassTimestampWrite::location\");\n\n    // ConstantEntry\n\n    static_assert(sizeof(ConstantEntry) == sizeof(WGPUConstantEntry), \"sizeof mismatch for ConstantEntry\");\n    static_assert(alignof(ConstantEntry) == alignof(WGPUConstantEntry), \"alignof mismatch for ConstantEntry\");\n\n    static_assert(offsetof(ConstantEntry, nextInChain) == offsetof(WGPUConstantEntry, nextInChain),\n            \"offsetof mismatch for ConstantEntry::nextInChain\");\n    static_assert(offsetof(ConstantEntry, key) == offsetof(WGPUConstantEntry, key),\n            \"offsetof mismatch for ConstantEntry::key\");\n    static_assert(offsetof(ConstantEntry, value) == offsetof(WGPUConstantEntry, value),\n            \"offsetof mismatch for ConstantEntry::value\");\n\n    // CopyTextureForBrowserOptions\n\n    static_assert(sizeof(CopyTextureForBrowserOptions) == sizeof(WGPUCopyTextureForBrowserOptions), \"sizeof mismatch for CopyTextureForBrowserOptions\");\n    static_assert(alignof(CopyTextureForBrowserOptions) == alignof(WGPUCopyTextureForBrowserOptions), \"alignof mismatch for CopyTextureForBrowserOptions\");\n\n    static_assert(offsetof(CopyTextureForBrowserOptions, nextInChain) == offsetof(WGPUCopyTextureForBrowserOptions, nextInChain),\n            \"offsetof mismatch for CopyTextureForBrowserOptions::nextInChain\");\n    static_assert(offsetof(CopyTextureForBrowserOptions, flipY) == offsetof(WGPUCopyTextureForBrowserOptions, flipY),\n            \"offsetof mismatch for CopyTextureForBrowserOptions::flipY\");\n    static_assert(offsetof(CopyTextureForBrowserOptions, needsColorSpaceConversion) == offsetof(WGPUCopyTextureForBrowserOptions, needsColorSpaceConversion),\n            \"offsetof mismatch for CopyTextureForBrowserOptions::needsColorSpaceConversion\");\n    static_assert(offsetof(CopyTextureForBrowserOptions, srcAlphaMode) == offsetof(WGPUCopyTextureForBrowserOptions, srcAlphaMode),\n            \"offsetof mismatch for CopyTextureForBrowserOptions::srcAlphaMode\");\n    static_assert(offsetof(CopyTextureForBrowserOptions, srcTransferFunctionParameters) == offsetof(WGPUCopyTextureForBrowserOptions, srcTransferFunctionParameters),\n            \"offsetof mismatch for CopyTextureForBrowserOptions::srcTransferFunctionParameters\");\n    static_assert(offsetof(CopyTextureForBrowserOptions, conversionMatrix) == offsetof(WGPUCopyTextureForBrowserOptions, conversionMatrix),\n            \"offsetof mismatch for CopyTextureForBrowserOptions::conversionMatrix\");\n    static_assert(offsetof(CopyTextureForBrowserOptions, dstTransferFunctionParameters) == offsetof(WGPUCopyTextureForBrowserOptions, dstTransferFunctionParameters),\n            \"offsetof mismatch for CopyTextureForBrowserOptions::dstTransferFunctionParameters\");\n    static_assert(offsetof(CopyTextureForBrowserOptions, dstAlphaMode) == offsetof(WGPUCopyTextureForBrowserOptions, dstAlphaMode),\n            \"offsetof mismatch for CopyTextureForBrowserOptions::dstAlphaMode\");\n    static_assert(offsetof(CopyTextureForBrowserOptions, internalUsage) == offsetof(WGPUCopyTextureForBrowserOptions, internalUsage),\n            \"offsetof mismatch for CopyTextureForBrowserOptions::internalUsage\");\n\n    // DawnAdapterPropertiesPowerPreference\n\n    static_assert(sizeof(DawnAdapterPropertiesPowerPreference) == sizeof(WGPUDawnAdapterPropertiesPowerPreference), \"sizeof mismatch for DawnAdapterPropertiesPowerPreference\");\n    static_assert(alignof(DawnAdapterPropertiesPowerPreference) == alignof(WGPUDawnAdapterPropertiesPowerPreference), \"alignof mismatch for DawnAdapterPropertiesPowerPreference\");\n\n    static_assert(offsetof(DawnAdapterPropertiesPowerPreference, powerPreference) == offsetof(WGPUDawnAdapterPropertiesPowerPreference, powerPreference),\n            \"offsetof mismatch for DawnAdapterPropertiesPowerPreference::powerPreference\");\n\n    // DawnBufferDescriptorErrorInfoFromWireClient\n\n    static_assert(sizeof(DawnBufferDescriptorErrorInfoFromWireClient) == sizeof(WGPUDawnBufferDescriptorErrorInfoFromWireClient), \"sizeof mismatch for DawnBufferDescriptorErrorInfoFromWireClient\");\n    static_assert(alignof(DawnBufferDescriptorErrorInfoFromWireClient) == alignof(WGPUDawnBufferDescriptorErrorInfoFromWireClient), \"alignof mismatch for DawnBufferDescriptorErrorInfoFromWireClient\");\n\n    static_assert(offsetof(DawnBufferDescriptorErrorInfoFromWireClient, outOfMemory) == offsetof(WGPUDawnBufferDescriptorErrorInfoFromWireClient, outOfMemory),\n            \"offsetof mismatch for DawnBufferDescriptorErrorInfoFromWireClient::outOfMemory\");\n\n    // DawnCacheDeviceDescriptor\n\n    static_assert(sizeof(DawnCacheDeviceDescriptor) == sizeof(WGPUDawnCacheDeviceDescriptor), \"sizeof mismatch for DawnCacheDeviceDescriptor\");\n    static_assert(alignof(DawnCacheDeviceDescriptor) == alignof(WGPUDawnCacheDeviceDescriptor), \"alignof mismatch for DawnCacheDeviceDescriptor\");\n\n    static_assert(offsetof(DawnCacheDeviceDescriptor, isolationKey) == offsetof(WGPUDawnCacheDeviceDescriptor, isolationKey),\n            \"offsetof mismatch for DawnCacheDeviceDescriptor::isolationKey\");\n\n    // DawnEncoderInternalUsageDescriptor\n\n    static_assert(sizeof(DawnEncoderInternalUsageDescriptor) == sizeof(WGPUDawnEncoderInternalUsageDescriptor), \"sizeof mismatch for DawnEncoderInternalUsageDescriptor\");\n    static_assert(alignof(DawnEncoderInternalUsageDescriptor) == alignof(WGPUDawnEncoderInternalUsageDescriptor), \"alignof mismatch for DawnEncoderInternalUsageDescriptor\");\n\n    static_assert(offsetof(DawnEncoderInternalUsageDescriptor, useInternalUsages) == offsetof(WGPUDawnEncoderInternalUsageDescriptor, useInternalUsages),\n            \"offsetof mismatch for DawnEncoderInternalUsageDescriptor::useInternalUsages\");\n\n    // DawnMultisampleStateRenderToSingleSampled\n\n    static_assert(sizeof(DawnMultisampleStateRenderToSingleSampled) == sizeof(WGPUDawnMultisampleStateRenderToSingleSampled), \"sizeof mismatch for DawnMultisampleStateRenderToSingleSampled\");\n    static_assert(alignof(DawnMultisampleStateRenderToSingleSampled) == alignof(WGPUDawnMultisampleStateRenderToSingleSampled), \"alignof mismatch for DawnMultisampleStateRenderToSingleSampled\");\n\n    static_assert(offsetof(DawnMultisampleStateRenderToSingleSampled, enabled) == offsetof(WGPUDawnMultisampleStateRenderToSingleSampled, enabled),\n            \"offsetof mismatch for DawnMultisampleStateRenderToSingleSampled::enabled\");\n\n    // DawnRenderPassColorAttachmentRenderToSingleSampled\n\n    static_assert(sizeof(DawnRenderPassColorAttachmentRenderToSingleSampled) == sizeof(WGPUDawnRenderPassColorAttachmentRenderToSingleSampled), \"sizeof mismatch for DawnRenderPassColorAttachmentRenderToSingleSampled\");\n    static_assert(alignof(DawnRenderPassColorAttachmentRenderToSingleSampled) == alignof(WGPUDawnRenderPassColorAttachmentRenderToSingleSampled), \"alignof mismatch for DawnRenderPassColorAttachmentRenderToSingleSampled\");\n\n    static_assert(offsetof(DawnRenderPassColorAttachmentRenderToSingleSampled, implicitSampleCount) == offsetof(WGPUDawnRenderPassColorAttachmentRenderToSingleSampled, implicitSampleCount),\n            \"offsetof mismatch for DawnRenderPassColorAttachmentRenderToSingleSampled::implicitSampleCount\");\n\n    // DawnShaderModuleSPIRVOptionsDescriptor\n\n    static_assert(sizeof(DawnShaderModuleSPIRVOptionsDescriptor) == sizeof(WGPUDawnShaderModuleSPIRVOptionsDescriptor), \"sizeof mismatch for DawnShaderModuleSPIRVOptionsDescriptor\");\n    static_assert(alignof(DawnShaderModuleSPIRVOptionsDescriptor) == alignof(WGPUDawnShaderModuleSPIRVOptionsDescriptor), \"alignof mismatch for DawnShaderModuleSPIRVOptionsDescriptor\");\n\n    static_assert(offsetof(DawnShaderModuleSPIRVOptionsDescriptor, allowNonUniformDerivatives) == offsetof(WGPUDawnShaderModuleSPIRVOptionsDescriptor, allowNonUniformDerivatives),\n            \"offsetof mismatch for DawnShaderModuleSPIRVOptionsDescriptor::allowNonUniformDerivatives\");\n\n    // DawnTextureInternalUsageDescriptor\n\n    static_assert(sizeof(DawnTextureInternalUsageDescriptor) == sizeof(WGPUDawnTextureInternalUsageDescriptor), \"sizeof mismatch for DawnTextureInternalUsageDescriptor\");\n    static_assert(alignof(DawnTextureInternalUsageDescriptor) == alignof(WGPUDawnTextureInternalUsageDescriptor), \"alignof mismatch for DawnTextureInternalUsageDescriptor\");\n\n    static_assert(offsetof(DawnTextureInternalUsageDescriptor, internalUsage) == offsetof(WGPUDawnTextureInternalUsageDescriptor, internalUsage),\n            \"offsetof mismatch for DawnTextureInternalUsageDescriptor::internalUsage\");\n\n    // DawnTogglesDescriptor\n\n    static_assert(sizeof(DawnTogglesDescriptor) == sizeof(WGPUDawnTogglesDescriptor), \"sizeof mismatch for DawnTogglesDescriptor\");\n    static_assert(alignof(DawnTogglesDescriptor) == alignof(WGPUDawnTogglesDescriptor), \"alignof mismatch for DawnTogglesDescriptor\");\n\n    static_assert(offsetof(DawnTogglesDescriptor, enabledTogglesCount) == offsetof(WGPUDawnTogglesDescriptor, enabledTogglesCount),\n            \"offsetof mismatch for DawnTogglesDescriptor::enabledTogglesCount\");\n    static_assert(offsetof(DawnTogglesDescriptor, enabledToggles) == offsetof(WGPUDawnTogglesDescriptor, enabledToggles),\n            \"offsetof mismatch for DawnTogglesDescriptor::enabledToggles\");\n    static_assert(offsetof(DawnTogglesDescriptor, disabledTogglesCount) == offsetof(WGPUDawnTogglesDescriptor, disabledTogglesCount),\n            \"offsetof mismatch for DawnTogglesDescriptor::disabledTogglesCount\");\n    static_assert(offsetof(DawnTogglesDescriptor, disabledToggles) == offsetof(WGPUDawnTogglesDescriptor, disabledToggles),\n            \"offsetof mismatch for DawnTogglesDescriptor::disabledToggles\");\n\n    // Extent2D\n\n    static_assert(sizeof(Extent2D) == sizeof(WGPUExtent2D), \"sizeof mismatch for Extent2D\");\n    static_assert(alignof(Extent2D) == alignof(WGPUExtent2D), \"alignof mismatch for Extent2D\");\n\n    static_assert(offsetof(Extent2D, width) == offsetof(WGPUExtent2D, width),\n            \"offsetof mismatch for Extent2D::width\");\n    static_assert(offsetof(Extent2D, height) == offsetof(WGPUExtent2D, height),\n            \"offsetof mismatch for Extent2D::height\");\n\n    // Extent3D\n\n    static_assert(sizeof(Extent3D) == sizeof(WGPUExtent3D), \"sizeof mismatch for Extent3D\");\n    static_assert(alignof(Extent3D) == alignof(WGPUExtent3D), \"alignof mismatch for Extent3D\");\n\n    static_assert(offsetof(Extent3D, width) == offsetof(WGPUExtent3D, width),\n            \"offsetof mismatch for Extent3D::width\");\n    static_assert(offsetof(Extent3D, height) == offsetof(WGPUExtent3D, height),\n            \"offsetof mismatch for Extent3D::height\");\n    static_assert(offsetof(Extent3D, depthOrArrayLayers) == offsetof(WGPUExtent3D, depthOrArrayLayers),\n            \"offsetof mismatch for Extent3D::depthOrArrayLayers\");\n\n    // ExternalTextureBindingEntry\n\n    static_assert(sizeof(ExternalTextureBindingEntry) == sizeof(WGPUExternalTextureBindingEntry), \"sizeof mismatch for ExternalTextureBindingEntry\");\n    static_assert(alignof(ExternalTextureBindingEntry) == alignof(WGPUExternalTextureBindingEntry), \"alignof mismatch for ExternalTextureBindingEntry\");\n\n    static_assert(offsetof(ExternalTextureBindingEntry, externalTexture) == offsetof(WGPUExternalTextureBindingEntry, externalTexture),\n            \"offsetof mismatch for ExternalTextureBindingEntry::externalTexture\");\n\n    // ExternalTextureBindingLayout\n\n    static_assert(sizeof(ExternalTextureBindingLayout) == sizeof(WGPUExternalTextureBindingLayout), \"sizeof mismatch for ExternalTextureBindingLayout\");\n    static_assert(alignof(ExternalTextureBindingLayout) == alignof(WGPUExternalTextureBindingLayout), \"alignof mismatch for ExternalTextureBindingLayout\");\n\n\n    // InstanceDescriptor\n\n    static_assert(sizeof(InstanceDescriptor) == sizeof(WGPUInstanceDescriptor), \"sizeof mismatch for InstanceDescriptor\");\n    static_assert(alignof(InstanceDescriptor) == alignof(WGPUInstanceDescriptor), \"alignof mismatch for InstanceDescriptor\");\n\n    static_assert(offsetof(InstanceDescriptor, nextInChain) == offsetof(WGPUInstanceDescriptor, nextInChain),\n            \"offsetof mismatch for InstanceDescriptor::nextInChain\");\n\n    // Limits\n\n    static_assert(sizeof(Limits) == sizeof(WGPULimits), \"sizeof mismatch for Limits\");\n    static_assert(alignof(Limits) == alignof(WGPULimits), \"alignof mismatch for Limits\");\n\n    static_assert(offsetof(Limits, maxTextureDimension1D) == offsetof(WGPULimits, maxTextureDimension1D),\n            \"offsetof mismatch for Limits::maxTextureDimension1D\");\n    static_assert(offsetof(Limits, maxTextureDimension2D) == offsetof(WGPULimits, maxTextureDimension2D),\n            \"offsetof mismatch for Limits::maxTextureDimension2D\");\n    static_assert(offsetof(Limits, maxTextureDimension3D) == offsetof(WGPULimits, maxTextureDimension3D),\n            \"offsetof mismatch for Limits::maxTextureDimension3D\");\n    static_assert(offsetof(Limits, maxTextureArrayLayers) == offsetof(WGPULimits, maxTextureArrayLayers),\n            \"offsetof mismatch for Limits::maxTextureArrayLayers\");\n    static_assert(offsetof(Limits, maxBindGroups) == offsetof(WGPULimits, maxBindGroups),\n            \"offsetof mismatch for Limits::maxBindGroups\");\n    static_assert(offsetof(Limits, maxBindGroupsPlusVertexBuffers) == offsetof(WGPULimits, maxBindGroupsPlusVertexBuffers),\n            \"offsetof mismatch for Limits::maxBindGroupsPlusVertexBuffers\");\n    static_assert(offsetof(Limits, maxBindingsPerBindGroup) == offsetof(WGPULimits, maxBindingsPerBindGroup),\n            \"offsetof mismatch for Limits::maxBindingsPerBindGroup\");\n    static_assert(offsetof(Limits, maxDynamicUniformBuffersPerPipelineLayout) == offsetof(WGPULimits, maxDynamicUniformBuffersPerPipelineLayout),\n            \"offsetof mismatch for Limits::maxDynamicUniformBuffersPerPipelineLayout\");\n    static_assert(offsetof(Limits, maxDynamicStorageBuffersPerPipelineLayout) == offsetof(WGPULimits, maxDynamicStorageBuffersPerPipelineLayout),\n            \"offsetof mismatch for Limits::maxDynamicStorageBuffersPerPipelineLayout\");\n    static_assert(offsetof(Limits, maxSampledTexturesPerShaderStage) == offsetof(WGPULimits, maxSampledTexturesPerShaderStage),\n            \"offsetof mismatch for Limits::maxSampledTexturesPerShaderStage\");\n    static_assert(offsetof(Limits, maxSamplersPerShaderStage) == offsetof(WGPULimits, maxSamplersPerShaderStage),\n            \"offsetof mismatch for Limits::maxSamplersPerShaderStage\");\n    static_assert(offsetof(Limits, maxStorageBuffersPerShaderStage) == offsetof(WGPULimits, maxStorageBuffersPerShaderStage),\n            \"offsetof mismatch for Limits::maxStorageBuffersPerShaderStage\");\n    static_assert(offsetof(Limits, maxStorageTexturesPerShaderStage) == offsetof(WGPULimits, maxStorageTexturesPerShaderStage),\n            \"offsetof mismatch for Limits::maxStorageTexturesPerShaderStage\");\n    static_assert(offsetof(Limits, maxUniformBuffersPerShaderStage) == offsetof(WGPULimits, maxUniformBuffersPerShaderStage),\n            \"offsetof mismatch for Limits::maxUniformBuffersPerShaderStage\");\n    static_assert(offsetof(Limits, maxUniformBufferBindingSize) == offsetof(WGPULimits, maxUniformBufferBindingSize),\n            \"offsetof mismatch for Limits::maxUniformBufferBindingSize\");\n    static_assert(offsetof(Limits, maxStorageBufferBindingSize) == offsetof(WGPULimits, maxStorageBufferBindingSize),\n            \"offsetof mismatch for Limits::maxStorageBufferBindingSize\");\n    static_assert(offsetof(Limits, minUniformBufferOffsetAlignment) == offsetof(WGPULimits, minUniformBufferOffsetAlignment),\n            \"offsetof mismatch for Limits::minUniformBufferOffsetAlignment\");\n    static_assert(offsetof(Limits, minStorageBufferOffsetAlignment) == offsetof(WGPULimits, minStorageBufferOffsetAlignment),\n            \"offsetof mismatch for Limits::minStorageBufferOffsetAlignment\");\n    static_assert(offsetof(Limits, maxVertexBuffers) == offsetof(WGPULimits, maxVertexBuffers),\n            \"offsetof mismatch for Limits::maxVertexBuffers\");\n    static_assert(offsetof(Limits, maxBufferSize) == offsetof(WGPULimits, maxBufferSize),\n            \"offsetof mismatch for Limits::maxBufferSize\");\n    static_assert(offsetof(Limits, maxVertexAttributes) == offsetof(WGPULimits, maxVertexAttributes),\n            \"offsetof mismatch for Limits::maxVertexAttributes\");\n    static_assert(offsetof(Limits, maxVertexBufferArrayStride) == offsetof(WGPULimits, maxVertexBufferArrayStride),\n            \"offsetof mismatch for Limits::maxVertexBufferArrayStride\");\n    static_assert(offsetof(Limits, maxInterStageShaderComponents) == offsetof(WGPULimits, maxInterStageShaderComponents),\n            \"offsetof mismatch for Limits::maxInterStageShaderComponents\");\n    static_assert(offsetof(Limits, maxInterStageShaderVariables) == offsetof(WGPULimits, maxInterStageShaderVariables),\n            \"offsetof mismatch for Limits::maxInterStageShaderVariables\");\n    static_assert(offsetof(Limits, maxColorAttachments) == offsetof(WGPULimits, maxColorAttachments),\n            \"offsetof mismatch for Limits::maxColorAttachments\");\n    static_assert(offsetof(Limits, maxColorAttachmentBytesPerSample) == offsetof(WGPULimits, maxColorAttachmentBytesPerSample),\n            \"offsetof mismatch for Limits::maxColorAttachmentBytesPerSample\");\n    static_assert(offsetof(Limits, maxComputeWorkgroupStorageSize) == offsetof(WGPULimits, maxComputeWorkgroupStorageSize),\n            \"offsetof mismatch for Limits::maxComputeWorkgroupStorageSize\");\n    static_assert(offsetof(Limits, maxComputeInvocationsPerWorkgroup) == offsetof(WGPULimits, maxComputeInvocationsPerWorkgroup),\n            \"offsetof mismatch for Limits::maxComputeInvocationsPerWorkgroup\");\n    static_assert(offsetof(Limits, maxComputeWorkgroupSizeX) == offsetof(WGPULimits, maxComputeWorkgroupSizeX),\n            \"offsetof mismatch for Limits::maxComputeWorkgroupSizeX\");\n    static_assert(offsetof(Limits, maxComputeWorkgroupSizeY) == offsetof(WGPULimits, maxComputeWorkgroupSizeY),\n            \"offsetof mismatch for Limits::maxComputeWorkgroupSizeY\");\n    static_assert(offsetof(Limits, maxComputeWorkgroupSizeZ) == offsetof(WGPULimits, maxComputeWorkgroupSizeZ),\n            \"offsetof mismatch for Limits::maxComputeWorkgroupSizeZ\");\n    static_assert(offsetof(Limits, maxComputeWorkgroupsPerDimension) == offsetof(WGPULimits, maxComputeWorkgroupsPerDimension),\n            \"offsetof mismatch for Limits::maxComputeWorkgroupsPerDimension\");\n\n    // MultisampleState\n\n    static_assert(sizeof(MultisampleState) == sizeof(WGPUMultisampleState), \"sizeof mismatch for MultisampleState\");\n    static_assert(alignof(MultisampleState) == alignof(WGPUMultisampleState), \"alignof mismatch for MultisampleState\");\n\n    static_assert(offsetof(MultisampleState, nextInChain) == offsetof(WGPUMultisampleState, nextInChain),\n            \"offsetof mismatch for MultisampleState::nextInChain\");\n    static_assert(offsetof(MultisampleState, count) == offsetof(WGPUMultisampleState, count),\n            \"offsetof mismatch for MultisampleState::count\");\n    static_assert(offsetof(MultisampleState, mask) == offsetof(WGPUMultisampleState, mask),\n            \"offsetof mismatch for MultisampleState::mask\");\n    static_assert(offsetof(MultisampleState, alphaToCoverageEnabled) == offsetof(WGPUMultisampleState, alphaToCoverageEnabled),\n            \"offsetof mismatch for MultisampleState::alphaToCoverageEnabled\");\n\n    // Origin2D\n\n    static_assert(sizeof(Origin2D) == sizeof(WGPUOrigin2D), \"sizeof mismatch for Origin2D\");\n    static_assert(alignof(Origin2D) == alignof(WGPUOrigin2D), \"alignof mismatch for Origin2D\");\n\n    static_assert(offsetof(Origin2D, x) == offsetof(WGPUOrigin2D, x),\n            \"offsetof mismatch for Origin2D::x\");\n    static_assert(offsetof(Origin2D, y) == offsetof(WGPUOrigin2D, y),\n            \"offsetof mismatch for Origin2D::y\");\n\n    // Origin3D\n\n    static_assert(sizeof(Origin3D) == sizeof(WGPUOrigin3D), \"sizeof mismatch for Origin3D\");\n    static_assert(alignof(Origin3D) == alignof(WGPUOrigin3D), \"alignof mismatch for Origin3D\");\n\n    static_assert(offsetof(Origin3D, x) == offsetof(WGPUOrigin3D, x),\n            \"offsetof mismatch for Origin3D::x\");\n    static_assert(offsetof(Origin3D, y) == offsetof(WGPUOrigin3D, y),\n            \"offsetof mismatch for Origin3D::y\");\n    static_assert(offsetof(Origin3D, z) == offsetof(WGPUOrigin3D, z),\n            \"offsetof mismatch for Origin3D::z\");\n\n    // PipelineLayoutDescriptor\n\n    static_assert(sizeof(PipelineLayoutDescriptor) == sizeof(WGPUPipelineLayoutDescriptor), \"sizeof mismatch for PipelineLayoutDescriptor\");\n    static_assert(alignof(PipelineLayoutDescriptor) == alignof(WGPUPipelineLayoutDescriptor), \"alignof mismatch for PipelineLayoutDescriptor\");\n\n    static_assert(offsetof(PipelineLayoutDescriptor, nextInChain) == offsetof(WGPUPipelineLayoutDescriptor, nextInChain),\n            \"offsetof mismatch for PipelineLayoutDescriptor::nextInChain\");\n    static_assert(offsetof(PipelineLayoutDescriptor, label) == offsetof(WGPUPipelineLayoutDescriptor, label),\n            \"offsetof mismatch for PipelineLayoutDescriptor::label\");\n    static_assert(offsetof(PipelineLayoutDescriptor, bindGroupLayoutCount) == offsetof(WGPUPipelineLayoutDescriptor, bindGroupLayoutCount),\n            \"offsetof mismatch for PipelineLayoutDescriptor::bindGroupLayoutCount\");\n    static_assert(offsetof(PipelineLayoutDescriptor, bindGroupLayouts) == offsetof(WGPUPipelineLayoutDescriptor, bindGroupLayouts),\n            \"offsetof mismatch for PipelineLayoutDescriptor::bindGroupLayouts\");\n\n    // PrimitiveDepthClipControl\n\n    static_assert(sizeof(PrimitiveDepthClipControl) == sizeof(WGPUPrimitiveDepthClipControl), \"sizeof mismatch for PrimitiveDepthClipControl\");\n    static_assert(alignof(PrimitiveDepthClipControl) == alignof(WGPUPrimitiveDepthClipControl), \"alignof mismatch for PrimitiveDepthClipControl\");\n\n    static_assert(offsetof(PrimitiveDepthClipControl, unclippedDepth) == offsetof(WGPUPrimitiveDepthClipControl, unclippedDepth),\n            \"offsetof mismatch for PrimitiveDepthClipControl::unclippedDepth\");\n\n    // PrimitiveState\n\n    static_assert(sizeof(PrimitiveState) == sizeof(WGPUPrimitiveState), \"sizeof mismatch for PrimitiveState\");\n    static_assert(alignof(PrimitiveState) == alignof(WGPUPrimitiveState), \"alignof mismatch for PrimitiveState\");\n\n    static_assert(offsetof(PrimitiveState, nextInChain) == offsetof(WGPUPrimitiveState, nextInChain),\n            \"offsetof mismatch for PrimitiveState::nextInChain\");\n    static_assert(offsetof(PrimitiveState, topology) == offsetof(WGPUPrimitiveState, topology),\n            \"offsetof mismatch for PrimitiveState::topology\");\n    static_assert(offsetof(PrimitiveState, stripIndexFormat) == offsetof(WGPUPrimitiveState, stripIndexFormat),\n            \"offsetof mismatch for PrimitiveState::stripIndexFormat\");\n    static_assert(offsetof(PrimitiveState, frontFace) == offsetof(WGPUPrimitiveState, frontFace),\n            \"offsetof mismatch for PrimitiveState::frontFace\");\n    static_assert(offsetof(PrimitiveState, cullMode) == offsetof(WGPUPrimitiveState, cullMode),\n            \"offsetof mismatch for PrimitiveState::cullMode\");\n\n    // QuerySetDescriptor\n\n    static_assert(sizeof(QuerySetDescriptor) == sizeof(WGPUQuerySetDescriptor), \"sizeof mismatch for QuerySetDescriptor\");\n    static_assert(alignof(QuerySetDescriptor) == alignof(WGPUQuerySetDescriptor), \"alignof mismatch for QuerySetDescriptor\");\n\n    static_assert(offsetof(QuerySetDescriptor, nextInChain) == offsetof(WGPUQuerySetDescriptor, nextInChain),\n            \"offsetof mismatch for QuerySetDescriptor::nextInChain\");\n    static_assert(offsetof(QuerySetDescriptor, label) == offsetof(WGPUQuerySetDescriptor, label),\n            \"offsetof mismatch for QuerySetDescriptor::label\");\n    static_assert(offsetof(QuerySetDescriptor, type) == offsetof(WGPUQuerySetDescriptor, type),\n            \"offsetof mismatch for QuerySetDescriptor::type\");\n    static_assert(offsetof(QuerySetDescriptor, count) == offsetof(WGPUQuerySetDescriptor, count),\n            \"offsetof mismatch for QuerySetDescriptor::count\");\n    static_assert(offsetof(QuerySetDescriptor, pipelineStatistics) == offsetof(WGPUQuerySetDescriptor, pipelineStatistics),\n            \"offsetof mismatch for QuerySetDescriptor::pipelineStatistics\");\n    static_assert(offsetof(QuerySetDescriptor, pipelineStatisticsCount) == offsetof(WGPUQuerySetDescriptor, pipelineStatisticsCount),\n            \"offsetof mismatch for QuerySetDescriptor::pipelineStatisticsCount\");\n\n    // QueueDescriptor\n\n    static_assert(sizeof(QueueDescriptor) == sizeof(WGPUQueueDescriptor), \"sizeof mismatch for QueueDescriptor\");\n    static_assert(alignof(QueueDescriptor) == alignof(WGPUQueueDescriptor), \"alignof mismatch for QueueDescriptor\");\n\n    static_assert(offsetof(QueueDescriptor, nextInChain) == offsetof(WGPUQueueDescriptor, nextInChain),\n            \"offsetof mismatch for QueueDescriptor::nextInChain\");\n    static_assert(offsetof(QueueDescriptor, label) == offsetof(WGPUQueueDescriptor, label),\n            \"offsetof mismatch for QueueDescriptor::label\");\n\n    // RenderBundleDescriptor\n\n    static_assert(sizeof(RenderBundleDescriptor) == sizeof(WGPURenderBundleDescriptor), \"sizeof mismatch for RenderBundleDescriptor\");\n    static_assert(alignof(RenderBundleDescriptor) == alignof(WGPURenderBundleDescriptor), \"alignof mismatch for RenderBundleDescriptor\");\n\n    static_assert(offsetof(RenderBundleDescriptor, nextInChain) == offsetof(WGPURenderBundleDescriptor, nextInChain),\n            \"offsetof mismatch for RenderBundleDescriptor::nextInChain\");\n    static_assert(offsetof(RenderBundleDescriptor, label) == offsetof(WGPURenderBundleDescriptor, label),\n            \"offsetof mismatch for RenderBundleDescriptor::label\");\n\n    // RenderBundleEncoderDescriptor\n\n    static_assert(sizeof(RenderBundleEncoderDescriptor) == sizeof(WGPURenderBundleEncoderDescriptor), \"sizeof mismatch for RenderBundleEncoderDescriptor\");\n    static_assert(alignof(RenderBundleEncoderDescriptor) == alignof(WGPURenderBundleEncoderDescriptor), \"alignof mismatch for RenderBundleEncoderDescriptor\");\n\n    static_assert(offsetof(RenderBundleEncoderDescriptor, nextInChain) == offsetof(WGPURenderBundleEncoderDescriptor, nextInChain),\n            \"offsetof mismatch for RenderBundleEncoderDescriptor::nextInChain\");\n    static_assert(offsetof(RenderBundleEncoderDescriptor, label) == offsetof(WGPURenderBundleEncoderDescriptor, label),\n            \"offsetof mismatch for RenderBundleEncoderDescriptor::label\");\n    static_assert(offsetof(RenderBundleEncoderDescriptor, colorFormatsCount) == offsetof(WGPURenderBundleEncoderDescriptor, colorFormatsCount),\n            \"offsetof mismatch for RenderBundleEncoderDescriptor::colorFormatsCount\");\n    static_assert(offsetof(RenderBundleEncoderDescriptor, colorFormats) == offsetof(WGPURenderBundleEncoderDescriptor, colorFormats),\n            \"offsetof mismatch for RenderBundleEncoderDescriptor::colorFormats\");\n    static_assert(offsetof(RenderBundleEncoderDescriptor, depthStencilFormat) == offsetof(WGPURenderBundleEncoderDescriptor, depthStencilFormat),\n            \"offsetof mismatch for RenderBundleEncoderDescriptor::depthStencilFormat\");\n    static_assert(offsetof(RenderBundleEncoderDescriptor, sampleCount) == offsetof(WGPURenderBundleEncoderDescriptor, sampleCount),\n            \"offsetof mismatch for RenderBundleEncoderDescriptor::sampleCount\");\n    static_assert(offsetof(RenderBundleEncoderDescriptor, depthReadOnly) == offsetof(WGPURenderBundleEncoderDescriptor, depthReadOnly),\n            \"offsetof mismatch for RenderBundleEncoderDescriptor::depthReadOnly\");\n    static_assert(offsetof(RenderBundleEncoderDescriptor, stencilReadOnly) == offsetof(WGPURenderBundleEncoderDescriptor, stencilReadOnly),\n            \"offsetof mismatch for RenderBundleEncoderDescriptor::stencilReadOnly\");\n\n    // RenderPassDepthStencilAttachment\n\n    static_assert(sizeof(RenderPassDepthStencilAttachment) == sizeof(WGPURenderPassDepthStencilAttachment), \"sizeof mismatch for RenderPassDepthStencilAttachment\");\n    static_assert(alignof(RenderPassDepthStencilAttachment) == alignof(WGPURenderPassDepthStencilAttachment), \"alignof mismatch for RenderPassDepthStencilAttachment\");\n\n    static_assert(offsetof(RenderPassDepthStencilAttachment, view) == offsetof(WGPURenderPassDepthStencilAttachment, view),\n            \"offsetof mismatch for RenderPassDepthStencilAttachment::view\");\n    static_assert(offsetof(RenderPassDepthStencilAttachment, depthLoadOp) == offsetof(WGPURenderPassDepthStencilAttachment, depthLoadOp),\n            \"offsetof mismatch for RenderPassDepthStencilAttachment::depthLoadOp\");\n    static_assert(offsetof(RenderPassDepthStencilAttachment, depthStoreOp) == offsetof(WGPURenderPassDepthStencilAttachment, depthStoreOp),\n            \"offsetof mismatch for RenderPassDepthStencilAttachment::depthStoreOp\");\n    static_assert(offsetof(RenderPassDepthStencilAttachment, depthClearValue) == offsetof(WGPURenderPassDepthStencilAttachment, depthClearValue),\n            \"offsetof mismatch for RenderPassDepthStencilAttachment::depthClearValue\");\n    static_assert(offsetof(RenderPassDepthStencilAttachment, depthReadOnly) == offsetof(WGPURenderPassDepthStencilAttachment, depthReadOnly),\n            \"offsetof mismatch for RenderPassDepthStencilAttachment::depthReadOnly\");\n    static_assert(offsetof(RenderPassDepthStencilAttachment, stencilLoadOp) == offsetof(WGPURenderPassDepthStencilAttachment, stencilLoadOp),\n            \"offsetof mismatch for RenderPassDepthStencilAttachment::stencilLoadOp\");\n    static_assert(offsetof(RenderPassDepthStencilAttachment, stencilStoreOp) == offsetof(WGPURenderPassDepthStencilAttachment, stencilStoreOp),\n            \"offsetof mismatch for RenderPassDepthStencilAttachment::stencilStoreOp\");\n    static_assert(offsetof(RenderPassDepthStencilAttachment, stencilClearValue) == offsetof(WGPURenderPassDepthStencilAttachment, stencilClearValue),\n            \"offsetof mismatch for RenderPassDepthStencilAttachment::stencilClearValue\");\n    static_assert(offsetof(RenderPassDepthStencilAttachment, stencilReadOnly) == offsetof(WGPURenderPassDepthStencilAttachment, stencilReadOnly),\n            \"offsetof mismatch for RenderPassDepthStencilAttachment::stencilReadOnly\");\n\n    // RenderPassDescriptorMaxDrawCount\n\n    static_assert(sizeof(RenderPassDescriptorMaxDrawCount) == sizeof(WGPURenderPassDescriptorMaxDrawCount), \"sizeof mismatch for RenderPassDescriptorMaxDrawCount\");\n    static_assert(alignof(RenderPassDescriptorMaxDrawCount) == alignof(WGPURenderPassDescriptorMaxDrawCount), \"alignof mismatch for RenderPassDescriptorMaxDrawCount\");\n\n    static_assert(offsetof(RenderPassDescriptorMaxDrawCount, maxDrawCount) == offsetof(WGPURenderPassDescriptorMaxDrawCount, maxDrawCount),\n            \"offsetof mismatch for RenderPassDescriptorMaxDrawCount::maxDrawCount\");\n\n    // RenderPassTimestampWrite\n\n    static_assert(sizeof(RenderPassTimestampWrite) == sizeof(WGPURenderPassTimestampWrite), \"sizeof mismatch for RenderPassTimestampWrite\");\n    static_assert(alignof(RenderPassTimestampWrite) == alignof(WGPURenderPassTimestampWrite), \"alignof mismatch for RenderPassTimestampWrite\");\n\n    static_assert(offsetof(RenderPassTimestampWrite, querySet) == offsetof(WGPURenderPassTimestampWrite, querySet),\n            \"offsetof mismatch for RenderPassTimestampWrite::querySet\");\n    static_assert(offsetof(RenderPassTimestampWrite, queryIndex) == offsetof(WGPURenderPassTimestampWrite, queryIndex),\n            \"offsetof mismatch for RenderPassTimestampWrite::queryIndex\");\n    static_assert(offsetof(RenderPassTimestampWrite, location) == offsetof(WGPURenderPassTimestampWrite, location),\n            \"offsetof mismatch for RenderPassTimestampWrite::location\");\n\n    // RequestAdapterOptions\n\n    static_assert(sizeof(RequestAdapterOptions) == sizeof(WGPURequestAdapterOptions), \"sizeof mismatch for RequestAdapterOptions\");\n    static_assert(alignof(RequestAdapterOptions) == alignof(WGPURequestAdapterOptions), \"alignof mismatch for RequestAdapterOptions\");\n\n    static_assert(offsetof(RequestAdapterOptions, nextInChain) == offsetof(WGPURequestAdapterOptions, nextInChain),\n            \"offsetof mismatch for RequestAdapterOptions::nextInChain\");\n    static_assert(offsetof(RequestAdapterOptions, compatibleSurface) == offsetof(WGPURequestAdapterOptions, compatibleSurface),\n            \"offsetof mismatch for RequestAdapterOptions::compatibleSurface\");\n    static_assert(offsetof(RequestAdapterOptions, powerPreference) == offsetof(WGPURequestAdapterOptions, powerPreference),\n            \"offsetof mismatch for RequestAdapterOptions::powerPreference\");\n    static_assert(offsetof(RequestAdapterOptions, backendType) == offsetof(WGPURequestAdapterOptions, backendType),\n            \"offsetof mismatch for RequestAdapterOptions::backendType\");\n    static_assert(offsetof(RequestAdapterOptions, forceFallbackAdapter) == offsetof(WGPURequestAdapterOptions, forceFallbackAdapter),\n            \"offsetof mismatch for RequestAdapterOptions::forceFallbackAdapter\");\n    static_assert(offsetof(RequestAdapterOptions, compatibilityMode) == offsetof(WGPURequestAdapterOptions, compatibilityMode),\n            \"offsetof mismatch for RequestAdapterOptions::compatibilityMode\");\n\n    // SamplerBindingLayout\n\n    static_assert(sizeof(SamplerBindingLayout) == sizeof(WGPUSamplerBindingLayout), \"sizeof mismatch for SamplerBindingLayout\");\n    static_assert(alignof(SamplerBindingLayout) == alignof(WGPUSamplerBindingLayout), \"alignof mismatch for SamplerBindingLayout\");\n\n    static_assert(offsetof(SamplerBindingLayout, nextInChain) == offsetof(WGPUSamplerBindingLayout, nextInChain),\n            \"offsetof mismatch for SamplerBindingLayout::nextInChain\");\n    static_assert(offsetof(SamplerBindingLayout, type) == offsetof(WGPUSamplerBindingLayout, type),\n            \"offsetof mismatch for SamplerBindingLayout::type\");\n\n    // SamplerDescriptor\n\n    static_assert(sizeof(SamplerDescriptor) == sizeof(WGPUSamplerDescriptor), \"sizeof mismatch for SamplerDescriptor\");\n    static_assert(alignof(SamplerDescriptor) == alignof(WGPUSamplerDescriptor), \"alignof mismatch for SamplerDescriptor\");\n\n    static_assert(offsetof(SamplerDescriptor, nextInChain) == offsetof(WGPUSamplerDescriptor, nextInChain),\n            \"offsetof mismatch for SamplerDescriptor::nextInChain\");\n    static_assert(offsetof(SamplerDescriptor, label) == offsetof(WGPUSamplerDescriptor, label),\n            \"offsetof mismatch for SamplerDescriptor::label\");\n    static_assert(offsetof(SamplerDescriptor, addressModeU) == offsetof(WGPUSamplerDescriptor, addressModeU),\n            \"offsetof mismatch for SamplerDescriptor::addressModeU\");\n    static_assert(offsetof(SamplerDescriptor, addressModeV) == offsetof(WGPUSamplerDescriptor, addressModeV),\n            \"offsetof mismatch for SamplerDescriptor::addressModeV\");\n    static_assert(offsetof(SamplerDescriptor, addressModeW) == offsetof(WGPUSamplerDescriptor, addressModeW),\n            \"offsetof mismatch for SamplerDescriptor::addressModeW\");\n    static_assert(offsetof(SamplerDescriptor, magFilter) == offsetof(WGPUSamplerDescriptor, magFilter),\n            \"offsetof mismatch for SamplerDescriptor::magFilter\");\n    static_assert(offsetof(SamplerDescriptor, minFilter) == offsetof(WGPUSamplerDescriptor, minFilter),\n            \"offsetof mismatch for SamplerDescriptor::minFilter\");\n    static_assert(offsetof(SamplerDescriptor, mipmapFilter) == offsetof(WGPUSamplerDescriptor, mipmapFilter),\n            \"offsetof mismatch for SamplerDescriptor::mipmapFilter\");\n    static_assert(offsetof(SamplerDescriptor, lodMinClamp) == offsetof(WGPUSamplerDescriptor, lodMinClamp),\n            \"offsetof mismatch for SamplerDescriptor::lodMinClamp\");\n    static_assert(offsetof(SamplerDescriptor, lodMaxClamp) == offsetof(WGPUSamplerDescriptor, lodMaxClamp),\n            \"offsetof mismatch for SamplerDescriptor::lodMaxClamp\");\n    static_assert(offsetof(SamplerDescriptor, compare) == offsetof(WGPUSamplerDescriptor, compare),\n            \"offsetof mismatch for SamplerDescriptor::compare\");\n    static_assert(offsetof(SamplerDescriptor, maxAnisotropy) == offsetof(WGPUSamplerDescriptor, maxAnisotropy),\n            \"offsetof mismatch for SamplerDescriptor::maxAnisotropy\");\n\n    // ShaderModuleDescriptor\n\n    static_assert(sizeof(ShaderModuleDescriptor) == sizeof(WGPUShaderModuleDescriptor), \"sizeof mismatch for ShaderModuleDescriptor\");\n    static_assert(alignof(ShaderModuleDescriptor) == alignof(WGPUShaderModuleDescriptor), \"alignof mismatch for ShaderModuleDescriptor\");\n\n    static_assert(offsetof(ShaderModuleDescriptor, nextInChain) == offsetof(WGPUShaderModuleDescriptor, nextInChain),\n            \"offsetof mismatch for ShaderModuleDescriptor::nextInChain\");\n    static_assert(offsetof(ShaderModuleDescriptor, label) == offsetof(WGPUShaderModuleDescriptor, label),\n            \"offsetof mismatch for ShaderModuleDescriptor::label\");\n\n    // ShaderModuleSPIRVDescriptor\n\n    static_assert(sizeof(ShaderModuleSPIRVDescriptor) == sizeof(WGPUShaderModuleSPIRVDescriptor), \"sizeof mismatch for ShaderModuleSPIRVDescriptor\");\n    static_assert(alignof(ShaderModuleSPIRVDescriptor) == alignof(WGPUShaderModuleSPIRVDescriptor), \"alignof mismatch for ShaderModuleSPIRVDescriptor\");\n\n    static_assert(offsetof(ShaderModuleSPIRVDescriptor, codeSize) == offsetof(WGPUShaderModuleSPIRVDescriptor, codeSize),\n            \"offsetof mismatch for ShaderModuleSPIRVDescriptor::codeSize\");\n    static_assert(offsetof(ShaderModuleSPIRVDescriptor, code) == offsetof(WGPUShaderModuleSPIRVDescriptor, code),\n            \"offsetof mismatch for ShaderModuleSPIRVDescriptor::code\");\n\n    // ShaderModuleWGSLDescriptor\n\n    static_assert(sizeof(ShaderModuleWGSLDescriptor) == sizeof(WGPUShaderModuleWGSLDescriptor), \"sizeof mismatch for ShaderModuleWGSLDescriptor\");\n    static_assert(alignof(ShaderModuleWGSLDescriptor) == alignof(WGPUShaderModuleWGSLDescriptor), \"alignof mismatch for ShaderModuleWGSLDescriptor\");\n\n    static_assert(offsetof(ShaderModuleWGSLDescriptor, code) == offsetof(WGPUShaderModuleWGSLDescriptor, code),\n            \"offsetof mismatch for ShaderModuleWGSLDescriptor::code\");\n\n    // SharedFenceDescriptor\n\n    static_assert(sizeof(SharedFenceDescriptor) == sizeof(WGPUSharedFenceDescriptor), \"sizeof mismatch for SharedFenceDescriptor\");\n    static_assert(alignof(SharedFenceDescriptor) == alignof(WGPUSharedFenceDescriptor), \"alignof mismatch for SharedFenceDescriptor\");\n\n    static_assert(offsetof(SharedFenceDescriptor, nextInChain) == offsetof(WGPUSharedFenceDescriptor, nextInChain),\n            \"offsetof mismatch for SharedFenceDescriptor::nextInChain\");\n    static_assert(offsetof(SharedFenceDescriptor, label) == offsetof(WGPUSharedFenceDescriptor, label),\n            \"offsetof mismatch for SharedFenceDescriptor::label\");\n\n    // SharedFenceDXGISharedHandleDescriptor\n\n    static_assert(sizeof(SharedFenceDXGISharedHandleDescriptor) == sizeof(WGPUSharedFenceDXGISharedHandleDescriptor), \"sizeof mismatch for SharedFenceDXGISharedHandleDescriptor\");\n    static_assert(alignof(SharedFenceDXGISharedHandleDescriptor) == alignof(WGPUSharedFenceDXGISharedHandleDescriptor), \"alignof mismatch for SharedFenceDXGISharedHandleDescriptor\");\n\n    static_assert(offsetof(SharedFenceDXGISharedHandleDescriptor, handle) == offsetof(WGPUSharedFenceDXGISharedHandleDescriptor, handle),\n            \"offsetof mismatch for SharedFenceDXGISharedHandleDescriptor::handle\");\n\n    // SharedFenceDXGISharedHandleExportInfo\n\n    static_assert(sizeof(SharedFenceDXGISharedHandleExportInfo) == sizeof(WGPUSharedFenceDXGISharedHandleExportInfo), \"sizeof mismatch for SharedFenceDXGISharedHandleExportInfo\");\n    static_assert(alignof(SharedFenceDXGISharedHandleExportInfo) == alignof(WGPUSharedFenceDXGISharedHandleExportInfo), \"alignof mismatch for SharedFenceDXGISharedHandleExportInfo\");\n\n    static_assert(offsetof(SharedFenceDXGISharedHandleExportInfo, handle) == offsetof(WGPUSharedFenceDXGISharedHandleExportInfo, handle),\n            \"offsetof mismatch for SharedFenceDXGISharedHandleExportInfo::handle\");\n\n    // SharedFenceExportInfo\n\n    static_assert(sizeof(SharedFenceExportInfo) == sizeof(WGPUSharedFenceExportInfo), \"sizeof mismatch for SharedFenceExportInfo\");\n    static_assert(alignof(SharedFenceExportInfo) == alignof(WGPUSharedFenceExportInfo), \"alignof mismatch for SharedFenceExportInfo\");\n\n    static_assert(offsetof(SharedFenceExportInfo, nextInChain) == offsetof(WGPUSharedFenceExportInfo, nextInChain),\n            \"offsetof mismatch for SharedFenceExportInfo::nextInChain\");\n    static_assert(offsetof(SharedFenceExportInfo, type) == offsetof(WGPUSharedFenceExportInfo, type),\n            \"offsetof mismatch for SharedFenceExportInfo::type\");\n\n    // SharedFenceMTLSharedEventDescriptor\n\n    static_assert(sizeof(SharedFenceMTLSharedEventDescriptor) == sizeof(WGPUSharedFenceMTLSharedEventDescriptor), \"sizeof mismatch for SharedFenceMTLSharedEventDescriptor\");\n    static_assert(alignof(SharedFenceMTLSharedEventDescriptor) == alignof(WGPUSharedFenceMTLSharedEventDescriptor), \"alignof mismatch for SharedFenceMTLSharedEventDescriptor\");\n\n    static_assert(offsetof(SharedFenceMTLSharedEventDescriptor, sharedEvent) == offsetof(WGPUSharedFenceMTLSharedEventDescriptor, sharedEvent),\n            \"offsetof mismatch for SharedFenceMTLSharedEventDescriptor::sharedEvent\");\n\n    // SharedFenceMTLSharedEventExportInfo\n\n    static_assert(sizeof(SharedFenceMTLSharedEventExportInfo) == sizeof(WGPUSharedFenceMTLSharedEventExportInfo), \"sizeof mismatch for SharedFenceMTLSharedEventExportInfo\");\n    static_assert(alignof(SharedFenceMTLSharedEventExportInfo) == alignof(WGPUSharedFenceMTLSharedEventExportInfo), \"alignof mismatch for SharedFenceMTLSharedEventExportInfo\");\n\n    static_assert(offsetof(SharedFenceMTLSharedEventExportInfo, sharedEvent) == offsetof(WGPUSharedFenceMTLSharedEventExportInfo, sharedEvent),\n            \"offsetof mismatch for SharedFenceMTLSharedEventExportInfo::sharedEvent\");\n\n    // SharedFenceVkSemaphoreOpaqueFDDescriptor\n\n    static_assert(sizeof(SharedFenceVkSemaphoreOpaqueFDDescriptor) == sizeof(WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor), \"sizeof mismatch for SharedFenceVkSemaphoreOpaqueFDDescriptor\");\n    static_assert(alignof(SharedFenceVkSemaphoreOpaqueFDDescriptor) == alignof(WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor), \"alignof mismatch for SharedFenceVkSemaphoreOpaqueFDDescriptor\");\n\n    static_assert(offsetof(SharedFenceVkSemaphoreOpaqueFDDescriptor, handle) == offsetof(WGPUSharedFenceVkSemaphoreOpaqueFDDescriptor, handle),\n            \"offsetof mismatch for SharedFenceVkSemaphoreOpaqueFDDescriptor::handle\");\n\n    // SharedFenceVkSemaphoreOpaqueFDExportInfo\n\n    static_assert(sizeof(SharedFenceVkSemaphoreOpaqueFDExportInfo) == sizeof(WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo), \"sizeof mismatch for SharedFenceVkSemaphoreOpaqueFDExportInfo\");\n    static_assert(alignof(SharedFenceVkSemaphoreOpaqueFDExportInfo) == alignof(WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo), \"alignof mismatch for SharedFenceVkSemaphoreOpaqueFDExportInfo\");\n\n    static_assert(offsetof(SharedFenceVkSemaphoreOpaqueFDExportInfo, handle) == offsetof(WGPUSharedFenceVkSemaphoreOpaqueFDExportInfo, handle),\n            \"offsetof mismatch for SharedFenceVkSemaphoreOpaqueFDExportInfo::handle\");\n\n    // SharedFenceVkSemaphoreSyncFDDescriptor\n\n    static_assert(sizeof(SharedFenceVkSemaphoreSyncFDDescriptor) == sizeof(WGPUSharedFenceVkSemaphoreSyncFDDescriptor), \"sizeof mismatch for SharedFenceVkSemaphoreSyncFDDescriptor\");\n    static_assert(alignof(SharedFenceVkSemaphoreSyncFDDescriptor) == alignof(WGPUSharedFenceVkSemaphoreSyncFDDescriptor), \"alignof mismatch for SharedFenceVkSemaphoreSyncFDDescriptor\");\n\n    static_assert(offsetof(SharedFenceVkSemaphoreSyncFDDescriptor, handle) == offsetof(WGPUSharedFenceVkSemaphoreSyncFDDescriptor, handle),\n            \"offsetof mismatch for SharedFenceVkSemaphoreSyncFDDescriptor::handle\");\n\n    // SharedFenceVkSemaphoreSyncFDExportInfo\n\n    static_assert(sizeof(SharedFenceVkSemaphoreSyncFDExportInfo) == sizeof(WGPUSharedFenceVkSemaphoreSyncFDExportInfo), \"sizeof mismatch for SharedFenceVkSemaphoreSyncFDExportInfo\");\n    static_assert(alignof(SharedFenceVkSemaphoreSyncFDExportInfo) == alignof(WGPUSharedFenceVkSemaphoreSyncFDExportInfo), \"alignof mismatch for SharedFenceVkSemaphoreSyncFDExportInfo\");\n\n    static_assert(offsetof(SharedFenceVkSemaphoreSyncFDExportInfo, handle) == offsetof(WGPUSharedFenceVkSemaphoreSyncFDExportInfo, handle),\n            \"offsetof mismatch for SharedFenceVkSemaphoreSyncFDExportInfo::handle\");\n\n    // SharedFenceVkSemaphoreZirconHandleDescriptor\n\n    static_assert(sizeof(SharedFenceVkSemaphoreZirconHandleDescriptor) == sizeof(WGPUSharedFenceVkSemaphoreZirconHandleDescriptor), \"sizeof mismatch for SharedFenceVkSemaphoreZirconHandleDescriptor\");\n    static_assert(alignof(SharedFenceVkSemaphoreZirconHandleDescriptor) == alignof(WGPUSharedFenceVkSemaphoreZirconHandleDescriptor), \"alignof mismatch for SharedFenceVkSemaphoreZirconHandleDescriptor\");\n\n    static_assert(offsetof(SharedFenceVkSemaphoreZirconHandleDescriptor, handle) == offsetof(WGPUSharedFenceVkSemaphoreZirconHandleDescriptor, handle),\n            \"offsetof mismatch for SharedFenceVkSemaphoreZirconHandleDescriptor::handle\");\n\n    // SharedFenceVkSemaphoreZirconHandleExportInfo\n\n    static_assert(sizeof(SharedFenceVkSemaphoreZirconHandleExportInfo) == sizeof(WGPUSharedFenceVkSemaphoreZirconHandleExportInfo), \"sizeof mismatch for SharedFenceVkSemaphoreZirconHandleExportInfo\");\n    static_assert(alignof(SharedFenceVkSemaphoreZirconHandleExportInfo) == alignof(WGPUSharedFenceVkSemaphoreZirconHandleExportInfo), \"alignof mismatch for SharedFenceVkSemaphoreZirconHandleExportInfo\");\n\n    static_assert(offsetof(SharedFenceVkSemaphoreZirconHandleExportInfo, handle) == offsetof(WGPUSharedFenceVkSemaphoreZirconHandleExportInfo, handle),\n            \"offsetof mismatch for SharedFenceVkSemaphoreZirconHandleExportInfo::handle\");\n\n    // SharedTextureMemoryAHardwareBufferDescriptor\n\n    static_assert(sizeof(SharedTextureMemoryAHardwareBufferDescriptor) == sizeof(WGPUSharedTextureMemoryAHardwareBufferDescriptor), \"sizeof mismatch for SharedTextureMemoryAHardwareBufferDescriptor\");\n    static_assert(alignof(SharedTextureMemoryAHardwareBufferDescriptor) == alignof(WGPUSharedTextureMemoryAHardwareBufferDescriptor), \"alignof mismatch for SharedTextureMemoryAHardwareBufferDescriptor\");\n\n    static_assert(offsetof(SharedTextureMemoryAHardwareBufferDescriptor, handle) == offsetof(WGPUSharedTextureMemoryAHardwareBufferDescriptor, handle),\n            \"offsetof mismatch for SharedTextureMemoryAHardwareBufferDescriptor::handle\");\n\n    // SharedTextureMemoryBeginAccessDescriptor\n\n    static_assert(sizeof(SharedTextureMemoryBeginAccessDescriptor) == sizeof(WGPUSharedTextureMemoryBeginAccessDescriptor), \"sizeof mismatch for SharedTextureMemoryBeginAccessDescriptor\");\n    static_assert(alignof(SharedTextureMemoryBeginAccessDescriptor) == alignof(WGPUSharedTextureMemoryBeginAccessDescriptor), \"alignof mismatch for SharedTextureMemoryBeginAccessDescriptor\");\n\n    static_assert(offsetof(SharedTextureMemoryBeginAccessDescriptor, nextInChain) == offsetof(WGPUSharedTextureMemoryBeginAccessDescriptor, nextInChain),\n            \"offsetof mismatch for SharedTextureMemoryBeginAccessDescriptor::nextInChain\");\n    static_assert(offsetof(SharedTextureMemoryBeginAccessDescriptor, initialized) == offsetof(WGPUSharedTextureMemoryBeginAccessDescriptor, initialized),\n            \"offsetof mismatch for SharedTextureMemoryBeginAccessDescriptor::initialized\");\n    static_assert(offsetof(SharedTextureMemoryBeginAccessDescriptor, fenceCount) == offsetof(WGPUSharedTextureMemoryBeginAccessDescriptor, fenceCount),\n            \"offsetof mismatch for SharedTextureMemoryBeginAccessDescriptor::fenceCount\");\n    static_assert(offsetof(SharedTextureMemoryBeginAccessDescriptor, fences) == offsetof(WGPUSharedTextureMemoryBeginAccessDescriptor, fences),\n            \"offsetof mismatch for SharedTextureMemoryBeginAccessDescriptor::fences\");\n    static_assert(offsetof(SharedTextureMemoryBeginAccessDescriptor, signaledValues) == offsetof(WGPUSharedTextureMemoryBeginAccessDescriptor, signaledValues),\n            \"offsetof mismatch for SharedTextureMemoryBeginAccessDescriptor::signaledValues\");\n\n    // SharedTextureMemoryDescriptor\n\n    static_assert(sizeof(SharedTextureMemoryDescriptor) == sizeof(WGPUSharedTextureMemoryDescriptor), \"sizeof mismatch for SharedTextureMemoryDescriptor\");\n    static_assert(alignof(SharedTextureMemoryDescriptor) == alignof(WGPUSharedTextureMemoryDescriptor), \"alignof mismatch for SharedTextureMemoryDescriptor\");\n\n    static_assert(offsetof(SharedTextureMemoryDescriptor, nextInChain) == offsetof(WGPUSharedTextureMemoryDescriptor, nextInChain),\n            \"offsetof mismatch for SharedTextureMemoryDescriptor::nextInChain\");\n    static_assert(offsetof(SharedTextureMemoryDescriptor, label) == offsetof(WGPUSharedTextureMemoryDescriptor, label),\n            \"offsetof mismatch for SharedTextureMemoryDescriptor::label\");\n\n    // SharedTextureMemoryDmaBufDescriptor\n\n    static_assert(sizeof(SharedTextureMemoryDmaBufDescriptor) == sizeof(WGPUSharedTextureMemoryDmaBufDescriptor), \"sizeof mismatch for SharedTextureMemoryDmaBufDescriptor\");\n    static_assert(alignof(SharedTextureMemoryDmaBufDescriptor) == alignof(WGPUSharedTextureMemoryDmaBufDescriptor), \"alignof mismatch for SharedTextureMemoryDmaBufDescriptor\");\n\n    static_assert(offsetof(SharedTextureMemoryDmaBufDescriptor, memoryFD) == offsetof(WGPUSharedTextureMemoryDmaBufDescriptor, memoryFD),\n            \"offsetof mismatch for SharedTextureMemoryDmaBufDescriptor::memoryFD\");\n    static_assert(offsetof(SharedTextureMemoryDmaBufDescriptor, allocationSize) == offsetof(WGPUSharedTextureMemoryDmaBufDescriptor, allocationSize),\n            \"offsetof mismatch for SharedTextureMemoryDmaBufDescriptor::allocationSize\");\n    static_assert(offsetof(SharedTextureMemoryDmaBufDescriptor, drmModifier) == offsetof(WGPUSharedTextureMemoryDmaBufDescriptor, drmModifier),\n            \"offsetof mismatch for SharedTextureMemoryDmaBufDescriptor::drmModifier\");\n    static_assert(offsetof(SharedTextureMemoryDmaBufDescriptor, planeCount) == offsetof(WGPUSharedTextureMemoryDmaBufDescriptor, planeCount),\n            \"offsetof mismatch for SharedTextureMemoryDmaBufDescriptor::planeCount\");\n    static_assert(offsetof(SharedTextureMemoryDmaBufDescriptor, planeOffsets) == offsetof(WGPUSharedTextureMemoryDmaBufDescriptor, planeOffsets),\n            \"offsetof mismatch for SharedTextureMemoryDmaBufDescriptor::planeOffsets\");\n    static_assert(offsetof(SharedTextureMemoryDmaBufDescriptor, planeStrides) == offsetof(WGPUSharedTextureMemoryDmaBufDescriptor, planeStrides),\n            \"offsetof mismatch for SharedTextureMemoryDmaBufDescriptor::planeStrides\");\n\n    // SharedTextureMemoryDXGISharedHandleDescriptor\n\n    static_assert(sizeof(SharedTextureMemoryDXGISharedHandleDescriptor) == sizeof(WGPUSharedTextureMemoryDXGISharedHandleDescriptor), \"sizeof mismatch for SharedTextureMemoryDXGISharedHandleDescriptor\");\n    static_assert(alignof(SharedTextureMemoryDXGISharedHandleDescriptor) == alignof(WGPUSharedTextureMemoryDXGISharedHandleDescriptor), \"alignof mismatch for SharedTextureMemoryDXGISharedHandleDescriptor\");\n\n    static_assert(offsetof(SharedTextureMemoryDXGISharedHandleDescriptor, handle) == offsetof(WGPUSharedTextureMemoryDXGISharedHandleDescriptor, handle),\n            \"offsetof mismatch for SharedTextureMemoryDXGISharedHandleDescriptor::handle\");\n\n    // SharedTextureMemoryEGLImageDescriptor\n\n    static_assert(sizeof(SharedTextureMemoryEGLImageDescriptor) == sizeof(WGPUSharedTextureMemoryEGLImageDescriptor), \"sizeof mismatch for SharedTextureMemoryEGLImageDescriptor\");\n    static_assert(alignof(SharedTextureMemoryEGLImageDescriptor) == alignof(WGPUSharedTextureMemoryEGLImageDescriptor), \"alignof mismatch for SharedTextureMemoryEGLImageDescriptor\");\n\n    static_assert(offsetof(SharedTextureMemoryEGLImageDescriptor, image) == offsetof(WGPUSharedTextureMemoryEGLImageDescriptor, image),\n            \"offsetof mismatch for SharedTextureMemoryEGLImageDescriptor::image\");\n\n    // SharedTextureMemoryEndAccessState\n\n    static_assert(sizeof(SharedTextureMemoryEndAccessState) == sizeof(WGPUSharedTextureMemoryEndAccessState), \"sizeof mismatch for SharedTextureMemoryEndAccessState\");\n    static_assert(alignof(SharedTextureMemoryEndAccessState) == alignof(WGPUSharedTextureMemoryEndAccessState), \"alignof mismatch for SharedTextureMemoryEndAccessState\");\n\n    static_assert(offsetof(SharedTextureMemoryEndAccessState, nextInChain) == offsetof(WGPUSharedTextureMemoryEndAccessState, nextInChain),\n            \"offsetof mismatch for SharedTextureMemoryEndAccessState::nextInChain\");\n    static_assert(offsetof(SharedTextureMemoryEndAccessState, initialized) == offsetof(WGPUSharedTextureMemoryEndAccessState, initialized),\n            \"offsetof mismatch for SharedTextureMemoryEndAccessState::initialized\");\n    static_assert(offsetof(SharedTextureMemoryEndAccessState, fenceCount) == offsetof(WGPUSharedTextureMemoryEndAccessState, fenceCount),\n            \"offsetof mismatch for SharedTextureMemoryEndAccessState::fenceCount\");\n    static_assert(offsetof(SharedTextureMemoryEndAccessState, fences) == offsetof(WGPUSharedTextureMemoryEndAccessState, fences),\n            \"offsetof mismatch for SharedTextureMemoryEndAccessState::fences\");\n    static_assert(offsetof(SharedTextureMemoryEndAccessState, signaledValues) == offsetof(WGPUSharedTextureMemoryEndAccessState, signaledValues),\n            \"offsetof mismatch for SharedTextureMemoryEndAccessState::signaledValues\");\n\n    // SharedTextureMemoryIOSurfaceDescriptor\n\n    static_assert(sizeof(SharedTextureMemoryIOSurfaceDescriptor) == sizeof(WGPUSharedTextureMemoryIOSurfaceDescriptor), \"sizeof mismatch for SharedTextureMemoryIOSurfaceDescriptor\");\n    static_assert(alignof(SharedTextureMemoryIOSurfaceDescriptor) == alignof(WGPUSharedTextureMemoryIOSurfaceDescriptor), \"alignof mismatch for SharedTextureMemoryIOSurfaceDescriptor\");\n\n    static_assert(offsetof(SharedTextureMemoryIOSurfaceDescriptor, ioSurface) == offsetof(WGPUSharedTextureMemoryIOSurfaceDescriptor, ioSurface),\n            \"offsetof mismatch for SharedTextureMemoryIOSurfaceDescriptor::ioSurface\");\n\n    // SharedTextureMemoryOpaqueFDDescriptor\n\n    static_assert(sizeof(SharedTextureMemoryOpaqueFDDescriptor) == sizeof(WGPUSharedTextureMemoryOpaqueFDDescriptor), \"sizeof mismatch for SharedTextureMemoryOpaqueFDDescriptor\");\n    static_assert(alignof(SharedTextureMemoryOpaqueFDDescriptor) == alignof(WGPUSharedTextureMemoryOpaqueFDDescriptor), \"alignof mismatch for SharedTextureMemoryOpaqueFDDescriptor\");\n\n    static_assert(offsetof(SharedTextureMemoryOpaqueFDDescriptor, memoryFD) == offsetof(WGPUSharedTextureMemoryOpaqueFDDescriptor, memoryFD),\n            \"offsetof mismatch for SharedTextureMemoryOpaqueFDDescriptor::memoryFD\");\n    static_assert(offsetof(SharedTextureMemoryOpaqueFDDescriptor, allocationSize) == offsetof(WGPUSharedTextureMemoryOpaqueFDDescriptor, allocationSize),\n            \"offsetof mismatch for SharedTextureMemoryOpaqueFDDescriptor::allocationSize\");\n\n    // SharedTextureMemoryVkDedicatedAllocationDescriptor\n\n    static_assert(sizeof(SharedTextureMemoryVkDedicatedAllocationDescriptor) == sizeof(WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor), \"sizeof mismatch for SharedTextureMemoryVkDedicatedAllocationDescriptor\");\n    static_assert(alignof(SharedTextureMemoryVkDedicatedAllocationDescriptor) == alignof(WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor), \"alignof mismatch for SharedTextureMemoryVkDedicatedAllocationDescriptor\");\n\n    static_assert(offsetof(SharedTextureMemoryVkDedicatedAllocationDescriptor, dedicatedAllocation) == offsetof(WGPUSharedTextureMemoryVkDedicatedAllocationDescriptor, dedicatedAllocation),\n            \"offsetof mismatch for SharedTextureMemoryVkDedicatedAllocationDescriptor::dedicatedAllocation\");\n\n    // SharedTextureMemoryVkImageLayoutBeginState\n\n    static_assert(sizeof(SharedTextureMemoryVkImageLayoutBeginState) == sizeof(WGPUSharedTextureMemoryVkImageLayoutBeginState), \"sizeof mismatch for SharedTextureMemoryVkImageLayoutBeginState\");\n    static_assert(alignof(SharedTextureMemoryVkImageLayoutBeginState) == alignof(WGPUSharedTextureMemoryVkImageLayoutBeginState), \"alignof mismatch for SharedTextureMemoryVkImageLayoutBeginState\");\n\n    static_assert(offsetof(SharedTextureMemoryVkImageLayoutBeginState, oldLayout) == offsetof(WGPUSharedTextureMemoryVkImageLayoutBeginState, oldLayout),\n            \"offsetof mismatch for SharedTextureMemoryVkImageLayoutBeginState::oldLayout\");\n    static_assert(offsetof(SharedTextureMemoryVkImageLayoutBeginState, newLayout) == offsetof(WGPUSharedTextureMemoryVkImageLayoutBeginState, newLayout),\n            \"offsetof mismatch for SharedTextureMemoryVkImageLayoutBeginState::newLayout\");\n\n    // SharedTextureMemoryVkImageLayoutEndState\n\n    static_assert(sizeof(SharedTextureMemoryVkImageLayoutEndState) == sizeof(WGPUSharedTextureMemoryVkImageLayoutEndState), \"sizeof mismatch for SharedTextureMemoryVkImageLayoutEndState\");\n    static_assert(alignof(SharedTextureMemoryVkImageLayoutEndState) == alignof(WGPUSharedTextureMemoryVkImageLayoutEndState), \"alignof mismatch for SharedTextureMemoryVkImageLayoutEndState\");\n\n    static_assert(offsetof(SharedTextureMemoryVkImageLayoutEndState, oldLayout) == offsetof(WGPUSharedTextureMemoryVkImageLayoutEndState, oldLayout),\n            \"offsetof mismatch for SharedTextureMemoryVkImageLayoutEndState::oldLayout\");\n    static_assert(offsetof(SharedTextureMemoryVkImageLayoutEndState, newLayout) == offsetof(WGPUSharedTextureMemoryVkImageLayoutEndState, newLayout),\n            \"offsetof mismatch for SharedTextureMemoryVkImageLayoutEndState::newLayout\");\n\n    // SharedTextureMemoryZirconHandleDescriptor\n\n    static_assert(sizeof(SharedTextureMemoryZirconHandleDescriptor) == sizeof(WGPUSharedTextureMemoryZirconHandleDescriptor), \"sizeof mismatch for SharedTextureMemoryZirconHandleDescriptor\");\n    static_assert(alignof(SharedTextureMemoryZirconHandleDescriptor) == alignof(WGPUSharedTextureMemoryZirconHandleDescriptor), \"alignof mismatch for SharedTextureMemoryZirconHandleDescriptor\");\n\n    static_assert(offsetof(SharedTextureMemoryZirconHandleDescriptor, memoryFD) == offsetof(WGPUSharedTextureMemoryZirconHandleDescriptor, memoryFD),\n            \"offsetof mismatch for SharedTextureMemoryZirconHandleDescriptor::memoryFD\");\n    static_assert(offsetof(SharedTextureMemoryZirconHandleDescriptor, allocationSize) == offsetof(WGPUSharedTextureMemoryZirconHandleDescriptor, allocationSize),\n            \"offsetof mismatch for SharedTextureMemoryZirconHandleDescriptor::allocationSize\");\n\n    // StencilFaceState\n\n    static_assert(sizeof(StencilFaceState) == sizeof(WGPUStencilFaceState), \"sizeof mismatch for StencilFaceState\");\n    static_assert(alignof(StencilFaceState) == alignof(WGPUStencilFaceState), \"alignof mismatch for StencilFaceState\");\n\n    static_assert(offsetof(StencilFaceState, compare) == offsetof(WGPUStencilFaceState, compare),\n            \"offsetof mismatch for StencilFaceState::compare\");\n    static_assert(offsetof(StencilFaceState, failOp) == offsetof(WGPUStencilFaceState, failOp),\n            \"offsetof mismatch for StencilFaceState::failOp\");\n    static_assert(offsetof(StencilFaceState, depthFailOp) == offsetof(WGPUStencilFaceState, depthFailOp),\n            \"offsetof mismatch for StencilFaceState::depthFailOp\");\n    static_assert(offsetof(StencilFaceState, passOp) == offsetof(WGPUStencilFaceState, passOp),\n            \"offsetof mismatch for StencilFaceState::passOp\");\n\n    // StorageTextureBindingLayout\n\n    static_assert(sizeof(StorageTextureBindingLayout) == sizeof(WGPUStorageTextureBindingLayout), \"sizeof mismatch for StorageTextureBindingLayout\");\n    static_assert(alignof(StorageTextureBindingLayout) == alignof(WGPUStorageTextureBindingLayout), \"alignof mismatch for StorageTextureBindingLayout\");\n\n    static_assert(offsetof(StorageTextureBindingLayout, nextInChain) == offsetof(WGPUStorageTextureBindingLayout, nextInChain),\n            \"offsetof mismatch for StorageTextureBindingLayout::nextInChain\");\n    static_assert(offsetof(StorageTextureBindingLayout, access) == offsetof(WGPUStorageTextureBindingLayout, access),\n            \"offsetof mismatch for StorageTextureBindingLayout::access\");\n    static_assert(offsetof(StorageTextureBindingLayout, format) == offsetof(WGPUStorageTextureBindingLayout, format),\n            \"offsetof mismatch for StorageTextureBindingLayout::format\");\n    static_assert(offsetof(StorageTextureBindingLayout, viewDimension) == offsetof(WGPUStorageTextureBindingLayout, viewDimension),\n            \"offsetof mismatch for StorageTextureBindingLayout::viewDimension\");\n\n    // SurfaceDescriptor\n\n    static_assert(sizeof(SurfaceDescriptor) == sizeof(WGPUSurfaceDescriptor), \"sizeof mismatch for SurfaceDescriptor\");\n    static_assert(alignof(SurfaceDescriptor) == alignof(WGPUSurfaceDescriptor), \"alignof mismatch for SurfaceDescriptor\");\n\n    static_assert(offsetof(SurfaceDescriptor, nextInChain) == offsetof(WGPUSurfaceDescriptor, nextInChain),\n            \"offsetof mismatch for SurfaceDescriptor::nextInChain\");\n    static_assert(offsetof(SurfaceDescriptor, label) == offsetof(WGPUSurfaceDescriptor, label),\n            \"offsetof mismatch for SurfaceDescriptor::label\");\n\n    // SurfaceDescriptorFromAndroidNativeWindow\n\n    static_assert(sizeof(SurfaceDescriptorFromAndroidNativeWindow) == sizeof(WGPUSurfaceDescriptorFromAndroidNativeWindow), \"sizeof mismatch for SurfaceDescriptorFromAndroidNativeWindow\");\n    static_assert(alignof(SurfaceDescriptorFromAndroidNativeWindow) == alignof(WGPUSurfaceDescriptorFromAndroidNativeWindow), \"alignof mismatch for SurfaceDescriptorFromAndroidNativeWindow\");\n\n    static_assert(offsetof(SurfaceDescriptorFromAndroidNativeWindow, window) == offsetof(WGPUSurfaceDescriptorFromAndroidNativeWindow, window),\n            \"offsetof mismatch for SurfaceDescriptorFromAndroidNativeWindow::window\");\n\n    // SurfaceDescriptorFromCanvasHTMLSelector\n\n    static_assert(sizeof(SurfaceDescriptorFromCanvasHTMLSelector) == sizeof(WGPUSurfaceDescriptorFromCanvasHTMLSelector), \"sizeof mismatch for SurfaceDescriptorFromCanvasHTMLSelector\");\n    static_assert(alignof(SurfaceDescriptorFromCanvasHTMLSelector) == alignof(WGPUSurfaceDescriptorFromCanvasHTMLSelector), \"alignof mismatch for SurfaceDescriptorFromCanvasHTMLSelector\");\n\n    static_assert(offsetof(SurfaceDescriptorFromCanvasHTMLSelector, selector) == offsetof(WGPUSurfaceDescriptorFromCanvasHTMLSelector, selector),\n            \"offsetof mismatch for SurfaceDescriptorFromCanvasHTMLSelector::selector\");\n\n    // SurfaceDescriptorFromMetalLayer\n\n    static_assert(sizeof(SurfaceDescriptorFromMetalLayer) == sizeof(WGPUSurfaceDescriptorFromMetalLayer), \"sizeof mismatch for SurfaceDescriptorFromMetalLayer\");\n    static_assert(alignof(SurfaceDescriptorFromMetalLayer) == alignof(WGPUSurfaceDescriptorFromMetalLayer), \"alignof mismatch for SurfaceDescriptorFromMetalLayer\");\n\n    static_assert(offsetof(SurfaceDescriptorFromMetalLayer, layer) == offsetof(WGPUSurfaceDescriptorFromMetalLayer, layer),\n            \"offsetof mismatch for SurfaceDescriptorFromMetalLayer::layer\");\n\n    // SurfaceDescriptorFromWaylandSurface\n\n    static_assert(sizeof(SurfaceDescriptorFromWaylandSurface) == sizeof(WGPUSurfaceDescriptorFromWaylandSurface), \"sizeof mismatch for SurfaceDescriptorFromWaylandSurface\");\n    static_assert(alignof(SurfaceDescriptorFromWaylandSurface) == alignof(WGPUSurfaceDescriptorFromWaylandSurface), \"alignof mismatch for SurfaceDescriptorFromWaylandSurface\");\n\n    static_assert(offsetof(SurfaceDescriptorFromWaylandSurface, display) == offsetof(WGPUSurfaceDescriptorFromWaylandSurface, display),\n            \"offsetof mismatch for SurfaceDescriptorFromWaylandSurface::display\");\n    static_assert(offsetof(SurfaceDescriptorFromWaylandSurface, surface) == offsetof(WGPUSurfaceDescriptorFromWaylandSurface, surface),\n            \"offsetof mismatch for SurfaceDescriptorFromWaylandSurface::surface\");\n\n    // SurfaceDescriptorFromWindowsCoreWindow\n\n    static_assert(sizeof(SurfaceDescriptorFromWindowsCoreWindow) == sizeof(WGPUSurfaceDescriptorFromWindowsCoreWindow), \"sizeof mismatch for SurfaceDescriptorFromWindowsCoreWindow\");\n    static_assert(alignof(SurfaceDescriptorFromWindowsCoreWindow) == alignof(WGPUSurfaceDescriptorFromWindowsCoreWindow), \"alignof mismatch for SurfaceDescriptorFromWindowsCoreWindow\");\n\n    static_assert(offsetof(SurfaceDescriptorFromWindowsCoreWindow, coreWindow) == offsetof(WGPUSurfaceDescriptorFromWindowsCoreWindow, coreWindow),\n            \"offsetof mismatch for SurfaceDescriptorFromWindowsCoreWindow::coreWindow\");\n\n    // SurfaceDescriptorFromWindowsHWND\n\n    static_assert(sizeof(SurfaceDescriptorFromWindowsHWND) == sizeof(WGPUSurfaceDescriptorFromWindowsHWND), \"sizeof mismatch for SurfaceDescriptorFromWindowsHWND\");\n    static_assert(alignof(SurfaceDescriptorFromWindowsHWND) == alignof(WGPUSurfaceDescriptorFromWindowsHWND), \"alignof mismatch for SurfaceDescriptorFromWindowsHWND\");\n\n    static_assert(offsetof(SurfaceDescriptorFromWindowsHWND, hinstance) == offsetof(WGPUSurfaceDescriptorFromWindowsHWND, hinstance),\n            \"offsetof mismatch for SurfaceDescriptorFromWindowsHWND::hinstance\");\n    static_assert(offsetof(SurfaceDescriptorFromWindowsHWND, hwnd) == offsetof(WGPUSurfaceDescriptorFromWindowsHWND, hwnd),\n            \"offsetof mismatch for SurfaceDescriptorFromWindowsHWND::hwnd\");\n\n    // SurfaceDescriptorFromWindowsSwapChainPanel\n\n    static_assert(sizeof(SurfaceDescriptorFromWindowsSwapChainPanel) == sizeof(WGPUSurfaceDescriptorFromWindowsSwapChainPanel), \"sizeof mismatch for SurfaceDescriptorFromWindowsSwapChainPanel\");\n    static_assert(alignof(SurfaceDescriptorFromWindowsSwapChainPanel) == alignof(WGPUSurfaceDescriptorFromWindowsSwapChainPanel), \"alignof mismatch for SurfaceDescriptorFromWindowsSwapChainPanel\");\n\n    static_assert(offsetof(SurfaceDescriptorFromWindowsSwapChainPanel, swapChainPanel) == offsetof(WGPUSurfaceDescriptorFromWindowsSwapChainPanel, swapChainPanel),\n            \"offsetof mismatch for SurfaceDescriptorFromWindowsSwapChainPanel::swapChainPanel\");\n\n    // SurfaceDescriptorFromXlibWindow\n\n    static_assert(sizeof(SurfaceDescriptorFromXlibWindow) == sizeof(WGPUSurfaceDescriptorFromXlibWindow), \"sizeof mismatch for SurfaceDescriptorFromXlibWindow\");\n    static_assert(alignof(SurfaceDescriptorFromXlibWindow) == alignof(WGPUSurfaceDescriptorFromXlibWindow), \"alignof mismatch for SurfaceDescriptorFromXlibWindow\");\n\n    static_assert(offsetof(SurfaceDescriptorFromXlibWindow, display) == offsetof(WGPUSurfaceDescriptorFromXlibWindow, display),\n            \"offsetof mismatch for SurfaceDescriptorFromXlibWindow::display\");\n    static_assert(offsetof(SurfaceDescriptorFromXlibWindow, window) == offsetof(WGPUSurfaceDescriptorFromXlibWindow, window),\n            \"offsetof mismatch for SurfaceDescriptorFromXlibWindow::window\");\n\n    // SwapChainDescriptor\n\n    static_assert(sizeof(SwapChainDescriptor) == sizeof(WGPUSwapChainDescriptor), \"sizeof mismatch for SwapChainDescriptor\");\n    static_assert(alignof(SwapChainDescriptor) == alignof(WGPUSwapChainDescriptor), \"alignof mismatch for SwapChainDescriptor\");\n\n    static_assert(offsetof(SwapChainDescriptor, nextInChain) == offsetof(WGPUSwapChainDescriptor, nextInChain),\n            \"offsetof mismatch for SwapChainDescriptor::nextInChain\");\n    static_assert(offsetof(SwapChainDescriptor, label) == offsetof(WGPUSwapChainDescriptor, label),\n            \"offsetof mismatch for SwapChainDescriptor::label\");\n    static_assert(offsetof(SwapChainDescriptor, usage) == offsetof(WGPUSwapChainDescriptor, usage),\n            \"offsetof mismatch for SwapChainDescriptor::usage\");\n    static_assert(offsetof(SwapChainDescriptor, format) == offsetof(WGPUSwapChainDescriptor, format),\n            \"offsetof mismatch for SwapChainDescriptor::format\");\n    static_assert(offsetof(SwapChainDescriptor, width) == offsetof(WGPUSwapChainDescriptor, width),\n            \"offsetof mismatch for SwapChainDescriptor::width\");\n    static_assert(offsetof(SwapChainDescriptor, height) == offsetof(WGPUSwapChainDescriptor, height),\n            \"offsetof mismatch for SwapChainDescriptor::height\");\n    static_assert(offsetof(SwapChainDescriptor, presentMode) == offsetof(WGPUSwapChainDescriptor, presentMode),\n            \"offsetof mismatch for SwapChainDescriptor::presentMode\");\n\n    // TextureBindingLayout\n\n    static_assert(sizeof(TextureBindingLayout) == sizeof(WGPUTextureBindingLayout), \"sizeof mismatch for TextureBindingLayout\");\n    static_assert(alignof(TextureBindingLayout) == alignof(WGPUTextureBindingLayout), \"alignof mismatch for TextureBindingLayout\");\n\n    static_assert(offsetof(TextureBindingLayout, nextInChain) == offsetof(WGPUTextureBindingLayout, nextInChain),\n            \"offsetof mismatch for TextureBindingLayout::nextInChain\");\n    static_assert(offsetof(TextureBindingLayout, sampleType) == offsetof(WGPUTextureBindingLayout, sampleType),\n            \"offsetof mismatch for TextureBindingLayout::sampleType\");\n    static_assert(offsetof(TextureBindingLayout, viewDimension) == offsetof(WGPUTextureBindingLayout, viewDimension),\n            \"offsetof mismatch for TextureBindingLayout::viewDimension\");\n    static_assert(offsetof(TextureBindingLayout, multisampled) == offsetof(WGPUTextureBindingLayout, multisampled),\n            \"offsetof mismatch for TextureBindingLayout::multisampled\");\n\n    // TextureDataLayout\n\n    static_assert(sizeof(TextureDataLayout) == sizeof(WGPUTextureDataLayout), \"sizeof mismatch for TextureDataLayout\");\n    static_assert(alignof(TextureDataLayout) == alignof(WGPUTextureDataLayout), \"alignof mismatch for TextureDataLayout\");\n\n    static_assert(offsetof(TextureDataLayout, nextInChain) == offsetof(WGPUTextureDataLayout, nextInChain),\n            \"offsetof mismatch for TextureDataLayout::nextInChain\");\n    static_assert(offsetof(TextureDataLayout, offset) == offsetof(WGPUTextureDataLayout, offset),\n            \"offsetof mismatch for TextureDataLayout::offset\");\n    static_assert(offsetof(TextureDataLayout, bytesPerRow) == offsetof(WGPUTextureDataLayout, bytesPerRow),\n            \"offsetof mismatch for TextureDataLayout::bytesPerRow\");\n    static_assert(offsetof(TextureDataLayout, rowsPerImage) == offsetof(WGPUTextureDataLayout, rowsPerImage),\n            \"offsetof mismatch for TextureDataLayout::rowsPerImage\");\n\n    // TextureViewDescriptor\n\n    static_assert(sizeof(TextureViewDescriptor) == sizeof(WGPUTextureViewDescriptor), \"sizeof mismatch for TextureViewDescriptor\");\n    static_assert(alignof(TextureViewDescriptor) == alignof(WGPUTextureViewDescriptor), \"alignof mismatch for TextureViewDescriptor\");\n\n    static_assert(offsetof(TextureViewDescriptor, nextInChain) == offsetof(WGPUTextureViewDescriptor, nextInChain),\n            \"offsetof mismatch for TextureViewDescriptor::nextInChain\");\n    static_assert(offsetof(TextureViewDescriptor, label) == offsetof(WGPUTextureViewDescriptor, label),\n            \"offsetof mismatch for TextureViewDescriptor::label\");\n    static_assert(offsetof(TextureViewDescriptor, format) == offsetof(WGPUTextureViewDescriptor, format),\n            \"offsetof mismatch for TextureViewDescriptor::format\");\n    static_assert(offsetof(TextureViewDescriptor, dimension) == offsetof(WGPUTextureViewDescriptor, dimension),\n            \"offsetof mismatch for TextureViewDescriptor::dimension\");\n    static_assert(offsetof(TextureViewDescriptor, baseMipLevel) == offsetof(WGPUTextureViewDescriptor, baseMipLevel),\n            \"offsetof mismatch for TextureViewDescriptor::baseMipLevel\");\n    static_assert(offsetof(TextureViewDescriptor, mipLevelCount) == offsetof(WGPUTextureViewDescriptor, mipLevelCount),\n            \"offsetof mismatch for TextureViewDescriptor::mipLevelCount\");\n    static_assert(offsetof(TextureViewDescriptor, baseArrayLayer) == offsetof(WGPUTextureViewDescriptor, baseArrayLayer),\n            \"offsetof mismatch for TextureViewDescriptor::baseArrayLayer\");\n    static_assert(offsetof(TextureViewDescriptor, arrayLayerCount) == offsetof(WGPUTextureViewDescriptor, arrayLayerCount),\n            \"offsetof mismatch for TextureViewDescriptor::arrayLayerCount\");\n    static_assert(offsetof(TextureViewDescriptor, aspect) == offsetof(WGPUTextureViewDescriptor, aspect),\n            \"offsetof mismatch for TextureViewDescriptor::aspect\");\n\n    // VertexAttribute\n\n    static_assert(sizeof(VertexAttribute) == sizeof(WGPUVertexAttribute), \"sizeof mismatch for VertexAttribute\");\n    static_assert(alignof(VertexAttribute) == alignof(WGPUVertexAttribute), \"alignof mismatch for VertexAttribute\");\n\n    static_assert(offsetof(VertexAttribute, format) == offsetof(WGPUVertexAttribute, format),\n            \"offsetof mismatch for VertexAttribute::format\");\n    static_assert(offsetof(VertexAttribute, offset) == offsetof(WGPUVertexAttribute, offset),\n            \"offsetof mismatch for VertexAttribute::offset\");\n    static_assert(offsetof(VertexAttribute, shaderLocation) == offsetof(WGPUVertexAttribute, shaderLocation),\n            \"offsetof mismatch for VertexAttribute::shaderLocation\");\n\n    // BindGroupDescriptor\n\n    static_assert(sizeof(BindGroupDescriptor) == sizeof(WGPUBindGroupDescriptor), \"sizeof mismatch for BindGroupDescriptor\");\n    static_assert(alignof(BindGroupDescriptor) == alignof(WGPUBindGroupDescriptor), \"alignof mismatch for BindGroupDescriptor\");\n\n    static_assert(offsetof(BindGroupDescriptor, nextInChain) == offsetof(WGPUBindGroupDescriptor, nextInChain),\n            \"offsetof mismatch for BindGroupDescriptor::nextInChain\");\n    static_assert(offsetof(BindGroupDescriptor, label) == offsetof(WGPUBindGroupDescriptor, label),\n            \"offsetof mismatch for BindGroupDescriptor::label\");\n    static_assert(offsetof(BindGroupDescriptor, layout) == offsetof(WGPUBindGroupDescriptor, layout),\n            \"offsetof mismatch for BindGroupDescriptor::layout\");\n    static_assert(offsetof(BindGroupDescriptor, entryCount) == offsetof(WGPUBindGroupDescriptor, entryCount),\n            \"offsetof mismatch for BindGroupDescriptor::entryCount\");\n    static_assert(offsetof(BindGroupDescriptor, entries) == offsetof(WGPUBindGroupDescriptor, entries),\n            \"offsetof mismatch for BindGroupDescriptor::entries\");\n\n    // BindGroupLayoutEntry\n\n    static_assert(sizeof(BindGroupLayoutEntry) == sizeof(WGPUBindGroupLayoutEntry), \"sizeof mismatch for BindGroupLayoutEntry\");\n    static_assert(alignof(BindGroupLayoutEntry) == alignof(WGPUBindGroupLayoutEntry), \"alignof mismatch for BindGroupLayoutEntry\");\n\n    static_assert(offsetof(BindGroupLayoutEntry, nextInChain) == offsetof(WGPUBindGroupLayoutEntry, nextInChain),\n            \"offsetof mismatch for BindGroupLayoutEntry::nextInChain\");\n    static_assert(offsetof(BindGroupLayoutEntry, binding) == offsetof(WGPUBindGroupLayoutEntry, binding),\n            \"offsetof mismatch for BindGroupLayoutEntry::binding\");\n    static_assert(offsetof(BindGroupLayoutEntry, visibility) == offsetof(WGPUBindGroupLayoutEntry, visibility),\n            \"offsetof mismatch for BindGroupLayoutEntry::visibility\");\n    static_assert(offsetof(BindGroupLayoutEntry, buffer) == offsetof(WGPUBindGroupLayoutEntry, buffer),\n            \"offsetof mismatch for BindGroupLayoutEntry::buffer\");\n    static_assert(offsetof(BindGroupLayoutEntry, sampler) == offsetof(WGPUBindGroupLayoutEntry, sampler),\n            \"offsetof mismatch for BindGroupLayoutEntry::sampler\");\n    static_assert(offsetof(BindGroupLayoutEntry, texture) == offsetof(WGPUBindGroupLayoutEntry, texture),\n            \"offsetof mismatch for BindGroupLayoutEntry::texture\");\n    static_assert(offsetof(BindGroupLayoutEntry, storageTexture) == offsetof(WGPUBindGroupLayoutEntry, storageTexture),\n            \"offsetof mismatch for BindGroupLayoutEntry::storageTexture\");\n\n    // BlendState\n\n    static_assert(sizeof(BlendState) == sizeof(WGPUBlendState), \"sizeof mismatch for BlendState\");\n    static_assert(alignof(BlendState) == alignof(WGPUBlendState), \"alignof mismatch for BlendState\");\n\n    static_assert(offsetof(BlendState, color) == offsetof(WGPUBlendState, color),\n            \"offsetof mismatch for BlendState::color\");\n    static_assert(offsetof(BlendState, alpha) == offsetof(WGPUBlendState, alpha),\n            \"offsetof mismatch for BlendState::alpha\");\n\n    // CompilationInfo\n\n    static_assert(sizeof(CompilationInfo) == sizeof(WGPUCompilationInfo), \"sizeof mismatch for CompilationInfo\");\n    static_assert(alignof(CompilationInfo) == alignof(WGPUCompilationInfo), \"alignof mismatch for CompilationInfo\");\n\n    static_assert(offsetof(CompilationInfo, nextInChain) == offsetof(WGPUCompilationInfo, nextInChain),\n            \"offsetof mismatch for CompilationInfo::nextInChain\");\n    static_assert(offsetof(CompilationInfo, messageCount) == offsetof(WGPUCompilationInfo, messageCount),\n            \"offsetof mismatch for CompilationInfo::messageCount\");\n    static_assert(offsetof(CompilationInfo, messages) == offsetof(WGPUCompilationInfo, messages),\n            \"offsetof mismatch for CompilationInfo::messages\");\n\n    // ComputePassDescriptor\n\n    static_assert(sizeof(ComputePassDescriptor) == sizeof(WGPUComputePassDescriptor), \"sizeof mismatch for ComputePassDescriptor\");\n    static_assert(alignof(ComputePassDescriptor) == alignof(WGPUComputePassDescriptor), \"alignof mismatch for ComputePassDescriptor\");\n\n    static_assert(offsetof(ComputePassDescriptor, nextInChain) == offsetof(WGPUComputePassDescriptor, nextInChain),\n            \"offsetof mismatch for ComputePassDescriptor::nextInChain\");\n    static_assert(offsetof(ComputePassDescriptor, label) == offsetof(WGPUComputePassDescriptor, label),\n            \"offsetof mismatch for ComputePassDescriptor::label\");\n    static_assert(offsetof(ComputePassDescriptor, timestampWriteCount) == offsetof(WGPUComputePassDescriptor, timestampWriteCount),\n            \"offsetof mismatch for ComputePassDescriptor::timestampWriteCount\");\n    static_assert(offsetof(ComputePassDescriptor, timestampWrites) == offsetof(WGPUComputePassDescriptor, timestampWrites),\n            \"offsetof mismatch for ComputePassDescriptor::timestampWrites\");\n\n    // DepthStencilState\n\n    static_assert(sizeof(DepthStencilState) == sizeof(WGPUDepthStencilState), \"sizeof mismatch for DepthStencilState\");\n    static_assert(alignof(DepthStencilState) == alignof(WGPUDepthStencilState), \"alignof mismatch for DepthStencilState\");\n\n    static_assert(offsetof(DepthStencilState, nextInChain) == offsetof(WGPUDepthStencilState, nextInChain),\n            \"offsetof mismatch for DepthStencilState::nextInChain\");\n    static_assert(offsetof(DepthStencilState, format) == offsetof(WGPUDepthStencilState, format),\n            \"offsetof mismatch for DepthStencilState::format\");\n    static_assert(offsetof(DepthStencilState, depthWriteEnabled) == offsetof(WGPUDepthStencilState, depthWriteEnabled),\n            \"offsetof mismatch for DepthStencilState::depthWriteEnabled\");\n    static_assert(offsetof(DepthStencilState, depthCompare) == offsetof(WGPUDepthStencilState, depthCompare),\n            \"offsetof mismatch for DepthStencilState::depthCompare\");\n    static_assert(offsetof(DepthStencilState, stencilFront) == offsetof(WGPUDepthStencilState, stencilFront),\n            \"offsetof mismatch for DepthStencilState::stencilFront\");\n    static_assert(offsetof(DepthStencilState, stencilBack) == offsetof(WGPUDepthStencilState, stencilBack),\n            \"offsetof mismatch for DepthStencilState::stencilBack\");\n    static_assert(offsetof(DepthStencilState, stencilReadMask) == offsetof(WGPUDepthStencilState, stencilReadMask),\n            \"offsetof mismatch for DepthStencilState::stencilReadMask\");\n    static_assert(offsetof(DepthStencilState, stencilWriteMask) == offsetof(WGPUDepthStencilState, stencilWriteMask),\n            \"offsetof mismatch for DepthStencilState::stencilWriteMask\");\n    static_assert(offsetof(DepthStencilState, depthBias) == offsetof(WGPUDepthStencilState, depthBias),\n            \"offsetof mismatch for DepthStencilState::depthBias\");\n    static_assert(offsetof(DepthStencilState, depthBiasSlopeScale) == offsetof(WGPUDepthStencilState, depthBiasSlopeScale),\n            \"offsetof mismatch for DepthStencilState::depthBiasSlopeScale\");\n    static_assert(offsetof(DepthStencilState, depthBiasClamp) == offsetof(WGPUDepthStencilState, depthBiasClamp),\n            \"offsetof mismatch for DepthStencilState::depthBiasClamp\");\n\n    // ExternalTextureDescriptor\n\n    static_assert(sizeof(ExternalTextureDescriptor) == sizeof(WGPUExternalTextureDescriptor), \"sizeof mismatch for ExternalTextureDescriptor\");\n    static_assert(alignof(ExternalTextureDescriptor) == alignof(WGPUExternalTextureDescriptor), \"alignof mismatch for ExternalTextureDescriptor\");\n\n    static_assert(offsetof(ExternalTextureDescriptor, nextInChain) == offsetof(WGPUExternalTextureDescriptor, nextInChain),\n            \"offsetof mismatch for ExternalTextureDescriptor::nextInChain\");\n    static_assert(offsetof(ExternalTextureDescriptor, label) == offsetof(WGPUExternalTextureDescriptor, label),\n            \"offsetof mismatch for ExternalTextureDescriptor::label\");\n    static_assert(offsetof(ExternalTextureDescriptor, plane0) == offsetof(WGPUExternalTextureDescriptor, plane0),\n            \"offsetof mismatch for ExternalTextureDescriptor::plane0\");\n    static_assert(offsetof(ExternalTextureDescriptor, plane1) == offsetof(WGPUExternalTextureDescriptor, plane1),\n            \"offsetof mismatch for ExternalTextureDescriptor::plane1\");\n    static_assert(offsetof(ExternalTextureDescriptor, visibleOrigin) == offsetof(WGPUExternalTextureDescriptor, visibleOrigin),\n            \"offsetof mismatch for ExternalTextureDescriptor::visibleOrigin\");\n    static_assert(offsetof(ExternalTextureDescriptor, visibleSize) == offsetof(WGPUExternalTextureDescriptor, visibleSize),\n            \"offsetof mismatch for ExternalTextureDescriptor::visibleSize\");\n    static_assert(offsetof(ExternalTextureDescriptor, doYuvToRgbConversionOnly) == offsetof(WGPUExternalTextureDescriptor, doYuvToRgbConversionOnly),\n            \"offsetof mismatch for ExternalTextureDescriptor::doYuvToRgbConversionOnly\");\n    static_assert(offsetof(ExternalTextureDescriptor, yuvToRgbConversionMatrix) == offsetof(WGPUExternalTextureDescriptor, yuvToRgbConversionMatrix),\n            \"offsetof mismatch for ExternalTextureDescriptor::yuvToRgbConversionMatrix\");\n    static_assert(offsetof(ExternalTextureDescriptor, srcTransferFunctionParameters) == offsetof(WGPUExternalTextureDescriptor, srcTransferFunctionParameters),\n            \"offsetof mismatch for ExternalTextureDescriptor::srcTransferFunctionParameters\");\n    static_assert(offsetof(ExternalTextureDescriptor, dstTransferFunctionParameters) == offsetof(WGPUExternalTextureDescriptor, dstTransferFunctionParameters),\n            \"offsetof mismatch for ExternalTextureDescriptor::dstTransferFunctionParameters\");\n    static_assert(offsetof(ExternalTextureDescriptor, gamutConversionMatrix) == offsetof(WGPUExternalTextureDescriptor, gamutConversionMatrix),\n            \"offsetof mismatch for ExternalTextureDescriptor::gamutConversionMatrix\");\n    static_assert(offsetof(ExternalTextureDescriptor, flipY) == offsetof(WGPUExternalTextureDescriptor, flipY),\n            \"offsetof mismatch for ExternalTextureDescriptor::flipY\");\n    static_assert(offsetof(ExternalTextureDescriptor, rotation) == offsetof(WGPUExternalTextureDescriptor, rotation),\n            \"offsetof mismatch for ExternalTextureDescriptor::rotation\");\n\n    // ImageCopyBuffer\n\n    static_assert(sizeof(ImageCopyBuffer) == sizeof(WGPUImageCopyBuffer), \"sizeof mismatch for ImageCopyBuffer\");\n    static_assert(alignof(ImageCopyBuffer) == alignof(WGPUImageCopyBuffer), \"alignof mismatch for ImageCopyBuffer\");\n\n    static_assert(offsetof(ImageCopyBuffer, nextInChain) == offsetof(WGPUImageCopyBuffer, nextInChain),\n            \"offsetof mismatch for ImageCopyBuffer::nextInChain\");\n    static_assert(offsetof(ImageCopyBuffer, layout) == offsetof(WGPUImageCopyBuffer, layout),\n            \"offsetof mismatch for ImageCopyBuffer::layout\");\n    static_assert(offsetof(ImageCopyBuffer, buffer) == offsetof(WGPUImageCopyBuffer, buffer),\n            \"offsetof mismatch for ImageCopyBuffer::buffer\");\n\n    // ImageCopyExternalTexture\n\n    static_assert(sizeof(ImageCopyExternalTexture) == sizeof(WGPUImageCopyExternalTexture), \"sizeof mismatch for ImageCopyExternalTexture\");\n    static_assert(alignof(ImageCopyExternalTexture) == alignof(WGPUImageCopyExternalTexture), \"alignof mismatch for ImageCopyExternalTexture\");\n\n    static_assert(offsetof(ImageCopyExternalTexture, nextInChain) == offsetof(WGPUImageCopyExternalTexture, nextInChain),\n            \"offsetof mismatch for ImageCopyExternalTexture::nextInChain\");\n    static_assert(offsetof(ImageCopyExternalTexture, externalTexture) == offsetof(WGPUImageCopyExternalTexture, externalTexture),\n            \"offsetof mismatch for ImageCopyExternalTexture::externalTexture\");\n    static_assert(offsetof(ImageCopyExternalTexture, origin) == offsetof(WGPUImageCopyExternalTexture, origin),\n            \"offsetof mismatch for ImageCopyExternalTexture::origin\");\n    static_assert(offsetof(ImageCopyExternalTexture, naturalSize) == offsetof(WGPUImageCopyExternalTexture, naturalSize),\n            \"offsetof mismatch for ImageCopyExternalTexture::naturalSize\");\n\n    // ImageCopyTexture\n\n    static_assert(sizeof(ImageCopyTexture) == sizeof(WGPUImageCopyTexture), \"sizeof mismatch for ImageCopyTexture\");\n    static_assert(alignof(ImageCopyTexture) == alignof(WGPUImageCopyTexture), \"alignof mismatch for ImageCopyTexture\");\n\n    static_assert(offsetof(ImageCopyTexture, nextInChain) == offsetof(WGPUImageCopyTexture, nextInChain),\n            \"offsetof mismatch for ImageCopyTexture::nextInChain\");\n    static_assert(offsetof(ImageCopyTexture, texture) == offsetof(WGPUImageCopyTexture, texture),\n            \"offsetof mismatch for ImageCopyTexture::texture\");\n    static_assert(offsetof(ImageCopyTexture, mipLevel) == offsetof(WGPUImageCopyTexture, mipLevel),\n            \"offsetof mismatch for ImageCopyTexture::mipLevel\");\n    static_assert(offsetof(ImageCopyTexture, origin) == offsetof(WGPUImageCopyTexture, origin),\n            \"offsetof mismatch for ImageCopyTexture::origin\");\n    static_assert(offsetof(ImageCopyTexture, aspect) == offsetof(WGPUImageCopyTexture, aspect),\n            \"offsetof mismatch for ImageCopyTexture::aspect\");\n\n    // ProgrammableStageDescriptor\n\n    static_assert(sizeof(ProgrammableStageDescriptor) == sizeof(WGPUProgrammableStageDescriptor), \"sizeof mismatch for ProgrammableStageDescriptor\");\n    static_assert(alignof(ProgrammableStageDescriptor) == alignof(WGPUProgrammableStageDescriptor), \"alignof mismatch for ProgrammableStageDescriptor\");\n\n    static_assert(offsetof(ProgrammableStageDescriptor, nextInChain) == offsetof(WGPUProgrammableStageDescriptor, nextInChain),\n            \"offsetof mismatch for ProgrammableStageDescriptor::nextInChain\");\n    static_assert(offsetof(ProgrammableStageDescriptor, module) == offsetof(WGPUProgrammableStageDescriptor, module),\n            \"offsetof mismatch for ProgrammableStageDescriptor::module\");\n    static_assert(offsetof(ProgrammableStageDescriptor, entryPoint) == offsetof(WGPUProgrammableStageDescriptor, entryPoint),\n            \"offsetof mismatch for ProgrammableStageDescriptor::entryPoint\");\n    static_assert(offsetof(ProgrammableStageDescriptor, constantCount) == offsetof(WGPUProgrammableStageDescriptor, constantCount),\n            \"offsetof mismatch for ProgrammableStageDescriptor::constantCount\");\n    static_assert(offsetof(ProgrammableStageDescriptor, constants) == offsetof(WGPUProgrammableStageDescriptor, constants),\n            \"offsetof mismatch for ProgrammableStageDescriptor::constants\");\n\n    // RenderPassColorAttachment\n\n    static_assert(sizeof(RenderPassColorAttachment) == sizeof(WGPURenderPassColorAttachment), \"sizeof mismatch for RenderPassColorAttachment\");\n    static_assert(alignof(RenderPassColorAttachment) == alignof(WGPURenderPassColorAttachment), \"alignof mismatch for RenderPassColorAttachment\");\n\n    static_assert(offsetof(RenderPassColorAttachment, nextInChain) == offsetof(WGPURenderPassColorAttachment, nextInChain),\n            \"offsetof mismatch for RenderPassColorAttachment::nextInChain\");\n    static_assert(offsetof(RenderPassColorAttachment, view) == offsetof(WGPURenderPassColorAttachment, view),\n            \"offsetof mismatch for RenderPassColorAttachment::view\");\n    static_assert(offsetof(RenderPassColorAttachment, resolveTarget) == offsetof(WGPURenderPassColorAttachment, resolveTarget),\n            \"offsetof mismatch for RenderPassColorAttachment::resolveTarget\");\n    static_assert(offsetof(RenderPassColorAttachment, loadOp) == offsetof(WGPURenderPassColorAttachment, loadOp),\n            \"offsetof mismatch for RenderPassColorAttachment::loadOp\");\n    static_assert(offsetof(RenderPassColorAttachment, storeOp) == offsetof(WGPURenderPassColorAttachment, storeOp),\n            \"offsetof mismatch for RenderPassColorAttachment::storeOp\");\n    static_assert(offsetof(RenderPassColorAttachment, clearValue) == offsetof(WGPURenderPassColorAttachment, clearValue),\n            \"offsetof mismatch for RenderPassColorAttachment::clearValue\");\n\n    // RequiredLimits\n\n    static_assert(sizeof(RequiredLimits) == sizeof(WGPURequiredLimits), \"sizeof mismatch for RequiredLimits\");\n    static_assert(alignof(RequiredLimits) == alignof(WGPURequiredLimits), \"alignof mismatch for RequiredLimits\");\n\n    static_assert(offsetof(RequiredLimits, nextInChain) == offsetof(WGPURequiredLimits, nextInChain),\n            \"offsetof mismatch for RequiredLimits::nextInChain\");\n    static_assert(offsetof(RequiredLimits, limits) == offsetof(WGPURequiredLimits, limits),\n            \"offsetof mismatch for RequiredLimits::limits\");\n\n    // SharedTextureMemoryProperties\n\n    static_assert(sizeof(SharedTextureMemoryProperties) == sizeof(WGPUSharedTextureMemoryProperties), \"sizeof mismatch for SharedTextureMemoryProperties\");\n    static_assert(alignof(SharedTextureMemoryProperties) == alignof(WGPUSharedTextureMemoryProperties), \"alignof mismatch for SharedTextureMemoryProperties\");\n\n    static_assert(offsetof(SharedTextureMemoryProperties, nextInChain) == offsetof(WGPUSharedTextureMemoryProperties, nextInChain),\n            \"offsetof mismatch for SharedTextureMemoryProperties::nextInChain\");\n    static_assert(offsetof(SharedTextureMemoryProperties, usage) == offsetof(WGPUSharedTextureMemoryProperties, usage),\n            \"offsetof mismatch for SharedTextureMemoryProperties::usage\");\n    static_assert(offsetof(SharedTextureMemoryProperties, size) == offsetof(WGPUSharedTextureMemoryProperties, size),\n            \"offsetof mismatch for SharedTextureMemoryProperties::size\");\n    static_assert(offsetof(SharedTextureMemoryProperties, format) == offsetof(WGPUSharedTextureMemoryProperties, format),\n            \"offsetof mismatch for SharedTextureMemoryProperties::format\");\n\n    // SharedTextureMemoryVkImageDescriptor\n\n    static_assert(sizeof(SharedTextureMemoryVkImageDescriptor) == sizeof(WGPUSharedTextureMemoryVkImageDescriptor), \"sizeof mismatch for SharedTextureMemoryVkImageDescriptor\");\n    static_assert(alignof(SharedTextureMemoryVkImageDescriptor) == alignof(WGPUSharedTextureMemoryVkImageDescriptor), \"alignof mismatch for SharedTextureMemoryVkImageDescriptor\");\n\n    static_assert(offsetof(SharedTextureMemoryVkImageDescriptor, vkFormat) == offsetof(WGPUSharedTextureMemoryVkImageDescriptor, vkFormat),\n            \"offsetof mismatch for SharedTextureMemoryVkImageDescriptor::vkFormat\");\n    static_assert(offsetof(SharedTextureMemoryVkImageDescriptor, vkUsageFlags) == offsetof(WGPUSharedTextureMemoryVkImageDescriptor, vkUsageFlags),\n            \"offsetof mismatch for SharedTextureMemoryVkImageDescriptor::vkUsageFlags\");\n    static_assert(offsetof(SharedTextureMemoryVkImageDescriptor, vkExtent3D) == offsetof(WGPUSharedTextureMemoryVkImageDescriptor, vkExtent3D),\n            \"offsetof mismatch for SharedTextureMemoryVkImageDescriptor::vkExtent3D\");\n\n    // SupportedLimits\n\n    static_assert(sizeof(SupportedLimits) == sizeof(WGPUSupportedLimits), \"sizeof mismatch for SupportedLimits\");\n    static_assert(alignof(SupportedLimits) == alignof(WGPUSupportedLimits), \"alignof mismatch for SupportedLimits\");\n\n    static_assert(offsetof(SupportedLimits, nextInChain) == offsetof(WGPUSupportedLimits, nextInChain),\n            \"offsetof mismatch for SupportedLimits::nextInChain\");\n    static_assert(offsetof(SupportedLimits, limits) == offsetof(WGPUSupportedLimits, limits),\n            \"offsetof mismatch for SupportedLimits::limits\");\n\n    // TextureDescriptor\n\n    static_assert(sizeof(TextureDescriptor) == sizeof(WGPUTextureDescriptor), \"sizeof mismatch for TextureDescriptor\");\n    static_assert(alignof(TextureDescriptor) == alignof(WGPUTextureDescriptor), \"alignof mismatch for TextureDescriptor\");\n\n    static_assert(offsetof(TextureDescriptor, nextInChain) == offsetof(WGPUTextureDescriptor, nextInChain),\n            \"offsetof mismatch for TextureDescriptor::nextInChain\");\n    static_assert(offsetof(TextureDescriptor, label) == offsetof(WGPUTextureDescriptor, label),\n            \"offsetof mismatch for TextureDescriptor::label\");\n    static_assert(offsetof(TextureDescriptor, usage) == offsetof(WGPUTextureDescriptor, usage),\n            \"offsetof mismatch for TextureDescriptor::usage\");\n    static_assert(offsetof(TextureDescriptor, dimension) == offsetof(WGPUTextureDescriptor, dimension),\n            \"offsetof mismatch for TextureDescriptor::dimension\");\n    static_assert(offsetof(TextureDescriptor, size) == offsetof(WGPUTextureDescriptor, size),\n            \"offsetof mismatch for TextureDescriptor::size\");\n    static_assert(offsetof(TextureDescriptor, format) == offsetof(WGPUTextureDescriptor, format),\n            \"offsetof mismatch for TextureDescriptor::format\");\n    static_assert(offsetof(TextureDescriptor, mipLevelCount) == offsetof(WGPUTextureDescriptor, mipLevelCount),\n            \"offsetof mismatch for TextureDescriptor::mipLevelCount\");\n    static_assert(offsetof(TextureDescriptor, sampleCount) == offsetof(WGPUTextureDescriptor, sampleCount),\n            \"offsetof mismatch for TextureDescriptor::sampleCount\");\n    static_assert(offsetof(TextureDescriptor, viewFormatCount) == offsetof(WGPUTextureDescriptor, viewFormatCount),\n            \"offsetof mismatch for TextureDescriptor::viewFormatCount\");\n    static_assert(offsetof(TextureDescriptor, viewFormats) == offsetof(WGPUTextureDescriptor, viewFormats),\n            \"offsetof mismatch for TextureDescriptor::viewFormats\");\n\n    // VertexBufferLayout\n\n    static_assert(sizeof(VertexBufferLayout) == sizeof(WGPUVertexBufferLayout), \"sizeof mismatch for VertexBufferLayout\");\n    static_assert(alignof(VertexBufferLayout) == alignof(WGPUVertexBufferLayout), \"alignof mismatch for VertexBufferLayout\");\n\n    static_assert(offsetof(VertexBufferLayout, arrayStride) == offsetof(WGPUVertexBufferLayout, arrayStride),\n            \"offsetof mismatch for VertexBufferLayout::arrayStride\");\n    static_assert(offsetof(VertexBufferLayout, stepMode) == offsetof(WGPUVertexBufferLayout, stepMode),\n            \"offsetof mismatch for VertexBufferLayout::stepMode\");\n    static_assert(offsetof(VertexBufferLayout, attributeCount) == offsetof(WGPUVertexBufferLayout, attributeCount),\n            \"offsetof mismatch for VertexBufferLayout::attributeCount\");\n    static_assert(offsetof(VertexBufferLayout, attributes) == offsetof(WGPUVertexBufferLayout, attributes),\n            \"offsetof mismatch for VertexBufferLayout::attributes\");\n\n    // BindGroupLayoutDescriptor\n\n    static_assert(sizeof(BindGroupLayoutDescriptor) == sizeof(WGPUBindGroupLayoutDescriptor), \"sizeof mismatch for BindGroupLayoutDescriptor\");\n    static_assert(alignof(BindGroupLayoutDescriptor) == alignof(WGPUBindGroupLayoutDescriptor), \"alignof mismatch for BindGroupLayoutDescriptor\");\n\n    static_assert(offsetof(BindGroupLayoutDescriptor, nextInChain) == offsetof(WGPUBindGroupLayoutDescriptor, nextInChain),\n            \"offsetof mismatch for BindGroupLayoutDescriptor::nextInChain\");\n    static_assert(offsetof(BindGroupLayoutDescriptor, label) == offsetof(WGPUBindGroupLayoutDescriptor, label),\n            \"offsetof mismatch for BindGroupLayoutDescriptor::label\");\n    static_assert(offsetof(BindGroupLayoutDescriptor, entryCount) == offsetof(WGPUBindGroupLayoutDescriptor, entryCount),\n            \"offsetof mismatch for BindGroupLayoutDescriptor::entryCount\");\n    static_assert(offsetof(BindGroupLayoutDescriptor, entries) == offsetof(WGPUBindGroupLayoutDescriptor, entries),\n            \"offsetof mismatch for BindGroupLayoutDescriptor::entries\");\n\n    // ColorTargetState\n\n    static_assert(sizeof(ColorTargetState) == sizeof(WGPUColorTargetState), \"sizeof mismatch for ColorTargetState\");\n    static_assert(alignof(ColorTargetState) == alignof(WGPUColorTargetState), \"alignof mismatch for ColorTargetState\");\n\n    static_assert(offsetof(ColorTargetState, nextInChain) == offsetof(WGPUColorTargetState, nextInChain),\n            \"offsetof mismatch for ColorTargetState::nextInChain\");\n    static_assert(offsetof(ColorTargetState, format) == offsetof(WGPUColorTargetState, format),\n            \"offsetof mismatch for ColorTargetState::format\");\n    static_assert(offsetof(ColorTargetState, blend) == offsetof(WGPUColorTargetState, blend),\n            \"offsetof mismatch for ColorTargetState::blend\");\n    static_assert(offsetof(ColorTargetState, writeMask) == offsetof(WGPUColorTargetState, writeMask),\n            \"offsetof mismatch for ColorTargetState::writeMask\");\n\n    // ComputePipelineDescriptor\n\n    static_assert(sizeof(ComputePipelineDescriptor) == sizeof(WGPUComputePipelineDescriptor), \"sizeof mismatch for ComputePipelineDescriptor\");\n    static_assert(alignof(ComputePipelineDescriptor) == alignof(WGPUComputePipelineDescriptor), \"alignof mismatch for ComputePipelineDescriptor\");\n\n    static_assert(offsetof(ComputePipelineDescriptor, nextInChain) == offsetof(WGPUComputePipelineDescriptor, nextInChain),\n            \"offsetof mismatch for ComputePipelineDescriptor::nextInChain\");\n    static_assert(offsetof(ComputePipelineDescriptor, label) == offsetof(WGPUComputePipelineDescriptor, label),\n            \"offsetof mismatch for ComputePipelineDescriptor::label\");\n    static_assert(offsetof(ComputePipelineDescriptor, layout) == offsetof(WGPUComputePipelineDescriptor, layout),\n            \"offsetof mismatch for ComputePipelineDescriptor::layout\");\n    static_assert(offsetof(ComputePipelineDescriptor, compute) == offsetof(WGPUComputePipelineDescriptor, compute),\n            \"offsetof mismatch for ComputePipelineDescriptor::compute\");\n\n    // DeviceDescriptor\n\n    static_assert(sizeof(DeviceDescriptor) == sizeof(WGPUDeviceDescriptor), \"sizeof mismatch for DeviceDescriptor\");\n    static_assert(alignof(DeviceDescriptor) == alignof(WGPUDeviceDescriptor), \"alignof mismatch for DeviceDescriptor\");\n\n    static_assert(offsetof(DeviceDescriptor, nextInChain) == offsetof(WGPUDeviceDescriptor, nextInChain),\n            \"offsetof mismatch for DeviceDescriptor::nextInChain\");\n    static_assert(offsetof(DeviceDescriptor, label) == offsetof(WGPUDeviceDescriptor, label),\n            \"offsetof mismatch for DeviceDescriptor::label\");\n    static_assert(offsetof(DeviceDescriptor, requiredFeaturesCount) == offsetof(WGPUDeviceDescriptor, requiredFeaturesCount),\n            \"offsetof mismatch for DeviceDescriptor::requiredFeaturesCount\");\n    static_assert(offsetof(DeviceDescriptor, requiredFeatures) == offsetof(WGPUDeviceDescriptor, requiredFeatures),\n            \"offsetof mismatch for DeviceDescriptor::requiredFeatures\");\n    static_assert(offsetof(DeviceDescriptor, requiredLimits) == offsetof(WGPUDeviceDescriptor, requiredLimits),\n            \"offsetof mismatch for DeviceDescriptor::requiredLimits\");\n    static_assert(offsetof(DeviceDescriptor, defaultQueue) == offsetof(WGPUDeviceDescriptor, defaultQueue),\n            \"offsetof mismatch for DeviceDescriptor::defaultQueue\");\n    static_assert(offsetof(DeviceDescriptor, deviceLostCallback) == offsetof(WGPUDeviceDescriptor, deviceLostCallback),\n            \"offsetof mismatch for DeviceDescriptor::deviceLostCallback\");\n    static_assert(offsetof(DeviceDescriptor, deviceLostUserdata) == offsetof(WGPUDeviceDescriptor, deviceLostUserdata),\n            \"offsetof mismatch for DeviceDescriptor::deviceLostUserdata\");\n\n    // RenderPassDescriptor\n\n    static_assert(sizeof(RenderPassDescriptor) == sizeof(WGPURenderPassDescriptor), \"sizeof mismatch for RenderPassDescriptor\");\n    static_assert(alignof(RenderPassDescriptor) == alignof(WGPURenderPassDescriptor), \"alignof mismatch for RenderPassDescriptor\");\n\n    static_assert(offsetof(RenderPassDescriptor, nextInChain) == offsetof(WGPURenderPassDescriptor, nextInChain),\n            \"offsetof mismatch for RenderPassDescriptor::nextInChain\");\n    static_assert(offsetof(RenderPassDescriptor, label) == offsetof(WGPURenderPassDescriptor, label),\n            \"offsetof mismatch for RenderPassDescriptor::label\");\n    static_assert(offsetof(RenderPassDescriptor, colorAttachmentCount) == offsetof(WGPURenderPassDescriptor, colorAttachmentCount),\n            \"offsetof mismatch for RenderPassDescriptor::colorAttachmentCount\");\n    static_assert(offsetof(RenderPassDescriptor, colorAttachments) == offsetof(WGPURenderPassDescriptor, colorAttachments),\n            \"offsetof mismatch for RenderPassDescriptor::colorAttachments\");\n    static_assert(offsetof(RenderPassDescriptor, depthStencilAttachment) == offsetof(WGPURenderPassDescriptor, depthStencilAttachment),\n            \"offsetof mismatch for RenderPassDescriptor::depthStencilAttachment\");\n    static_assert(offsetof(RenderPassDescriptor, occlusionQuerySet) == offsetof(WGPURenderPassDescriptor, occlusionQuerySet),\n            \"offsetof mismatch for RenderPassDescriptor::occlusionQuerySet\");\n    static_assert(offsetof(RenderPassDescriptor, timestampWriteCount) == offsetof(WGPURenderPassDescriptor, timestampWriteCount),\n            \"offsetof mismatch for RenderPassDescriptor::timestampWriteCount\");\n    static_assert(offsetof(RenderPassDescriptor, timestampWrites) == offsetof(WGPURenderPassDescriptor, timestampWrites),\n            \"offsetof mismatch for RenderPassDescriptor::timestampWrites\");\n\n    // VertexState\n\n    static_assert(sizeof(VertexState) == sizeof(WGPUVertexState), \"sizeof mismatch for VertexState\");\n    static_assert(alignof(VertexState) == alignof(WGPUVertexState), \"alignof mismatch for VertexState\");\n\n    static_assert(offsetof(VertexState, nextInChain) == offsetof(WGPUVertexState, nextInChain),\n            \"offsetof mismatch for VertexState::nextInChain\");\n    static_assert(offsetof(VertexState, module) == offsetof(WGPUVertexState, module),\n            \"offsetof mismatch for VertexState::module\");\n    static_assert(offsetof(VertexState, entryPoint) == offsetof(WGPUVertexState, entryPoint),\n            \"offsetof mismatch for VertexState::entryPoint\");\n    static_assert(offsetof(VertexState, constantCount) == offsetof(WGPUVertexState, constantCount),\n            \"offsetof mismatch for VertexState::constantCount\");\n    static_assert(offsetof(VertexState, constants) == offsetof(WGPUVertexState, constants),\n            \"offsetof mismatch for VertexState::constants\");\n    static_assert(offsetof(VertexState, bufferCount) == offsetof(WGPUVertexState, bufferCount),\n            \"offsetof mismatch for VertexState::bufferCount\");\n    static_assert(offsetof(VertexState, buffers) == offsetof(WGPUVertexState, buffers),\n            \"offsetof mismatch for VertexState::buffers\");\n\n    // FragmentState\n\n    static_assert(sizeof(FragmentState) == sizeof(WGPUFragmentState), \"sizeof mismatch for FragmentState\");\n    static_assert(alignof(FragmentState) == alignof(WGPUFragmentState), \"alignof mismatch for FragmentState\");\n\n    static_assert(offsetof(FragmentState, nextInChain) == offsetof(WGPUFragmentState, nextInChain),\n            \"offsetof mismatch for FragmentState::nextInChain\");\n    static_assert(offsetof(FragmentState, module) == offsetof(WGPUFragmentState, module),\n            \"offsetof mismatch for FragmentState::module\");\n    static_assert(offsetof(FragmentState, entryPoint) == offsetof(WGPUFragmentState, entryPoint),\n            \"offsetof mismatch for FragmentState::entryPoint\");\n    static_assert(offsetof(FragmentState, constantCount) == offsetof(WGPUFragmentState, constantCount),\n            \"offsetof mismatch for FragmentState::constantCount\");\n    static_assert(offsetof(FragmentState, constants) == offsetof(WGPUFragmentState, constants),\n            \"offsetof mismatch for FragmentState::constants\");\n    static_assert(offsetof(FragmentState, targetCount) == offsetof(WGPUFragmentState, targetCount),\n            \"offsetof mismatch for FragmentState::targetCount\");\n    static_assert(offsetof(FragmentState, targets) == offsetof(WGPUFragmentState, targets),\n            \"offsetof mismatch for FragmentState::targets\");\n\n    // RenderPipelineDescriptor\n\n    static_assert(sizeof(RenderPipelineDescriptor) == sizeof(WGPURenderPipelineDescriptor), \"sizeof mismatch for RenderPipelineDescriptor\");\n    static_assert(alignof(RenderPipelineDescriptor) == alignof(WGPURenderPipelineDescriptor), \"alignof mismatch for RenderPipelineDescriptor\");\n\n    static_assert(offsetof(RenderPipelineDescriptor, nextInChain) == offsetof(WGPURenderPipelineDescriptor, nextInChain),\n            \"offsetof mismatch for RenderPipelineDescriptor::nextInChain\");\n    static_assert(offsetof(RenderPipelineDescriptor, label) == offsetof(WGPURenderPipelineDescriptor, label),\n            \"offsetof mismatch for RenderPipelineDescriptor::label\");\n    static_assert(offsetof(RenderPipelineDescriptor, layout) == offsetof(WGPURenderPipelineDescriptor, layout),\n            \"offsetof mismatch for RenderPipelineDescriptor::layout\");\n    static_assert(offsetof(RenderPipelineDescriptor, vertex) == offsetof(WGPURenderPipelineDescriptor, vertex),\n            \"offsetof mismatch for RenderPipelineDescriptor::vertex\");\n    static_assert(offsetof(RenderPipelineDescriptor, primitive) == offsetof(WGPURenderPipelineDescriptor, primitive),\n            \"offsetof mismatch for RenderPipelineDescriptor::primitive\");\n    static_assert(offsetof(RenderPipelineDescriptor, depthStencil) == offsetof(WGPURenderPipelineDescriptor, depthStencil),\n            \"offsetof mismatch for RenderPipelineDescriptor::depthStencil\");\n    static_assert(offsetof(RenderPipelineDescriptor, multisample) == offsetof(WGPURenderPipelineDescriptor, multisample),\n            \"offsetof mismatch for RenderPipelineDescriptor::multisample\");\n    static_assert(offsetof(RenderPipelineDescriptor, fragment) == offsetof(WGPURenderPipelineDescriptor, fragment),\n            \"offsetof mismatch for RenderPipelineDescriptor::fragment\");\ntemplate <typename T>\n    static T& AsNonConstReference(const T& value) {\n        return const_cast<T&>(value);\n    }\n\n    // AdapterProperties\n    AdapterProperties::~AdapterProperties() {\n        if (this->vendorName != nullptr || this->architecture != nullptr || this->name != nullptr || this->driverDescription != nullptr) {\n            wgpuAdapterPropertiesFreeMembers(\n                *reinterpret_cast<WGPUAdapterProperties*>(this));\n        }\n    }\n\n    static void Reset(AdapterProperties& value) {\n        AdapterProperties defaultValue{};\n        AsNonConstReference(value.vendorID) = defaultValue.vendorID;\n        AsNonConstReference(value.vendorName) = defaultValue.vendorName;\n        AsNonConstReference(value.architecture) = defaultValue.architecture;\n        AsNonConstReference(value.deviceID) = defaultValue.deviceID;\n        AsNonConstReference(value.name) = defaultValue.name;\n        AsNonConstReference(value.driverDescription) = defaultValue.driverDescription;\n        AsNonConstReference(value.adapterType) = defaultValue.adapterType;\n        AsNonConstReference(value.backendType) = defaultValue.backendType;\n        AsNonConstReference(value.compatibilityMode) = defaultValue.compatibilityMode;\n    }\n\n    AdapterProperties::AdapterProperties(AdapterProperties&& rhs)\n    : vendorID(rhs.vendorID),\n      vendorName(rhs.vendorName),\n      architecture(rhs.architecture),\n      deviceID(rhs.deviceID),\n      name(rhs.name),\n      driverDescription(rhs.driverDescription),\n      adapterType(rhs.adapterType),\n      backendType(rhs.backendType),\n      compatibilityMode(rhs.compatibilityMode){\n        Reset(rhs);\n    }\n\n    AdapterProperties& AdapterProperties::operator=(AdapterProperties&& rhs) {\n        if (&rhs == this) {\n            return *this;\n        }\n        this->~AdapterProperties();\n        AsNonConstReference(this->vendorID) = std::move(rhs.vendorID);\n        AsNonConstReference(this->vendorName) = std::move(rhs.vendorName);\n        AsNonConstReference(this->architecture) = std::move(rhs.architecture);\n        AsNonConstReference(this->deviceID) = std::move(rhs.deviceID);\n        AsNonConstReference(this->name) = std::move(rhs.name);\n        AsNonConstReference(this->driverDescription) = std::move(rhs.driverDescription);\n        AsNonConstReference(this->adapterType) = std::move(rhs.adapterType);\n        AsNonConstReference(this->backendType) = std::move(rhs.backendType);\n        AsNonConstReference(this->compatibilityMode) = std::move(rhs.compatibilityMode);\n        Reset(rhs);\n        return *this;\n    }\n\n    // SharedTextureMemoryEndAccessState\n    SharedTextureMemoryEndAccessState::~SharedTextureMemoryEndAccessState() {\n        if (this->fences != nullptr || this->signaledValues != nullptr) {\n            wgpuSharedTextureMemoryEndAccessStateFreeMembers(\n                *reinterpret_cast<WGPUSharedTextureMemoryEndAccessState*>(this));\n        }\n    }\n\n    static void Reset(SharedTextureMemoryEndAccessState& value) {\n        SharedTextureMemoryEndAccessState defaultValue{};\n        AsNonConstReference(value.initialized) = defaultValue.initialized;\n        AsNonConstReference(value.fenceCount) = defaultValue.fenceCount;\n        AsNonConstReference(value.fences) = defaultValue.fences;\n        AsNonConstReference(value.signaledValues) = defaultValue.signaledValues;\n    }\n\n    SharedTextureMemoryEndAccessState::SharedTextureMemoryEndAccessState(SharedTextureMemoryEndAccessState&& rhs)\n    : initialized(rhs.initialized),\n      fenceCount(rhs.fenceCount),\n      fences(rhs.fences),\n      signaledValues(rhs.signaledValues){\n        Reset(rhs);\n    }\n\n    SharedTextureMemoryEndAccessState& SharedTextureMemoryEndAccessState::operator=(SharedTextureMemoryEndAccessState&& rhs) {\n        if (&rhs == this) {\n            return *this;\n        }\n        this->~SharedTextureMemoryEndAccessState();\n        AsNonConstReference(this->initialized) = std::move(rhs.initialized);\n        AsNonConstReference(this->fenceCount) = std::move(rhs.fenceCount);\n        AsNonConstReference(this->fences) = std::move(rhs.fences);\n        AsNonConstReference(this->signaledValues) = std::move(rhs.signaledValues);\n        Reset(rhs);\n        return *this;\n    }\n\n\n\n    // Adapter\n\n    static_assert(sizeof(Adapter) == sizeof(WGPUAdapter), \"sizeof mismatch for Adapter\");\n    static_assert(alignof(Adapter) == alignof(WGPUAdapter), \"alignof mismatch for Adapter\");\n\n    Device Adapter::CreateDevice(DeviceDescriptor const * descriptor) const {\n        auto result = wgpuAdapterCreateDevice(Get(), reinterpret_cast<WGPUDeviceDescriptor const * >(descriptor));\n        return Device::Acquire(result);\n    }\n    size_t Adapter::EnumerateFeatures(FeatureName * features) const {\n        auto result = wgpuAdapterEnumerateFeatures(Get(), reinterpret_cast<WGPUFeatureName * >(features));\n        return result;\n    }\n    Instance Adapter::GetInstance() const {\n        auto result = wgpuAdapterGetInstance(Get());\n        return Instance::Acquire(result);\n    }\n    Bool Adapter::GetLimits(SupportedLimits * limits) const {\n        auto result = wgpuAdapterGetLimits(Get(), reinterpret_cast<WGPUSupportedLimits * >(limits));\n        return result;\n    }\n    void Adapter::GetProperties(AdapterProperties * properties) const {\n        *properties = AdapterProperties();\n        wgpuAdapterGetProperties(Get(), reinterpret_cast<WGPUAdapterProperties * >(properties));\n    }\n    Bool Adapter::HasFeature(FeatureName feature) const {\n        auto result = wgpuAdapterHasFeature(Get(), static_cast<WGPUFeatureName>(feature));\n        return result;\n    }\n    void Adapter::RequestDevice(DeviceDescriptor const * descriptor, RequestDeviceCallback callback, void * userdata) const {\n        wgpuAdapterRequestDevice(Get(), reinterpret_cast<WGPUDeviceDescriptor const * >(descriptor), callback, userdata);\n    }\n    void Adapter::WGPUReference(WGPUAdapter handle) {\n        if (handle != nullptr) {\n            wgpuAdapterReference(handle);\n        }\n    }\n    void Adapter::WGPURelease(WGPUAdapter handle) {\n        if (handle != nullptr) {\n            wgpuAdapterRelease(handle);\n        }\n    }\n\n    // BindGroup\n\n    static_assert(sizeof(BindGroup) == sizeof(WGPUBindGroup), \"sizeof mismatch for BindGroup\");\n    static_assert(alignof(BindGroup) == alignof(WGPUBindGroup), \"alignof mismatch for BindGroup\");\n\n    void BindGroup::SetLabel(char const * label) const {\n        wgpuBindGroupSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void BindGroup::WGPUReference(WGPUBindGroup handle) {\n        if (handle != nullptr) {\n            wgpuBindGroupReference(handle);\n        }\n    }\n    void BindGroup::WGPURelease(WGPUBindGroup handle) {\n        if (handle != nullptr) {\n            wgpuBindGroupRelease(handle);\n        }\n    }\n\n    // BindGroupLayout\n\n    static_assert(sizeof(BindGroupLayout) == sizeof(WGPUBindGroupLayout), \"sizeof mismatch for BindGroupLayout\");\n    static_assert(alignof(BindGroupLayout) == alignof(WGPUBindGroupLayout), \"alignof mismatch for BindGroupLayout\");\n\n    void BindGroupLayout::SetLabel(char const * label) const {\n        wgpuBindGroupLayoutSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void BindGroupLayout::WGPUReference(WGPUBindGroupLayout handle) {\n        if (handle != nullptr) {\n            wgpuBindGroupLayoutReference(handle);\n        }\n    }\n    void BindGroupLayout::WGPURelease(WGPUBindGroupLayout handle) {\n        if (handle != nullptr) {\n            wgpuBindGroupLayoutRelease(handle);\n        }\n    }\n\n    // Buffer\n\n    static_assert(sizeof(Buffer) == sizeof(WGPUBuffer), \"sizeof mismatch for Buffer\");\n    static_assert(alignof(Buffer) == alignof(WGPUBuffer), \"alignof mismatch for Buffer\");\n\n    void Buffer::Destroy() const {\n        wgpuBufferDestroy(Get());\n    }\n    void const * Buffer::GetConstMappedRange(size_t offset, size_t size) const {\n        auto result = wgpuBufferGetConstMappedRange(Get(), offset, size);\n        return result;\n    }\n    BufferMapState Buffer::GetMapState() const {\n        auto result = wgpuBufferGetMapState(Get());\n        return static_cast<BufferMapState>(result);\n    }\n    void * Buffer::GetMappedRange(size_t offset, size_t size) const {\n        auto result = wgpuBufferGetMappedRange(Get(), offset, size);\n        return result;\n    }\n    uint64_t Buffer::GetSize() const {\n        auto result = wgpuBufferGetSize(Get());\n        return result;\n    }\n    BufferUsage Buffer::GetUsage() const {\n        auto result = wgpuBufferGetUsage(Get());\n        return static_cast<BufferUsage>(result);\n    }\n    void Buffer::MapAsync(MapMode mode, size_t offset, size_t size, BufferMapCallback callback, void * userdata) const {\n        wgpuBufferMapAsync(Get(), static_cast<WGPUMapMode>(mode), offset, size, callback, userdata);\n    }\n    void Buffer::SetLabel(char const * label) const {\n        wgpuBufferSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void Buffer::Unmap() const {\n        wgpuBufferUnmap(Get());\n    }\n    void Buffer::WGPUReference(WGPUBuffer handle) {\n        if (handle != nullptr) {\n            wgpuBufferReference(handle);\n        }\n    }\n    void Buffer::WGPURelease(WGPUBuffer handle) {\n        if (handle != nullptr) {\n            wgpuBufferRelease(handle);\n        }\n    }\n\n    // CommandBuffer\n\n    static_assert(sizeof(CommandBuffer) == sizeof(WGPUCommandBuffer), \"sizeof mismatch for CommandBuffer\");\n    static_assert(alignof(CommandBuffer) == alignof(WGPUCommandBuffer), \"alignof mismatch for CommandBuffer\");\n\n    void CommandBuffer::SetLabel(char const * label) const {\n        wgpuCommandBufferSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void CommandBuffer::WGPUReference(WGPUCommandBuffer handle) {\n        if (handle != nullptr) {\n            wgpuCommandBufferReference(handle);\n        }\n    }\n    void CommandBuffer::WGPURelease(WGPUCommandBuffer handle) {\n        if (handle != nullptr) {\n            wgpuCommandBufferRelease(handle);\n        }\n    }\n\n    // CommandEncoder\n\n    static_assert(sizeof(CommandEncoder) == sizeof(WGPUCommandEncoder), \"sizeof mismatch for CommandEncoder\");\n    static_assert(alignof(CommandEncoder) == alignof(WGPUCommandEncoder), \"alignof mismatch for CommandEncoder\");\n\n    ComputePassEncoder CommandEncoder::BeginComputePass(ComputePassDescriptor const * descriptor) const {\n        auto result = wgpuCommandEncoderBeginComputePass(Get(), reinterpret_cast<WGPUComputePassDescriptor const * >(descriptor));\n        return ComputePassEncoder::Acquire(result);\n    }\n    RenderPassEncoder CommandEncoder::BeginRenderPass(RenderPassDescriptor const * descriptor) const {\n        auto result = wgpuCommandEncoderBeginRenderPass(Get(), reinterpret_cast<WGPURenderPassDescriptor const * >(descriptor));\n        return RenderPassEncoder::Acquire(result);\n    }\n    void CommandEncoder::ClearBuffer(Buffer const& buffer, uint64_t offset, uint64_t size) const {\n        wgpuCommandEncoderClearBuffer(Get(), buffer.Get(), offset, size);\n    }\n    void CommandEncoder::CopyBufferToBuffer(Buffer const& source, uint64_t sourceOffset, Buffer const& destination, uint64_t destinationOffset, uint64_t size) const {\n        wgpuCommandEncoderCopyBufferToBuffer(Get(), source.Get(), sourceOffset, destination.Get(), destinationOffset, size);\n    }\n    void CommandEncoder::CopyBufferToTexture(ImageCopyBuffer const * source, ImageCopyTexture const * destination, Extent3D const * copySize) const {\n        wgpuCommandEncoderCopyBufferToTexture(Get(), reinterpret_cast<WGPUImageCopyBuffer const * >(source), reinterpret_cast<WGPUImageCopyTexture const * >(destination), reinterpret_cast<WGPUExtent3D const * >(copySize));\n    }\n    void CommandEncoder::CopyTextureToBuffer(ImageCopyTexture const * source, ImageCopyBuffer const * destination, Extent3D const * copySize) const {\n        wgpuCommandEncoderCopyTextureToBuffer(Get(), reinterpret_cast<WGPUImageCopyTexture const * >(source), reinterpret_cast<WGPUImageCopyBuffer const * >(destination), reinterpret_cast<WGPUExtent3D const * >(copySize));\n    }\n    void CommandEncoder::CopyTextureToTexture(ImageCopyTexture const * source, ImageCopyTexture const * destination, Extent3D const * copySize) const {\n        wgpuCommandEncoderCopyTextureToTexture(Get(), reinterpret_cast<WGPUImageCopyTexture const * >(source), reinterpret_cast<WGPUImageCopyTexture const * >(destination), reinterpret_cast<WGPUExtent3D const * >(copySize));\n    }\n    CommandBuffer CommandEncoder::Finish(CommandBufferDescriptor const * descriptor) const {\n        auto result = wgpuCommandEncoderFinish(Get(), reinterpret_cast<WGPUCommandBufferDescriptor const * >(descriptor));\n        return CommandBuffer::Acquire(result);\n    }\n    void CommandEncoder::InjectValidationError(char const * message) const {\n        wgpuCommandEncoderInjectValidationError(Get(), reinterpret_cast<char const * >(message));\n    }\n    void CommandEncoder::InsertDebugMarker(char const * markerLabel) const {\n        wgpuCommandEncoderInsertDebugMarker(Get(), reinterpret_cast<char const * >(markerLabel));\n    }\n    void CommandEncoder::PopDebugGroup() const {\n        wgpuCommandEncoderPopDebugGroup(Get());\n    }\n    void CommandEncoder::PushDebugGroup(char const * groupLabel) const {\n        wgpuCommandEncoderPushDebugGroup(Get(), reinterpret_cast<char const * >(groupLabel));\n    }\n    void CommandEncoder::ResolveQuerySet(QuerySet const& querySet, uint32_t firstQuery, uint32_t queryCount, Buffer const& destination, uint64_t destinationOffset) const {\n        wgpuCommandEncoderResolveQuerySet(Get(), querySet.Get(), firstQuery, queryCount, destination.Get(), destinationOffset);\n    }\n    void CommandEncoder::SetLabel(char const * label) const {\n        wgpuCommandEncoderSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void CommandEncoder::WriteBuffer(Buffer const& buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size) const {\n        wgpuCommandEncoderWriteBuffer(Get(), buffer.Get(), bufferOffset, reinterpret_cast<uint8_t const * >(data), size);\n    }\n    void CommandEncoder::WriteTimestamp(QuerySet const& querySet, uint32_t queryIndex) const {\n        wgpuCommandEncoderWriteTimestamp(Get(), querySet.Get(), queryIndex);\n    }\n    void CommandEncoder::WGPUReference(WGPUCommandEncoder handle) {\n        if (handle != nullptr) {\n            wgpuCommandEncoderReference(handle);\n        }\n    }\n    void CommandEncoder::WGPURelease(WGPUCommandEncoder handle) {\n        if (handle != nullptr) {\n            wgpuCommandEncoderRelease(handle);\n        }\n    }\n\n    // ComputePassEncoder\n\n    static_assert(sizeof(ComputePassEncoder) == sizeof(WGPUComputePassEncoder), \"sizeof mismatch for ComputePassEncoder\");\n    static_assert(alignof(ComputePassEncoder) == alignof(WGPUComputePassEncoder), \"alignof mismatch for ComputePassEncoder\");\n\n    void ComputePassEncoder::DispatchWorkgroups(uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) const {\n        wgpuComputePassEncoderDispatchWorkgroups(Get(), workgroupCountX, workgroupCountY, workgroupCountZ);\n    }\n    void ComputePassEncoder::DispatchWorkgroupsIndirect(Buffer const& indirectBuffer, uint64_t indirectOffset) const {\n        wgpuComputePassEncoderDispatchWorkgroupsIndirect(Get(), indirectBuffer.Get(), indirectOffset);\n    }\n    void ComputePassEncoder::End() const {\n        wgpuComputePassEncoderEnd(Get());\n    }\n    void ComputePassEncoder::InsertDebugMarker(char const * markerLabel) const {\n        wgpuComputePassEncoderInsertDebugMarker(Get(), reinterpret_cast<char const * >(markerLabel));\n    }\n    void ComputePassEncoder::PopDebugGroup() const {\n        wgpuComputePassEncoderPopDebugGroup(Get());\n    }\n    void ComputePassEncoder::PushDebugGroup(char const * groupLabel) const {\n        wgpuComputePassEncoderPushDebugGroup(Get(), reinterpret_cast<char const * >(groupLabel));\n    }\n    void ComputePassEncoder::SetBindGroup(uint32_t groupIndex, BindGroup const& group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) const {\n        wgpuComputePassEncoderSetBindGroup(Get(), groupIndex, group.Get(), dynamicOffsetCount, reinterpret_cast<uint32_t const * >(dynamicOffsets));\n    }\n    void ComputePassEncoder::SetLabel(char const * label) const {\n        wgpuComputePassEncoderSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void ComputePassEncoder::SetPipeline(ComputePipeline const& pipeline) const {\n        wgpuComputePassEncoderSetPipeline(Get(), pipeline.Get());\n    }\n    void ComputePassEncoder::WriteTimestamp(QuerySet const& querySet, uint32_t queryIndex) const {\n        wgpuComputePassEncoderWriteTimestamp(Get(), querySet.Get(), queryIndex);\n    }\n    void ComputePassEncoder::WGPUReference(WGPUComputePassEncoder handle) {\n        if (handle != nullptr) {\n            wgpuComputePassEncoderReference(handle);\n        }\n    }\n    void ComputePassEncoder::WGPURelease(WGPUComputePassEncoder handle) {\n        if (handle != nullptr) {\n            wgpuComputePassEncoderRelease(handle);\n        }\n    }\n\n    // ComputePipeline\n\n    static_assert(sizeof(ComputePipeline) == sizeof(WGPUComputePipeline), \"sizeof mismatch for ComputePipeline\");\n    static_assert(alignof(ComputePipeline) == alignof(WGPUComputePipeline), \"alignof mismatch for ComputePipeline\");\n\n    BindGroupLayout ComputePipeline::GetBindGroupLayout(uint32_t groupIndex) const {\n        auto result = wgpuComputePipelineGetBindGroupLayout(Get(), groupIndex);\n        return BindGroupLayout::Acquire(result);\n    }\n    void ComputePipeline::SetLabel(char const * label) const {\n        wgpuComputePipelineSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void ComputePipeline::WGPUReference(WGPUComputePipeline handle) {\n        if (handle != nullptr) {\n            wgpuComputePipelineReference(handle);\n        }\n    }\n    void ComputePipeline::WGPURelease(WGPUComputePipeline handle) {\n        if (handle != nullptr) {\n            wgpuComputePipelineRelease(handle);\n        }\n    }\n\n    // Device\n\n    static_assert(sizeof(Device) == sizeof(WGPUDevice), \"sizeof mismatch for Device\");\n    static_assert(alignof(Device) == alignof(WGPUDevice), \"alignof mismatch for Device\");\n\n    BindGroup Device::CreateBindGroup(BindGroupDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateBindGroup(Get(), reinterpret_cast<WGPUBindGroupDescriptor const * >(descriptor));\n        return BindGroup::Acquire(result);\n    }\n    BindGroupLayout Device::CreateBindGroupLayout(BindGroupLayoutDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateBindGroupLayout(Get(), reinterpret_cast<WGPUBindGroupLayoutDescriptor const * >(descriptor));\n        return BindGroupLayout::Acquire(result);\n    }\n    Buffer Device::CreateBuffer(BufferDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateBuffer(Get(), reinterpret_cast<WGPUBufferDescriptor const * >(descriptor));\n        return Buffer::Acquire(result);\n    }\n    CommandEncoder Device::CreateCommandEncoder(CommandEncoderDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateCommandEncoder(Get(), reinterpret_cast<WGPUCommandEncoderDescriptor const * >(descriptor));\n        return CommandEncoder::Acquire(result);\n    }\n    ComputePipeline Device::CreateComputePipeline(ComputePipelineDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateComputePipeline(Get(), reinterpret_cast<WGPUComputePipelineDescriptor const * >(descriptor));\n        return ComputePipeline::Acquire(result);\n    }\n    void Device::CreateComputePipelineAsync(ComputePipelineDescriptor const * descriptor, CreateComputePipelineAsyncCallback callback, void * userdata) const {\n        wgpuDeviceCreateComputePipelineAsync(Get(), reinterpret_cast<WGPUComputePipelineDescriptor const * >(descriptor), callback, userdata);\n    }\n    Buffer Device::CreateErrorBuffer(BufferDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateErrorBuffer(Get(), reinterpret_cast<WGPUBufferDescriptor const * >(descriptor));\n        return Buffer::Acquire(result);\n    }\n    ExternalTexture Device::CreateErrorExternalTexture() const {\n        auto result = wgpuDeviceCreateErrorExternalTexture(Get());\n        return ExternalTexture::Acquire(result);\n    }\n    ShaderModule Device::CreateErrorShaderModule(ShaderModuleDescriptor const * descriptor, char const * errorMessage) const {\n        auto result = wgpuDeviceCreateErrorShaderModule(Get(), reinterpret_cast<WGPUShaderModuleDescriptor const * >(descriptor), reinterpret_cast<char const * >(errorMessage));\n        return ShaderModule::Acquire(result);\n    }\n    Texture Device::CreateErrorTexture(TextureDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateErrorTexture(Get(), reinterpret_cast<WGPUTextureDescriptor const * >(descriptor));\n        return Texture::Acquire(result);\n    }\n    ExternalTexture Device::CreateExternalTexture(ExternalTextureDescriptor const * externalTextureDescriptor) const {\n        auto result = wgpuDeviceCreateExternalTexture(Get(), reinterpret_cast<WGPUExternalTextureDescriptor const * >(externalTextureDescriptor));\n        return ExternalTexture::Acquire(result);\n    }\n    PipelineLayout Device::CreatePipelineLayout(PipelineLayoutDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreatePipelineLayout(Get(), reinterpret_cast<WGPUPipelineLayoutDescriptor const * >(descriptor));\n        return PipelineLayout::Acquire(result);\n    }\n    QuerySet Device::CreateQuerySet(QuerySetDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateQuerySet(Get(), reinterpret_cast<WGPUQuerySetDescriptor const * >(descriptor));\n        return QuerySet::Acquire(result);\n    }\n    RenderBundleEncoder Device::CreateRenderBundleEncoder(RenderBundleEncoderDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateRenderBundleEncoder(Get(), reinterpret_cast<WGPURenderBundleEncoderDescriptor const * >(descriptor));\n        return RenderBundleEncoder::Acquire(result);\n    }\n    RenderPipeline Device::CreateRenderPipeline(RenderPipelineDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateRenderPipeline(Get(), reinterpret_cast<WGPURenderPipelineDescriptor const * >(descriptor));\n        return RenderPipeline::Acquire(result);\n    }\n    void Device::CreateRenderPipelineAsync(RenderPipelineDescriptor const * descriptor, CreateRenderPipelineAsyncCallback callback, void * userdata) const {\n        wgpuDeviceCreateRenderPipelineAsync(Get(), reinterpret_cast<WGPURenderPipelineDescriptor const * >(descriptor), callback, userdata);\n    }\n    Sampler Device::CreateSampler(SamplerDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateSampler(Get(), reinterpret_cast<WGPUSamplerDescriptor const * >(descriptor));\n        return Sampler::Acquire(result);\n    }\n    ShaderModule Device::CreateShaderModule(ShaderModuleDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateShaderModule(Get(), reinterpret_cast<WGPUShaderModuleDescriptor const * >(descriptor));\n        return ShaderModule::Acquire(result);\n    }\n    SwapChain Device::CreateSwapChain(Surface const& surface, SwapChainDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateSwapChain(Get(), surface.Get(), reinterpret_cast<WGPUSwapChainDescriptor const * >(descriptor));\n        return SwapChain::Acquire(result);\n    }\n    Texture Device::CreateTexture(TextureDescriptor const * descriptor) const {\n        auto result = wgpuDeviceCreateTexture(Get(), reinterpret_cast<WGPUTextureDescriptor const * >(descriptor));\n        return Texture::Acquire(result);\n    }\n    void Device::Destroy() const {\n        wgpuDeviceDestroy(Get());\n    }\n    size_t Device::EnumerateFeatures(FeatureName * features) const {\n        auto result = wgpuDeviceEnumerateFeatures(Get(), reinterpret_cast<WGPUFeatureName * >(features));\n        return result;\n    }\n    void Device::ForceLoss(DeviceLostReason type, char const * message) const {\n        wgpuDeviceForceLoss(Get(), static_cast<WGPUDeviceLostReason>(type), reinterpret_cast<char const * >(message));\n    }\n    Adapter Device::GetAdapter() const {\n        auto result = wgpuDeviceGetAdapter(Get());\n        return Adapter::Acquire(result);\n    }\n    Bool Device::GetLimits(SupportedLimits * limits) const {\n        auto result = wgpuDeviceGetLimits(Get(), reinterpret_cast<WGPUSupportedLimits * >(limits));\n        return result;\n    }\n    Queue Device::GetQueue() const {\n        auto result = wgpuDeviceGetQueue(Get());\n        return Queue::Acquire(result);\n    }\n    TextureUsage Device::GetSupportedSurfaceUsage(Surface const& surface) const {\n        auto result = wgpuDeviceGetSupportedSurfaceUsage(Get(), surface.Get());\n        return static_cast<TextureUsage>(result);\n    }\n    Bool Device::HasFeature(FeatureName feature) const {\n        auto result = wgpuDeviceHasFeature(Get(), static_cast<WGPUFeatureName>(feature));\n        return result;\n    }\n    SharedFence Device::ImportSharedFence(SharedFenceDescriptor const * descriptor) const {\n        auto result = wgpuDeviceImportSharedFence(Get(), reinterpret_cast<WGPUSharedFenceDescriptor const * >(descriptor));\n        return SharedFence::Acquire(result);\n    }\n    SharedTextureMemory Device::ImportSharedTextureMemory(SharedTextureMemoryDescriptor const * descriptor) const {\n        auto result = wgpuDeviceImportSharedTextureMemory(Get(), reinterpret_cast<WGPUSharedTextureMemoryDescriptor const * >(descriptor));\n        return SharedTextureMemory::Acquire(result);\n    }\n    void Device::InjectError(ErrorType type, char const * message) const {\n        wgpuDeviceInjectError(Get(), static_cast<WGPUErrorType>(type), reinterpret_cast<char const * >(message));\n    }\n    void Device::PopErrorScope(ErrorCallback callback, void * userdata) const {\n        wgpuDevicePopErrorScope(Get(), callback, userdata);\n    }\n    void Device::PushErrorScope(ErrorFilter filter) const {\n        wgpuDevicePushErrorScope(Get(), static_cast<WGPUErrorFilter>(filter));\n    }\n    void Device::SetDeviceLostCallback(DeviceLostCallback callback, void * userdata) const {\n        wgpuDeviceSetDeviceLostCallback(Get(), callback, userdata);\n    }\n    void Device::SetLabel(char const * label) const {\n        wgpuDeviceSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void Device::SetLoggingCallback(LoggingCallback callback, void * userdata) const {\n        wgpuDeviceSetLoggingCallback(Get(), callback, userdata);\n    }\n    void Device::SetUncapturedErrorCallback(ErrorCallback callback, void * userdata) const {\n        wgpuDeviceSetUncapturedErrorCallback(Get(), callback, userdata);\n    }\n    void Device::Tick() const {\n        wgpuDeviceTick(Get());\n    }\n    void Device::ValidateTextureDescriptor(TextureDescriptor const * descriptor) const {\n        wgpuDeviceValidateTextureDescriptor(Get(), reinterpret_cast<WGPUTextureDescriptor const * >(descriptor));\n    }\n    void Device::WGPUReference(WGPUDevice handle) {\n        if (handle != nullptr) {\n            wgpuDeviceReference(handle);\n        }\n    }\n    void Device::WGPURelease(WGPUDevice handle) {\n        if (handle != nullptr) {\n            wgpuDeviceRelease(handle);\n        }\n    }\n\n    // ExternalTexture\n\n    static_assert(sizeof(ExternalTexture) == sizeof(WGPUExternalTexture), \"sizeof mismatch for ExternalTexture\");\n    static_assert(alignof(ExternalTexture) == alignof(WGPUExternalTexture), \"alignof mismatch for ExternalTexture\");\n\n    void ExternalTexture::Destroy() const {\n        wgpuExternalTextureDestroy(Get());\n    }\n    void ExternalTexture::Expire() const {\n        wgpuExternalTextureExpire(Get());\n    }\n    void ExternalTexture::Refresh() const {\n        wgpuExternalTextureRefresh(Get());\n    }\n    void ExternalTexture::SetLabel(char const * label) const {\n        wgpuExternalTextureSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void ExternalTexture::WGPUReference(WGPUExternalTexture handle) {\n        if (handle != nullptr) {\n            wgpuExternalTextureReference(handle);\n        }\n    }\n    void ExternalTexture::WGPURelease(WGPUExternalTexture handle) {\n        if (handle != nullptr) {\n            wgpuExternalTextureRelease(handle);\n        }\n    }\n\n    // Instance\n\n    static_assert(sizeof(Instance) == sizeof(WGPUInstance), \"sizeof mismatch for Instance\");\n    static_assert(alignof(Instance) == alignof(WGPUInstance), \"alignof mismatch for Instance\");\n\n    Surface Instance::CreateSurface(SurfaceDescriptor const * descriptor) const {\n        auto result = wgpuInstanceCreateSurface(Get(), reinterpret_cast<WGPUSurfaceDescriptor const * >(descriptor));\n        return Surface::Acquire(result);\n    }\n    void Instance::ProcessEvents() const {\n        wgpuInstanceProcessEvents(Get());\n    }\n    void Instance::RequestAdapter(RequestAdapterOptions const * options, RequestAdapterCallback callback, void * userdata) const {\n        wgpuInstanceRequestAdapter(Get(), reinterpret_cast<WGPURequestAdapterOptions const * >(options), callback, userdata);\n    }\n    void Instance::WGPUReference(WGPUInstance handle) {\n        if (handle != nullptr) {\n            wgpuInstanceReference(handle);\n        }\n    }\n    void Instance::WGPURelease(WGPUInstance handle) {\n        if (handle != nullptr) {\n            wgpuInstanceRelease(handle);\n        }\n    }\n\n    // PipelineLayout\n\n    static_assert(sizeof(PipelineLayout) == sizeof(WGPUPipelineLayout), \"sizeof mismatch for PipelineLayout\");\n    static_assert(alignof(PipelineLayout) == alignof(WGPUPipelineLayout), \"alignof mismatch for PipelineLayout\");\n\n    void PipelineLayout::SetLabel(char const * label) const {\n        wgpuPipelineLayoutSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void PipelineLayout::WGPUReference(WGPUPipelineLayout handle) {\n        if (handle != nullptr) {\n            wgpuPipelineLayoutReference(handle);\n        }\n    }\n    void PipelineLayout::WGPURelease(WGPUPipelineLayout handle) {\n        if (handle != nullptr) {\n            wgpuPipelineLayoutRelease(handle);\n        }\n    }\n\n    // QuerySet\n\n    static_assert(sizeof(QuerySet) == sizeof(WGPUQuerySet), \"sizeof mismatch for QuerySet\");\n    static_assert(alignof(QuerySet) == alignof(WGPUQuerySet), \"alignof mismatch for QuerySet\");\n\n    void QuerySet::Destroy() const {\n        wgpuQuerySetDestroy(Get());\n    }\n    uint32_t QuerySet::GetCount() const {\n        auto result = wgpuQuerySetGetCount(Get());\n        return result;\n    }\n    QueryType QuerySet::GetType() const {\n        auto result = wgpuQuerySetGetType(Get());\n        return static_cast<QueryType>(result);\n    }\n    void QuerySet::SetLabel(char const * label) const {\n        wgpuQuerySetSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void QuerySet::WGPUReference(WGPUQuerySet handle) {\n        if (handle != nullptr) {\n            wgpuQuerySetReference(handle);\n        }\n    }\n    void QuerySet::WGPURelease(WGPUQuerySet handle) {\n        if (handle != nullptr) {\n            wgpuQuerySetRelease(handle);\n        }\n    }\n\n    // Queue\n\n    static_assert(sizeof(Queue) == sizeof(WGPUQueue), \"sizeof mismatch for Queue\");\n    static_assert(alignof(Queue) == alignof(WGPUQueue), \"alignof mismatch for Queue\");\n\n    void Queue::CopyExternalTextureForBrowser(ImageCopyExternalTexture const * source, ImageCopyTexture const * destination, Extent3D const * copySize, CopyTextureForBrowserOptions const * options) const {\n        wgpuQueueCopyExternalTextureForBrowser(Get(), reinterpret_cast<WGPUImageCopyExternalTexture const * >(source), reinterpret_cast<WGPUImageCopyTexture const * >(destination), reinterpret_cast<WGPUExtent3D const * >(copySize), reinterpret_cast<WGPUCopyTextureForBrowserOptions const * >(options));\n    }\n    void Queue::CopyTextureForBrowser(ImageCopyTexture const * source, ImageCopyTexture const * destination, Extent3D const * copySize, CopyTextureForBrowserOptions const * options) const {\n        wgpuQueueCopyTextureForBrowser(Get(), reinterpret_cast<WGPUImageCopyTexture const * >(source), reinterpret_cast<WGPUImageCopyTexture const * >(destination), reinterpret_cast<WGPUExtent3D const * >(copySize), reinterpret_cast<WGPUCopyTextureForBrowserOptions const * >(options));\n    }\n    void Queue::OnSubmittedWorkDone(uint64_t signalValue, QueueWorkDoneCallback callback, void * userdata) const {\n        wgpuQueueOnSubmittedWorkDone(Get(), signalValue, callback, userdata);\n    }\n    void Queue::SetLabel(char const * label) const {\n        wgpuQueueSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void Queue::Submit(size_t commandCount, CommandBuffer const * commands) const {\n        wgpuQueueSubmit(Get(), commandCount, reinterpret_cast<WGPUCommandBuffer const * >(commands));\n    }\n    void Queue::WriteBuffer(Buffer const& buffer, uint64_t bufferOffset, void const * data, size_t size) const {\n        wgpuQueueWriteBuffer(Get(), buffer.Get(), bufferOffset, reinterpret_cast<void const * >(data), size);\n    }\n    void Queue::WriteTexture(ImageCopyTexture const * destination, void const * data, size_t dataSize, TextureDataLayout const * dataLayout, Extent3D const * writeSize) const {\n        wgpuQueueWriteTexture(Get(), reinterpret_cast<WGPUImageCopyTexture const * >(destination), reinterpret_cast<void const * >(data), dataSize, reinterpret_cast<WGPUTextureDataLayout const * >(dataLayout), reinterpret_cast<WGPUExtent3D const * >(writeSize));\n    }\n    void Queue::WGPUReference(WGPUQueue handle) {\n        if (handle != nullptr) {\n            wgpuQueueReference(handle);\n        }\n    }\n    void Queue::WGPURelease(WGPUQueue handle) {\n        if (handle != nullptr) {\n            wgpuQueueRelease(handle);\n        }\n    }\n\n    // RenderBundle\n\n    static_assert(sizeof(RenderBundle) == sizeof(WGPURenderBundle), \"sizeof mismatch for RenderBundle\");\n    static_assert(alignof(RenderBundle) == alignof(WGPURenderBundle), \"alignof mismatch for RenderBundle\");\n\n    void RenderBundle::SetLabel(char const * label) const {\n        wgpuRenderBundleSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void RenderBundle::WGPUReference(WGPURenderBundle handle) {\n        if (handle != nullptr) {\n            wgpuRenderBundleReference(handle);\n        }\n    }\n    void RenderBundle::WGPURelease(WGPURenderBundle handle) {\n        if (handle != nullptr) {\n            wgpuRenderBundleRelease(handle);\n        }\n    }\n\n    // RenderBundleEncoder\n\n    static_assert(sizeof(RenderBundleEncoder) == sizeof(WGPURenderBundleEncoder), \"sizeof mismatch for RenderBundleEncoder\");\n    static_assert(alignof(RenderBundleEncoder) == alignof(WGPURenderBundleEncoder), \"alignof mismatch for RenderBundleEncoder\");\n\n    void RenderBundleEncoder::Draw(uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) const {\n        wgpuRenderBundleEncoderDraw(Get(), vertexCount, instanceCount, firstVertex, firstInstance);\n    }\n    void RenderBundleEncoder::DrawIndexed(uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) const {\n        wgpuRenderBundleEncoderDrawIndexed(Get(), indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n    }\n    void RenderBundleEncoder::DrawIndexedIndirect(Buffer const& indirectBuffer, uint64_t indirectOffset) const {\n        wgpuRenderBundleEncoderDrawIndexedIndirect(Get(), indirectBuffer.Get(), indirectOffset);\n    }\n    void RenderBundleEncoder::DrawIndirect(Buffer const& indirectBuffer, uint64_t indirectOffset) const {\n        wgpuRenderBundleEncoderDrawIndirect(Get(), indirectBuffer.Get(), indirectOffset);\n    }\n    RenderBundle RenderBundleEncoder::Finish(RenderBundleDescriptor const * descriptor) const {\n        auto result = wgpuRenderBundleEncoderFinish(Get(), reinterpret_cast<WGPURenderBundleDescriptor const * >(descriptor));\n        return RenderBundle::Acquire(result);\n    }\n    void RenderBundleEncoder::InsertDebugMarker(char const * markerLabel) const {\n        wgpuRenderBundleEncoderInsertDebugMarker(Get(), reinterpret_cast<char const * >(markerLabel));\n    }\n    void RenderBundleEncoder::PopDebugGroup() const {\n        wgpuRenderBundleEncoderPopDebugGroup(Get());\n    }\n    void RenderBundleEncoder::PushDebugGroup(char const * groupLabel) const {\n        wgpuRenderBundleEncoderPushDebugGroup(Get(), reinterpret_cast<char const * >(groupLabel));\n    }\n    void RenderBundleEncoder::SetBindGroup(uint32_t groupIndex, BindGroup const& group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) const {\n        wgpuRenderBundleEncoderSetBindGroup(Get(), groupIndex, group.Get(), dynamicOffsetCount, reinterpret_cast<uint32_t const * >(dynamicOffsets));\n    }\n    void RenderBundleEncoder::SetIndexBuffer(Buffer const& buffer, IndexFormat format, uint64_t offset, uint64_t size) const {\n        wgpuRenderBundleEncoderSetIndexBuffer(Get(), buffer.Get(), static_cast<WGPUIndexFormat>(format), offset, size);\n    }\n    void RenderBundleEncoder::SetLabel(char const * label) const {\n        wgpuRenderBundleEncoderSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void RenderBundleEncoder::SetPipeline(RenderPipeline const& pipeline) const {\n        wgpuRenderBundleEncoderSetPipeline(Get(), pipeline.Get());\n    }\n    void RenderBundleEncoder::SetVertexBuffer(uint32_t slot, Buffer const& buffer, uint64_t offset, uint64_t size) const {\n        wgpuRenderBundleEncoderSetVertexBuffer(Get(), slot, buffer.Get(), offset, size);\n    }\n    void RenderBundleEncoder::WGPUReference(WGPURenderBundleEncoder handle) {\n        if (handle != nullptr) {\n            wgpuRenderBundleEncoderReference(handle);\n        }\n    }\n    void RenderBundleEncoder::WGPURelease(WGPURenderBundleEncoder handle) {\n        if (handle != nullptr) {\n            wgpuRenderBundleEncoderRelease(handle);\n        }\n    }\n\n    // RenderPassEncoder\n\n    static_assert(sizeof(RenderPassEncoder) == sizeof(WGPURenderPassEncoder), \"sizeof mismatch for RenderPassEncoder\");\n    static_assert(alignof(RenderPassEncoder) == alignof(WGPURenderPassEncoder), \"alignof mismatch for RenderPassEncoder\");\n\n    void RenderPassEncoder::BeginOcclusionQuery(uint32_t queryIndex) const {\n        wgpuRenderPassEncoderBeginOcclusionQuery(Get(), queryIndex);\n    }\n    void RenderPassEncoder::Draw(uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) const {\n        wgpuRenderPassEncoderDraw(Get(), vertexCount, instanceCount, firstVertex, firstInstance);\n    }\n    void RenderPassEncoder::DrawIndexed(uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) const {\n        wgpuRenderPassEncoderDrawIndexed(Get(), indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n    }\n    void RenderPassEncoder::DrawIndexedIndirect(Buffer const& indirectBuffer, uint64_t indirectOffset) const {\n        wgpuRenderPassEncoderDrawIndexedIndirect(Get(), indirectBuffer.Get(), indirectOffset);\n    }\n    void RenderPassEncoder::DrawIndirect(Buffer const& indirectBuffer, uint64_t indirectOffset) const {\n        wgpuRenderPassEncoderDrawIndirect(Get(), indirectBuffer.Get(), indirectOffset);\n    }\n    void RenderPassEncoder::End() const {\n        wgpuRenderPassEncoderEnd(Get());\n    }\n    void RenderPassEncoder::EndOcclusionQuery() const {\n        wgpuRenderPassEncoderEndOcclusionQuery(Get());\n    }\n    void RenderPassEncoder::ExecuteBundles(size_t bundleCount, RenderBundle const * bundles) const {\n        wgpuRenderPassEncoderExecuteBundles(Get(), bundleCount, reinterpret_cast<WGPURenderBundle const * >(bundles));\n    }\n    void RenderPassEncoder::InsertDebugMarker(char const * markerLabel) const {\n        wgpuRenderPassEncoderInsertDebugMarker(Get(), reinterpret_cast<char const * >(markerLabel));\n    }\n    void RenderPassEncoder::PopDebugGroup() const {\n        wgpuRenderPassEncoderPopDebugGroup(Get());\n    }\n    void RenderPassEncoder::PushDebugGroup(char const * groupLabel) const {\n        wgpuRenderPassEncoderPushDebugGroup(Get(), reinterpret_cast<char const * >(groupLabel));\n    }\n    void RenderPassEncoder::SetBindGroup(uint32_t groupIndex, BindGroup const& group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) const {\n        wgpuRenderPassEncoderSetBindGroup(Get(), groupIndex, group.Get(), dynamicOffsetCount, reinterpret_cast<uint32_t const * >(dynamicOffsets));\n    }\n    void RenderPassEncoder::SetBlendConstant(Color const * color) const {\n        wgpuRenderPassEncoderSetBlendConstant(Get(), reinterpret_cast<WGPUColor const * >(color));\n    }\n    void RenderPassEncoder::SetIndexBuffer(Buffer const& buffer, IndexFormat format, uint64_t offset, uint64_t size) const {\n        wgpuRenderPassEncoderSetIndexBuffer(Get(), buffer.Get(), static_cast<WGPUIndexFormat>(format), offset, size);\n    }\n    void RenderPassEncoder::SetLabel(char const * label) const {\n        wgpuRenderPassEncoderSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void RenderPassEncoder::SetPipeline(RenderPipeline const& pipeline) const {\n        wgpuRenderPassEncoderSetPipeline(Get(), pipeline.Get());\n    }\n    void RenderPassEncoder::SetScissorRect(uint32_t x, uint32_t y, uint32_t width, uint32_t height) const {\n        wgpuRenderPassEncoderSetScissorRect(Get(), x, y, width, height);\n    }\n    void RenderPassEncoder::SetStencilReference(uint32_t reference) const {\n        wgpuRenderPassEncoderSetStencilReference(Get(), reference);\n    }\n    void RenderPassEncoder::SetVertexBuffer(uint32_t slot, Buffer const& buffer, uint64_t offset, uint64_t size) const {\n        wgpuRenderPassEncoderSetVertexBuffer(Get(), slot, buffer.Get(), offset, size);\n    }\n    void RenderPassEncoder::SetViewport(float x, float y, float width, float height, float minDepth, float maxDepth) const {\n        wgpuRenderPassEncoderSetViewport(Get(), x, y, width, height, minDepth, maxDepth);\n    }\n    void RenderPassEncoder::WriteTimestamp(QuerySet const& querySet, uint32_t queryIndex) const {\n        wgpuRenderPassEncoderWriteTimestamp(Get(), querySet.Get(), queryIndex);\n    }\n    void RenderPassEncoder::WGPUReference(WGPURenderPassEncoder handle) {\n        if (handle != nullptr) {\n            wgpuRenderPassEncoderReference(handle);\n        }\n    }\n    void RenderPassEncoder::WGPURelease(WGPURenderPassEncoder handle) {\n        if (handle != nullptr) {\n            wgpuRenderPassEncoderRelease(handle);\n        }\n    }\n\n    // RenderPipeline\n\n    static_assert(sizeof(RenderPipeline) == sizeof(WGPURenderPipeline), \"sizeof mismatch for RenderPipeline\");\n    static_assert(alignof(RenderPipeline) == alignof(WGPURenderPipeline), \"alignof mismatch for RenderPipeline\");\n\n    BindGroupLayout RenderPipeline::GetBindGroupLayout(uint32_t groupIndex) const {\n        auto result = wgpuRenderPipelineGetBindGroupLayout(Get(), groupIndex);\n        return BindGroupLayout::Acquire(result);\n    }\n    void RenderPipeline::SetLabel(char const * label) const {\n        wgpuRenderPipelineSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void RenderPipeline::WGPUReference(WGPURenderPipeline handle) {\n        if (handle != nullptr) {\n            wgpuRenderPipelineReference(handle);\n        }\n    }\n    void RenderPipeline::WGPURelease(WGPURenderPipeline handle) {\n        if (handle != nullptr) {\n            wgpuRenderPipelineRelease(handle);\n        }\n    }\n\n    // Sampler\n\n    static_assert(sizeof(Sampler) == sizeof(WGPUSampler), \"sizeof mismatch for Sampler\");\n    static_assert(alignof(Sampler) == alignof(WGPUSampler), \"alignof mismatch for Sampler\");\n\n    void Sampler::SetLabel(char const * label) const {\n        wgpuSamplerSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void Sampler::WGPUReference(WGPUSampler handle) {\n        if (handle != nullptr) {\n            wgpuSamplerReference(handle);\n        }\n    }\n    void Sampler::WGPURelease(WGPUSampler handle) {\n        if (handle != nullptr) {\n            wgpuSamplerRelease(handle);\n        }\n    }\n\n    // ShaderModule\n\n    static_assert(sizeof(ShaderModule) == sizeof(WGPUShaderModule), \"sizeof mismatch for ShaderModule\");\n    static_assert(alignof(ShaderModule) == alignof(WGPUShaderModule), \"alignof mismatch for ShaderModule\");\n\n    void ShaderModule::GetCompilationInfo(CompilationInfoCallback callback, void * userdata) const {\n        wgpuShaderModuleGetCompilationInfo(Get(), callback, userdata);\n    }\n    void ShaderModule::SetLabel(char const * label) const {\n        wgpuShaderModuleSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void ShaderModule::WGPUReference(WGPUShaderModule handle) {\n        if (handle != nullptr) {\n            wgpuShaderModuleReference(handle);\n        }\n    }\n    void ShaderModule::WGPURelease(WGPUShaderModule handle) {\n        if (handle != nullptr) {\n            wgpuShaderModuleRelease(handle);\n        }\n    }\n\n    // SharedFence\n\n    static_assert(sizeof(SharedFence) == sizeof(WGPUSharedFence), \"sizeof mismatch for SharedFence\");\n    static_assert(alignof(SharedFence) == alignof(WGPUSharedFence), \"alignof mismatch for SharedFence\");\n\n    void SharedFence::ExportInfo(SharedFenceExportInfo * info) const {\n        wgpuSharedFenceExportInfo(Get(), reinterpret_cast<WGPUSharedFenceExportInfo * >(info));\n    }\n    void SharedFence::WGPUReference(WGPUSharedFence handle) {\n        if (handle != nullptr) {\n            wgpuSharedFenceReference(handle);\n        }\n    }\n    void SharedFence::WGPURelease(WGPUSharedFence handle) {\n        if (handle != nullptr) {\n            wgpuSharedFenceRelease(handle);\n        }\n    }\n\n    // SharedTextureMemory\n\n    static_assert(sizeof(SharedTextureMemory) == sizeof(WGPUSharedTextureMemory), \"sizeof mismatch for SharedTextureMemory\");\n    static_assert(alignof(SharedTextureMemory) == alignof(WGPUSharedTextureMemory), \"alignof mismatch for SharedTextureMemory\");\n\n    void SharedTextureMemory::BeginAccess(Texture const& texture, SharedTextureMemoryBeginAccessDescriptor const * descriptor) const {\n        wgpuSharedTextureMemoryBeginAccess(Get(), texture.Get(), reinterpret_cast<WGPUSharedTextureMemoryBeginAccessDescriptor const * >(descriptor));\n    }\n    Texture SharedTextureMemory::CreateTexture(TextureDescriptor const * descriptor) const {\n        auto result = wgpuSharedTextureMemoryCreateTexture(Get(), reinterpret_cast<WGPUTextureDescriptor const * >(descriptor));\n        return Texture::Acquire(result);\n    }\n    void SharedTextureMemory::EndAccess(Texture const& texture, SharedTextureMemoryEndAccessState * descriptor) const {\n        *descriptor = SharedTextureMemoryEndAccessState();\n        wgpuSharedTextureMemoryEndAccess(Get(), texture.Get(), reinterpret_cast<WGPUSharedTextureMemoryEndAccessState * >(descriptor));\n    }\n    void SharedTextureMemory::GetProperties(SharedTextureMemoryProperties * properties) const {\n        wgpuSharedTextureMemoryGetProperties(Get(), reinterpret_cast<WGPUSharedTextureMemoryProperties * >(properties));\n    }\n    void SharedTextureMemory::SetLabel(char const * label) const {\n        wgpuSharedTextureMemorySetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void SharedTextureMemory::WGPUReference(WGPUSharedTextureMemory handle) {\n        if (handle != nullptr) {\n            wgpuSharedTextureMemoryReference(handle);\n        }\n    }\n    void SharedTextureMemory::WGPURelease(WGPUSharedTextureMemory handle) {\n        if (handle != nullptr) {\n            wgpuSharedTextureMemoryRelease(handle);\n        }\n    }\n\n    // Surface\n\n    static_assert(sizeof(Surface) == sizeof(WGPUSurface), \"sizeof mismatch for Surface\");\n    static_assert(alignof(Surface) == alignof(WGPUSurface), \"alignof mismatch for Surface\");\n\n    void Surface::WGPUReference(WGPUSurface handle) {\n        if (handle != nullptr) {\n            wgpuSurfaceReference(handle);\n        }\n    }\n    void Surface::WGPURelease(WGPUSurface handle) {\n        if (handle != nullptr) {\n            wgpuSurfaceRelease(handle);\n        }\n    }\n\n    // SwapChain\n\n    static_assert(sizeof(SwapChain) == sizeof(WGPUSwapChain), \"sizeof mismatch for SwapChain\");\n    static_assert(alignof(SwapChain) == alignof(WGPUSwapChain), \"alignof mismatch for SwapChain\");\n\n    Texture SwapChain::GetCurrentTexture() const {\n        auto result = wgpuSwapChainGetCurrentTexture(Get());\n        return Texture::Acquire(result);\n    }\n    TextureView SwapChain::GetCurrentTextureView() const {\n        auto result = wgpuSwapChainGetCurrentTextureView(Get());\n        return TextureView::Acquire(result);\n    }\n    void SwapChain::Present() const {\n        wgpuSwapChainPresent(Get());\n    }\n    void SwapChain::WGPUReference(WGPUSwapChain handle) {\n        if (handle != nullptr) {\n            wgpuSwapChainReference(handle);\n        }\n    }\n    void SwapChain::WGPURelease(WGPUSwapChain handle) {\n        if (handle != nullptr) {\n            wgpuSwapChainRelease(handle);\n        }\n    }\n\n    // Texture\n\n    static_assert(sizeof(Texture) == sizeof(WGPUTexture), \"sizeof mismatch for Texture\");\n    static_assert(alignof(Texture) == alignof(WGPUTexture), \"alignof mismatch for Texture\");\n\n    TextureView Texture::CreateView(TextureViewDescriptor const * descriptor) const {\n        auto result = wgpuTextureCreateView(Get(), reinterpret_cast<WGPUTextureViewDescriptor const * >(descriptor));\n        return TextureView::Acquire(result);\n    }\n    void Texture::Destroy() const {\n        wgpuTextureDestroy(Get());\n    }\n    uint32_t Texture::GetDepthOrArrayLayers() const {\n        auto result = wgpuTextureGetDepthOrArrayLayers(Get());\n        return result;\n    }\n    TextureDimension Texture::GetDimension() const {\n        auto result = wgpuTextureGetDimension(Get());\n        return static_cast<TextureDimension>(result);\n    }\n    TextureFormat Texture::GetFormat() const {\n        auto result = wgpuTextureGetFormat(Get());\n        return static_cast<TextureFormat>(result);\n    }\n    uint32_t Texture::GetHeight() const {\n        auto result = wgpuTextureGetHeight(Get());\n        return result;\n    }\n    uint32_t Texture::GetMipLevelCount() const {\n        auto result = wgpuTextureGetMipLevelCount(Get());\n        return result;\n    }\n    uint32_t Texture::GetSampleCount() const {\n        auto result = wgpuTextureGetSampleCount(Get());\n        return result;\n    }\n    TextureUsage Texture::GetUsage() const {\n        auto result = wgpuTextureGetUsage(Get());\n        return static_cast<TextureUsage>(result);\n    }\n    uint32_t Texture::GetWidth() const {\n        auto result = wgpuTextureGetWidth(Get());\n        return result;\n    }\n    void Texture::SetLabel(char const * label) const {\n        wgpuTextureSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void Texture::WGPUReference(WGPUTexture handle) {\n        if (handle != nullptr) {\n            wgpuTextureReference(handle);\n        }\n    }\n    void Texture::WGPURelease(WGPUTexture handle) {\n        if (handle != nullptr) {\n            wgpuTextureRelease(handle);\n        }\n    }\n\n    // TextureView\n\n    static_assert(sizeof(TextureView) == sizeof(WGPUTextureView), \"sizeof mismatch for TextureView\");\n    static_assert(alignof(TextureView) == alignof(WGPUTextureView), \"alignof mismatch for TextureView\");\n\n    void TextureView::SetLabel(char const * label) const {\n        wgpuTextureViewSetLabel(Get(), reinterpret_cast<char const * >(label));\n    }\n    void TextureView::WGPUReference(WGPUTextureView handle) {\n        if (handle != nullptr) {\n            wgpuTextureViewReference(handle);\n        }\n    }\n    void TextureView::WGPURelease(WGPUTextureView handle) {\n        if (handle != nullptr) {\n            wgpuTextureViewRelease(handle);\n        }\n    }\n\n    // Function\n\n    Instance CreateInstance(InstanceDescriptor const * descriptor) {\n        auto result = wgpuCreateInstance(reinterpret_cast<WGPUInstanceDescriptor const * >(descriptor));\n        return Instance::Acquire(result);\n    }\n    Proc GetProcAddress(Device device, char const * procName) {\n        auto result = wgpuGetProcAddress(device.Get(), reinterpret_cast<char const * >(procName));\n        return reinterpret_cast<Proc>(result);\n    }\n\n}\n"}