{"src/dawn/native/webgpu_dawn_native_proc.cpp": "// Copyright 2021 The Dawn Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#include \"dawn/webgpu.h\"\n\nnamespace dawn::native {\n\n// This file should be kept in sync with generator/templates/dawn/native/ProcTable.cpp\n\nextern WGPUInstance NativeCreateInstance(WGPUInstanceDescriptor const * descriptor);\nextern WGPUProc NativeGetProcAddress(WGPUDevice device, char const * procName);\nextern WGPUDevice NativeAdapterCreateDevice(WGPUAdapter cSelf, WGPUDeviceDescriptor const * descriptor);\nextern size_t NativeAdapterEnumerateFeatures(WGPUAdapter cSelf, WGPUFeatureName * features);\nextern WGPUInstance NativeAdapterGetInstance(WGPUAdapter cSelf);\nextern bool NativeAdapterGetLimits(WGPUAdapter cSelf, WGPUSupportedLimits * limits);\nextern void NativeAdapterGetProperties(WGPUAdapter cSelf, WGPUAdapterProperties * properties);\nextern bool NativeAdapterHasFeature(WGPUAdapter cSelf, WGPUFeatureName feature);\nextern void NativeAdapterRequestDevice(WGPUAdapter cSelf, WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata);\nextern void NativeAdapterReference(WGPUAdapter cSelf);\nextern void NativeAdapterRelease(WGPUAdapter cSelf);\nextern void NativeBindGroupSetLabel(WGPUBindGroup cSelf, char const * label);\nextern void NativeBindGroupReference(WGPUBindGroup cSelf);\nextern void NativeBindGroupRelease(WGPUBindGroup cSelf);\nextern void NativeBindGroupLayoutSetLabel(WGPUBindGroupLayout cSelf, char const * label);\nextern void NativeBindGroupLayoutReference(WGPUBindGroupLayout cSelf);\nextern void NativeBindGroupLayoutRelease(WGPUBindGroupLayout cSelf);\nextern void NativeBufferDestroy(WGPUBuffer cSelf);\nextern void const * NativeBufferGetConstMappedRange(WGPUBuffer cSelf, size_t offset, size_t size);\nextern WGPUBufferMapState NativeBufferGetMapState(WGPUBuffer cSelf);\nextern void * NativeBufferGetMappedRange(WGPUBuffer cSelf, size_t offset, size_t size);\nextern uint64_t NativeBufferGetSize(WGPUBuffer cSelf);\nextern WGPUBufferUsageFlags NativeBufferGetUsage(WGPUBuffer cSelf);\nextern void NativeBufferMapAsync(WGPUBuffer cSelf, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata);\nextern void NativeBufferSetLabel(WGPUBuffer cSelf, char const * label);\nextern void NativeBufferUnmap(WGPUBuffer cSelf);\nextern void NativeBufferReference(WGPUBuffer cSelf);\nextern void NativeBufferRelease(WGPUBuffer cSelf);\nextern void NativeCommandBufferSetLabel(WGPUCommandBuffer cSelf, char const * label);\nextern void NativeCommandBufferReference(WGPUCommandBuffer cSelf);\nextern void NativeCommandBufferRelease(WGPUCommandBuffer cSelf);\nextern WGPUComputePassEncoder NativeCommandEncoderBeginComputePass(WGPUCommandEncoder cSelf, WGPUComputePassDescriptor const * descriptor);\nextern WGPURenderPassEncoder NativeCommandEncoderBeginRenderPass(WGPUCommandEncoder cSelf, WGPURenderPassDescriptor const * descriptor);\nextern void NativeCommandEncoderClearBuffer(WGPUCommandEncoder cSelf, WGPUBuffer buffer, uint64_t offset, uint64_t size);\nextern void NativeCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder cSelf, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size);\nextern void NativeCommandEncoderCopyBufferToTexture(WGPUCommandEncoder cSelf, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize);\nextern void NativeCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder cSelf, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize);\nextern void NativeCommandEncoderCopyTextureToTexture(WGPUCommandEncoder cSelf, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize);\nextern WGPUCommandBuffer NativeCommandEncoderFinish(WGPUCommandEncoder cSelf, WGPUCommandBufferDescriptor const * descriptor);\nextern void NativeCommandEncoderInjectValidationError(WGPUCommandEncoder cSelf, char const * message);\nextern void NativeCommandEncoderInsertDebugMarker(WGPUCommandEncoder cSelf, char const * markerLabel);\nextern void NativeCommandEncoderPopDebugGroup(WGPUCommandEncoder cSelf);\nextern void NativeCommandEncoderPushDebugGroup(WGPUCommandEncoder cSelf, char const * groupLabel);\nextern void NativeCommandEncoderResolveQuerySet(WGPUCommandEncoder cSelf, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset);\nextern void NativeCommandEncoderSetLabel(WGPUCommandEncoder cSelf, char const * label);\nextern void NativeCommandEncoderWriteBuffer(WGPUCommandEncoder cSelf, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size);\nextern void NativeCommandEncoderWriteTimestamp(WGPUCommandEncoder cSelf, WGPUQuerySet querySet, uint32_t queryIndex);\nextern void NativeCommandEncoderReference(WGPUCommandEncoder cSelf);\nextern void NativeCommandEncoderRelease(WGPUCommandEncoder cSelf);\nextern void NativeComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder cSelf, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ);\nextern void NativeComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder cSelf, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nextern void NativeComputePassEncoderEnd(WGPUComputePassEncoder cSelf);\nextern void NativeComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder cSelf, char const * markerLabel);\nextern void NativeComputePassEncoderPopDebugGroup(WGPUComputePassEncoder cSelf);\nextern void NativeComputePassEncoderPushDebugGroup(WGPUComputePassEncoder cSelf, char const * groupLabel);\nextern void NativeComputePassEncoderSetBindGroup(WGPUComputePassEncoder cSelf, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\nextern void NativeComputePassEncoderSetLabel(WGPUComputePassEncoder cSelf, char const * label);\nextern void NativeComputePassEncoderSetPipeline(WGPUComputePassEncoder cSelf, WGPUComputePipeline pipeline);\nextern void NativeComputePassEncoderWriteTimestamp(WGPUComputePassEncoder cSelf, WGPUQuerySet querySet, uint32_t queryIndex);\nextern void NativeComputePassEncoderReference(WGPUComputePassEncoder cSelf);\nextern void NativeComputePassEncoderRelease(WGPUComputePassEncoder cSelf);\nextern WGPUBindGroupLayout NativeComputePipelineGetBindGroupLayout(WGPUComputePipeline cSelf, uint32_t groupIndex);\nextern void NativeComputePipelineSetLabel(WGPUComputePipeline cSelf, char const * label);\nextern void NativeComputePipelineReference(WGPUComputePipeline cSelf);\nextern void NativeComputePipelineRelease(WGPUComputePipeline cSelf);\nextern WGPUBindGroup NativeDeviceCreateBindGroup(WGPUDevice cSelf, WGPUBindGroupDescriptor const * descriptor);\nextern WGPUBindGroupLayout NativeDeviceCreateBindGroupLayout(WGPUDevice cSelf, WGPUBindGroupLayoutDescriptor const * descriptor);\nextern WGPUBuffer NativeDeviceCreateBuffer(WGPUDevice cSelf, WGPUBufferDescriptor const * descriptor);\nextern WGPUCommandEncoder NativeDeviceCreateCommandEncoder(WGPUDevice cSelf, WGPUCommandEncoderDescriptor const * descriptor);\nextern WGPUComputePipeline NativeDeviceCreateComputePipeline(WGPUDevice cSelf, WGPUComputePipelineDescriptor const * descriptor);\nextern void NativeDeviceCreateComputePipelineAsync(WGPUDevice cSelf, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata);\nextern WGPUBuffer NativeDeviceCreateErrorBuffer(WGPUDevice cSelf, WGPUBufferDescriptor const * descriptor);\nextern WGPUExternalTexture NativeDeviceCreateErrorExternalTexture(WGPUDevice cSelf);\nextern WGPUShaderModule NativeDeviceCreateErrorShaderModule(WGPUDevice cSelf, WGPUShaderModuleDescriptor const * descriptor, char const * errorMessage);\nextern WGPUTexture NativeDeviceCreateErrorTexture(WGPUDevice cSelf, WGPUTextureDescriptor const * descriptor);\nextern WGPUExternalTexture NativeDeviceCreateExternalTexture(WGPUDevice cSelf, WGPUExternalTextureDescriptor const * externalTextureDescriptor);\nextern WGPUPipelineLayout NativeDeviceCreatePipelineLayout(WGPUDevice cSelf, WGPUPipelineLayoutDescriptor const * descriptor);\nextern WGPUQuerySet NativeDeviceCreateQuerySet(WGPUDevice cSelf, WGPUQuerySetDescriptor const * descriptor);\nextern WGPURenderBundleEncoder NativeDeviceCreateRenderBundleEncoder(WGPUDevice cSelf, WGPURenderBundleEncoderDescriptor const * descriptor);\nextern WGPURenderPipeline NativeDeviceCreateRenderPipeline(WGPUDevice cSelf, WGPURenderPipelineDescriptor const * descriptor);\nextern void NativeDeviceCreateRenderPipelineAsync(WGPUDevice cSelf, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata);\nextern WGPUSampler NativeDeviceCreateSampler(WGPUDevice cSelf, WGPUSamplerDescriptor const * descriptor);\nextern WGPUShaderModule NativeDeviceCreateShaderModule(WGPUDevice cSelf, WGPUShaderModuleDescriptor const * descriptor);\nextern WGPUSwapChain NativeDeviceCreateSwapChain(WGPUDevice cSelf, WGPUSurface surface, WGPUSwapChainDescriptor const * descriptor);\nextern WGPUTexture NativeDeviceCreateTexture(WGPUDevice cSelf, WGPUTextureDescriptor const * descriptor);\nextern void NativeDeviceDestroy(WGPUDevice cSelf);\nextern size_t NativeDeviceEnumerateFeatures(WGPUDevice cSelf, WGPUFeatureName * features);\nextern void NativeDeviceForceLoss(WGPUDevice cSelf, WGPUDeviceLostReason type, char const * message);\nextern WGPUAdapter NativeDeviceGetAdapter(WGPUDevice cSelf);\nextern bool NativeDeviceGetLimits(WGPUDevice cSelf, WGPUSupportedLimits * limits);\nextern WGPUQueue NativeDeviceGetQueue(WGPUDevice cSelf);\nextern WGPUTextureUsageFlags NativeDeviceGetSupportedSurfaceUsage(WGPUDevice cSelf, WGPUSurface surface);\nextern bool NativeDeviceHasFeature(WGPUDevice cSelf, WGPUFeatureName feature);\nextern void NativeDeviceInjectError(WGPUDevice cSelf, WGPUErrorType type, char const * message);\nextern void NativeDevicePopErrorScope(WGPUDevice cSelf, WGPUErrorCallback callback, void * userdata);\nextern void NativeDevicePushErrorScope(WGPUDevice cSelf, WGPUErrorFilter filter);\nextern void NativeDeviceSetDeviceLostCallback(WGPUDevice cSelf, WGPUDeviceLostCallback callback, void * userdata);\nextern void NativeDeviceSetLabel(WGPUDevice cSelf, char const * label);\nextern void NativeDeviceSetLoggingCallback(WGPUDevice cSelf, WGPULoggingCallback callback, void * userdata);\nextern void NativeDeviceSetUncapturedErrorCallback(WGPUDevice cSelf, WGPUErrorCallback callback, void * userdata);\nextern void NativeDeviceTick(WGPUDevice cSelf);\nextern void NativeDeviceValidateTextureDescriptor(WGPUDevice cSelf, WGPUTextureDescriptor const * descriptor);\nextern void NativeDeviceReference(WGPUDevice cSelf);\nextern void NativeDeviceRelease(WGPUDevice cSelf);\nextern void NativeExternalTextureDestroy(WGPUExternalTexture cSelf);\nextern void NativeExternalTextureExpire(WGPUExternalTexture cSelf);\nextern void NativeExternalTextureRefresh(WGPUExternalTexture cSelf);\nextern void NativeExternalTextureSetLabel(WGPUExternalTexture cSelf, char const * label);\nextern void NativeExternalTextureReference(WGPUExternalTexture cSelf);\nextern void NativeExternalTextureRelease(WGPUExternalTexture cSelf);\nextern WGPUSurface NativeInstanceCreateSurface(WGPUInstance cSelf, WGPUSurfaceDescriptor const * descriptor);\nextern void NativeInstanceProcessEvents(WGPUInstance cSelf);\nextern void NativeInstanceRequestAdapter(WGPUInstance cSelf, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata);\nextern void NativeInstanceReference(WGPUInstance cSelf);\nextern void NativeInstanceRelease(WGPUInstance cSelf);\nextern void NativePipelineLayoutSetLabel(WGPUPipelineLayout cSelf, char const * label);\nextern void NativePipelineLayoutReference(WGPUPipelineLayout cSelf);\nextern void NativePipelineLayoutRelease(WGPUPipelineLayout cSelf);\nextern void NativeQuerySetDestroy(WGPUQuerySet cSelf);\nextern uint32_t NativeQuerySetGetCount(WGPUQuerySet cSelf);\nextern WGPUQueryType NativeQuerySetGetType(WGPUQuerySet cSelf);\nextern void NativeQuerySetSetLabel(WGPUQuerySet cSelf, char const * label);\nextern void NativeQuerySetReference(WGPUQuerySet cSelf);\nextern void NativeQuerySetRelease(WGPUQuerySet cSelf);\nextern void NativeQueueCopyExternalTextureForBrowser(WGPUQueue cSelf, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options);\nextern void NativeQueueCopyTextureForBrowser(WGPUQueue cSelf, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options);\nextern void NativeQueueOnSubmittedWorkDone(WGPUQueue cSelf, uint64_t signalValue, WGPUQueueWorkDoneCallback callback, void * userdata);\nextern void NativeQueueSetLabel(WGPUQueue cSelf, char const * label);\nextern void NativeQueueSubmit(WGPUQueue cSelf, size_t commandCount, WGPUCommandBuffer const * commands);\nextern void NativeQueueWriteBuffer(WGPUQueue cSelf, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size);\nextern void NativeQueueWriteTexture(WGPUQueue cSelf, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize);\nextern void NativeQueueReference(WGPUQueue cSelf);\nextern void NativeQueueRelease(WGPUQueue cSelf);\nextern void NativeRenderBundleSetLabel(WGPURenderBundle cSelf, char const * label);\nextern void NativeRenderBundleReference(WGPURenderBundle cSelf);\nextern void NativeRenderBundleRelease(WGPURenderBundle cSelf);\nextern void NativeRenderBundleEncoderDraw(WGPURenderBundleEncoder cSelf, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);\nextern void NativeRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder cSelf, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);\nextern void NativeRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder cSelf, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nextern void NativeRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder cSelf, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nextern WGPURenderBundle NativeRenderBundleEncoderFinish(WGPURenderBundleEncoder cSelf, WGPURenderBundleDescriptor const * descriptor);\nextern void NativeRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder cSelf, char const * markerLabel);\nextern void NativeRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder cSelf);\nextern void NativeRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder cSelf, char const * groupLabel);\nextern void NativeRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder cSelf, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\nextern void NativeRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder cSelf, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size);\nextern void NativeRenderBundleEncoderSetLabel(WGPURenderBundleEncoder cSelf, char const * label);\nextern void NativeRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder cSelf, WGPURenderPipeline pipeline);\nextern void NativeRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder cSelf, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size);\nextern void NativeRenderBundleEncoderReference(WGPURenderBundleEncoder cSelf);\nextern void NativeRenderBundleEncoderRelease(WGPURenderBundleEncoder cSelf);\nextern void NativeRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder cSelf, uint32_t queryIndex);\nextern void NativeRenderPassEncoderDraw(WGPURenderPassEncoder cSelf, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);\nextern void NativeRenderPassEncoderDrawIndexed(WGPURenderPassEncoder cSelf, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance);\nextern void NativeRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder cSelf, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nextern void NativeRenderPassEncoderDrawIndirect(WGPURenderPassEncoder cSelf, WGPUBuffer indirectBuffer, uint64_t indirectOffset);\nextern void NativeRenderPassEncoderEnd(WGPURenderPassEncoder cSelf);\nextern void NativeRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder cSelf);\nextern void NativeRenderPassEncoderExecuteBundles(WGPURenderPassEncoder cSelf, size_t bundleCount, WGPURenderBundle const * bundles);\nextern void NativeRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder cSelf, char const * markerLabel);\nextern void NativeRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder cSelf);\nextern void NativeRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder cSelf, char const * groupLabel);\nextern void NativeRenderPassEncoderSetBindGroup(WGPURenderPassEncoder cSelf, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets);\nextern void NativeRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder cSelf, WGPUColor const * color);\nextern void NativeRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder cSelf, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size);\nextern void NativeRenderPassEncoderSetLabel(WGPURenderPassEncoder cSelf, char const * label);\nextern void NativeRenderPassEncoderSetPipeline(WGPURenderPassEncoder cSelf, WGPURenderPipeline pipeline);\nextern void NativeRenderPassEncoderSetScissorRect(WGPURenderPassEncoder cSelf, uint32_t x, uint32_t y, uint32_t width, uint32_t height);\nextern void NativeRenderPassEncoderSetStencilReference(WGPURenderPassEncoder cSelf, uint32_t reference);\nextern void NativeRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder cSelf, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size);\nextern void NativeRenderPassEncoderSetViewport(WGPURenderPassEncoder cSelf, float x, float y, float width, float height, float minDepth, float maxDepth);\nextern void NativeRenderPassEncoderWriteTimestamp(WGPURenderPassEncoder cSelf, WGPUQuerySet querySet, uint32_t queryIndex);\nextern void NativeRenderPassEncoderReference(WGPURenderPassEncoder cSelf);\nextern void NativeRenderPassEncoderRelease(WGPURenderPassEncoder cSelf);\nextern WGPUBindGroupLayout NativeRenderPipelineGetBindGroupLayout(WGPURenderPipeline cSelf, uint32_t groupIndex);\nextern void NativeRenderPipelineSetLabel(WGPURenderPipeline cSelf, char const * label);\nextern void NativeRenderPipelineReference(WGPURenderPipeline cSelf);\nextern void NativeRenderPipelineRelease(WGPURenderPipeline cSelf);\nextern void NativeSamplerSetLabel(WGPUSampler cSelf, char const * label);\nextern void NativeSamplerReference(WGPUSampler cSelf);\nextern void NativeSamplerRelease(WGPUSampler cSelf);\nextern void NativeShaderModuleGetCompilationInfo(WGPUShaderModule cSelf, WGPUCompilationInfoCallback callback, void * userdata);\nextern void NativeShaderModuleSetLabel(WGPUShaderModule cSelf, char const * label);\nextern void NativeShaderModuleReference(WGPUShaderModule cSelf);\nextern void NativeShaderModuleRelease(WGPUShaderModule cSelf);\nextern void NativeSurfaceReference(WGPUSurface cSelf);\nextern void NativeSurfaceRelease(WGPUSurface cSelf);\nextern WGPUTexture NativeSwapChainGetCurrentTexture(WGPUSwapChain cSelf);\nextern WGPUTextureView NativeSwapChainGetCurrentTextureView(WGPUSwapChain cSelf);\nextern void NativeSwapChainPresent(WGPUSwapChain cSelf);\nextern void NativeSwapChainReference(WGPUSwapChain cSelf);\nextern void NativeSwapChainRelease(WGPUSwapChain cSelf);\nextern WGPUTextureView NativeTextureCreateView(WGPUTexture cSelf, WGPUTextureViewDescriptor const * descriptor);\nextern void NativeTextureDestroy(WGPUTexture cSelf);\nextern uint32_t NativeTextureGetDepthOrArrayLayers(WGPUTexture cSelf);\nextern WGPUTextureDimension NativeTextureGetDimension(WGPUTexture cSelf);\nextern WGPUTextureFormat NativeTextureGetFormat(WGPUTexture cSelf);\nextern uint32_t NativeTextureGetHeight(WGPUTexture cSelf);\nextern uint32_t NativeTextureGetMipLevelCount(WGPUTexture cSelf);\nextern uint32_t NativeTextureGetSampleCount(WGPUTexture cSelf);\nextern WGPUTextureUsageFlags NativeTextureGetUsage(WGPUTexture cSelf);\nextern uint32_t NativeTextureGetWidth(WGPUTexture cSelf);\nextern void NativeTextureSetLabel(WGPUTexture cSelf, char const * label);\nextern void NativeTextureReference(WGPUTexture cSelf);\nextern void NativeTextureRelease(WGPUTexture cSelf);\nextern void NativeTextureViewSetLabel(WGPUTextureView cSelf, char const * label);\nextern void NativeTextureViewReference(WGPUTextureView cSelf);\nextern void NativeTextureViewRelease(WGPUTextureView cSelf);\n\n}\n\nextern \"C\" {\n    using namespace dawn::native;\n\n    WGPUInstance wgpuCreateInstance (WGPUInstanceDescriptor const * descriptor) {\n        return NativeCreateInstance(descriptor);\n    }\n    WGPUProc wgpuGetProcAddress (WGPUDevice device, char const * procName) {\n        return NativeGetProcAddress(device, procName);\n    }\n\n    WGPUDevice wgpuAdapterCreateDevice(WGPUAdapter cSelf, WGPUDeviceDescriptor const * descriptor) {\n        return NativeAdapterCreateDevice(\n            cSelf, descriptor);\n    }\n    size_t wgpuAdapterEnumerateFeatures(WGPUAdapter cSelf, WGPUFeatureName * features) {\n        return NativeAdapterEnumerateFeatures(\n            cSelf, features);\n    }\n    WGPUInstance wgpuAdapterGetInstance(WGPUAdapter cSelf) {\n        return NativeAdapterGetInstance(\n            cSelf);\n    }\n    bool wgpuAdapterGetLimits(WGPUAdapter cSelf, WGPUSupportedLimits * limits) {\n        return NativeAdapterGetLimits(\n            cSelf, limits);\n    }\n    void wgpuAdapterGetProperties(WGPUAdapter cSelf, WGPUAdapterProperties * properties) {\n        return NativeAdapterGetProperties(\n            cSelf, properties);\n    }\n    bool wgpuAdapterHasFeature(WGPUAdapter cSelf, WGPUFeatureName feature) {\n        return NativeAdapterHasFeature(\n            cSelf, feature);\n    }\n    void wgpuAdapterRequestDevice(WGPUAdapter cSelf, WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata) {\n        return NativeAdapterRequestDevice(\n            cSelf, descriptor, callback, userdata);\n    }\n    void wgpuAdapterReference(WGPUAdapter cSelf) {\n        return NativeAdapterReference(\n            cSelf);\n    }\n    void wgpuAdapterRelease(WGPUAdapter cSelf) {\n        return NativeAdapterRelease(\n            cSelf);\n    }\n    void wgpuBindGroupSetLabel(WGPUBindGroup cSelf, char const * label) {\n        return NativeBindGroupSetLabel(\n            cSelf, label);\n    }\n    void wgpuBindGroupReference(WGPUBindGroup cSelf) {\n        return NativeBindGroupReference(\n            cSelf);\n    }\n    void wgpuBindGroupRelease(WGPUBindGroup cSelf) {\n        return NativeBindGroupRelease(\n            cSelf);\n    }\n    void wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout cSelf, char const * label) {\n        return NativeBindGroupLayoutSetLabel(\n            cSelf, label);\n    }\n    void wgpuBindGroupLayoutReference(WGPUBindGroupLayout cSelf) {\n        return NativeBindGroupLayoutReference(\n            cSelf);\n    }\n    void wgpuBindGroupLayoutRelease(WGPUBindGroupLayout cSelf) {\n        return NativeBindGroupLayoutRelease(\n            cSelf);\n    }\n    void wgpuBufferDestroy(WGPUBuffer cSelf) {\n        return NativeBufferDestroy(\n            cSelf);\n    }\n    void const * wgpuBufferGetConstMappedRange(WGPUBuffer cSelf, size_t offset, size_t size) {\n        return NativeBufferGetConstMappedRange(\n            cSelf, offset, size);\n    }\n    WGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer cSelf) {\n        return NativeBufferGetMapState(\n            cSelf);\n    }\n    void * wgpuBufferGetMappedRange(WGPUBuffer cSelf, size_t offset, size_t size) {\n        return NativeBufferGetMappedRange(\n            cSelf, offset, size);\n    }\n    uint64_t wgpuBufferGetSize(WGPUBuffer cSelf) {\n        return NativeBufferGetSize(\n            cSelf);\n    }\n    WGPUBufferUsageFlags wgpuBufferGetUsage(WGPUBuffer cSelf) {\n        return NativeBufferGetUsage(\n            cSelf);\n    }\n    void wgpuBufferMapAsync(WGPUBuffer cSelf, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata) {\n        return NativeBufferMapAsync(\n            cSelf, mode, offset, size, callback, userdata);\n    }\n    void wgpuBufferSetLabel(WGPUBuffer cSelf, char const * label) {\n        return NativeBufferSetLabel(\n            cSelf, label);\n    }\n    void wgpuBufferUnmap(WGPUBuffer cSelf) {\n        return NativeBufferUnmap(\n            cSelf);\n    }\n    void wgpuBufferReference(WGPUBuffer cSelf) {\n        return NativeBufferReference(\n            cSelf);\n    }\n    void wgpuBufferRelease(WGPUBuffer cSelf) {\n        return NativeBufferRelease(\n            cSelf);\n    }\n    void wgpuCommandBufferSetLabel(WGPUCommandBuffer cSelf, char const * label) {\n        return NativeCommandBufferSetLabel(\n            cSelf, label);\n    }\n    void wgpuCommandBufferReference(WGPUCommandBuffer cSelf) {\n        return NativeCommandBufferReference(\n            cSelf);\n    }\n    void wgpuCommandBufferRelease(WGPUCommandBuffer cSelf) {\n        return NativeCommandBufferRelease(\n            cSelf);\n    }\n    WGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder cSelf, WGPUComputePassDescriptor const * descriptor) {\n        return NativeCommandEncoderBeginComputePass(\n            cSelf, descriptor);\n    }\n    WGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder cSelf, WGPURenderPassDescriptor const * descriptor) {\n        return NativeCommandEncoderBeginRenderPass(\n            cSelf, descriptor);\n    }\n    void wgpuCommandEncoderClearBuffer(WGPUCommandEncoder cSelf, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n        return NativeCommandEncoderClearBuffer(\n            cSelf, buffer, offset, size);\n    }\n    void wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder cSelf, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size) {\n        return NativeCommandEncoderCopyBufferToBuffer(\n            cSelf, source, sourceOffset, destination, destinationOffset, size);\n    }\n    void wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder cSelf, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n        return NativeCommandEncoderCopyBufferToTexture(\n            cSelf, source, destination, copySize);\n    }\n    void wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder cSelf, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize) {\n        return NativeCommandEncoderCopyTextureToBuffer(\n            cSelf, source, destination, copySize);\n    }\n    void wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder cSelf, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n        return NativeCommandEncoderCopyTextureToTexture(\n            cSelf, source, destination, copySize);\n    }\n    WGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder cSelf, WGPUCommandBufferDescriptor const * descriptor) {\n        return NativeCommandEncoderFinish(\n            cSelf, descriptor);\n    }\n    void wgpuCommandEncoderInjectValidationError(WGPUCommandEncoder cSelf, char const * message) {\n        return NativeCommandEncoderInjectValidationError(\n            cSelf, message);\n    }\n    void wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder cSelf, char const * markerLabel) {\n        return NativeCommandEncoderInsertDebugMarker(\n            cSelf, markerLabel);\n    }\n    void wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder cSelf) {\n        return NativeCommandEncoderPopDebugGroup(\n            cSelf);\n    }\n    void wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder cSelf, char const * groupLabel) {\n        return NativeCommandEncoderPushDebugGroup(\n            cSelf, groupLabel);\n    }\n    void wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder cSelf, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset) {\n        return NativeCommandEncoderResolveQuerySet(\n            cSelf, querySet, firstQuery, queryCount, destination, destinationOffset);\n    }\n    void wgpuCommandEncoderSetLabel(WGPUCommandEncoder cSelf, char const * label) {\n        return NativeCommandEncoderSetLabel(\n            cSelf, label);\n    }\n    void wgpuCommandEncoderWriteBuffer(WGPUCommandEncoder cSelf, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size) {\n        return NativeCommandEncoderWriteBuffer(\n            cSelf, buffer, bufferOffset, data, size);\n    }\n    void wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder cSelf, WGPUQuerySet querySet, uint32_t queryIndex) {\n        return NativeCommandEncoderWriteTimestamp(\n            cSelf, querySet, queryIndex);\n    }\n    void wgpuCommandEncoderReference(WGPUCommandEncoder cSelf) {\n        return NativeCommandEncoderReference(\n            cSelf);\n    }\n    void wgpuCommandEncoderRelease(WGPUCommandEncoder cSelf) {\n        return NativeCommandEncoderRelease(\n            cSelf);\n    }\n    void wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder cSelf, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) {\n        return NativeComputePassEncoderDispatchWorkgroups(\n            cSelf, workgroupCountX, workgroupCountY, workgroupCountZ);\n    }\n    void wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder cSelf, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n        return NativeComputePassEncoderDispatchWorkgroupsIndirect(\n            cSelf, indirectBuffer, indirectOffset);\n    }\n    void wgpuComputePassEncoderEnd(WGPUComputePassEncoder cSelf) {\n        return NativeComputePassEncoderEnd(\n            cSelf);\n    }\n    void wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder cSelf, char const * markerLabel) {\n        return NativeComputePassEncoderInsertDebugMarker(\n            cSelf, markerLabel);\n    }\n    void wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder cSelf) {\n        return NativeComputePassEncoderPopDebugGroup(\n            cSelf);\n    }\n    void wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder cSelf, char const * groupLabel) {\n        return NativeComputePassEncoderPushDebugGroup(\n            cSelf, groupLabel);\n    }\n    void wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder cSelf, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n        return NativeComputePassEncoderSetBindGroup(\n            cSelf, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n    }\n    void wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder cSelf, char const * label) {\n        return NativeComputePassEncoderSetLabel(\n            cSelf, label);\n    }\n    void wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder cSelf, WGPUComputePipeline pipeline) {\n        return NativeComputePassEncoderSetPipeline(\n            cSelf, pipeline);\n    }\n    void wgpuComputePassEncoderWriteTimestamp(WGPUComputePassEncoder cSelf, WGPUQuerySet querySet, uint32_t queryIndex) {\n        return NativeComputePassEncoderWriteTimestamp(\n            cSelf, querySet, queryIndex);\n    }\n    void wgpuComputePassEncoderReference(WGPUComputePassEncoder cSelf) {\n        return NativeComputePassEncoderReference(\n            cSelf);\n    }\n    void wgpuComputePassEncoderRelease(WGPUComputePassEncoder cSelf) {\n        return NativeComputePassEncoderRelease(\n            cSelf);\n    }\n    WGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline cSelf, uint32_t groupIndex) {\n        return NativeComputePipelineGetBindGroupLayout(\n            cSelf, groupIndex);\n    }\n    void wgpuComputePipelineSetLabel(WGPUComputePipeline cSelf, char const * label) {\n        return NativeComputePipelineSetLabel(\n            cSelf, label);\n    }\n    void wgpuComputePipelineReference(WGPUComputePipeline cSelf) {\n        return NativeComputePipelineReference(\n            cSelf);\n    }\n    void wgpuComputePipelineRelease(WGPUComputePipeline cSelf) {\n        return NativeComputePipelineRelease(\n            cSelf);\n    }\n    WGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice cSelf, WGPUBindGroupDescriptor const * descriptor) {\n        return NativeDeviceCreateBindGroup(\n            cSelf, descriptor);\n    }\n    WGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice cSelf, WGPUBindGroupLayoutDescriptor const * descriptor) {\n        return NativeDeviceCreateBindGroupLayout(\n            cSelf, descriptor);\n    }\n    WGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice cSelf, WGPUBufferDescriptor const * descriptor) {\n        return NativeDeviceCreateBuffer(\n            cSelf, descriptor);\n    }\n    WGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice cSelf, WGPUCommandEncoderDescriptor const * descriptor) {\n        return NativeDeviceCreateCommandEncoder(\n            cSelf, descriptor);\n    }\n    WGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice cSelf, WGPUComputePipelineDescriptor const * descriptor) {\n        return NativeDeviceCreateComputePipeline(\n            cSelf, descriptor);\n    }\n    void wgpuDeviceCreateComputePipelineAsync(WGPUDevice cSelf, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata) {\n        return NativeDeviceCreateComputePipelineAsync(\n            cSelf, descriptor, callback, userdata);\n    }\n    WGPUBuffer wgpuDeviceCreateErrorBuffer(WGPUDevice cSelf, WGPUBufferDescriptor const * descriptor) {\n        return NativeDeviceCreateErrorBuffer(\n            cSelf, descriptor);\n    }\n    WGPUExternalTexture wgpuDeviceCreateErrorExternalTexture(WGPUDevice cSelf) {\n        return NativeDeviceCreateErrorExternalTexture(\n            cSelf);\n    }\n    WGPUShaderModule wgpuDeviceCreateErrorShaderModule(WGPUDevice cSelf, WGPUShaderModuleDescriptor const * descriptor, char const * errorMessage) {\n        return NativeDeviceCreateErrorShaderModule(\n            cSelf, descriptor, errorMessage);\n    }\n    WGPUTexture wgpuDeviceCreateErrorTexture(WGPUDevice cSelf, WGPUTextureDescriptor const * descriptor) {\n        return NativeDeviceCreateErrorTexture(\n            cSelf, descriptor);\n    }\n    WGPUExternalTexture wgpuDeviceCreateExternalTexture(WGPUDevice cSelf, WGPUExternalTextureDescriptor const * externalTextureDescriptor) {\n        return NativeDeviceCreateExternalTexture(\n            cSelf, externalTextureDescriptor);\n    }\n    WGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice cSelf, WGPUPipelineLayoutDescriptor const * descriptor) {\n        return NativeDeviceCreatePipelineLayout(\n            cSelf, descriptor);\n    }\n    WGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice cSelf, WGPUQuerySetDescriptor const * descriptor) {\n        return NativeDeviceCreateQuerySet(\n            cSelf, descriptor);\n    }\n    WGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice cSelf, WGPURenderBundleEncoderDescriptor const * descriptor) {\n        return NativeDeviceCreateRenderBundleEncoder(\n            cSelf, descriptor);\n    }\n    WGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice cSelf, WGPURenderPipelineDescriptor const * descriptor) {\n        return NativeDeviceCreateRenderPipeline(\n            cSelf, descriptor);\n    }\n    void wgpuDeviceCreateRenderPipelineAsync(WGPUDevice cSelf, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata) {\n        return NativeDeviceCreateRenderPipelineAsync(\n            cSelf, descriptor, callback, userdata);\n    }\n    WGPUSampler wgpuDeviceCreateSampler(WGPUDevice cSelf, WGPUSamplerDescriptor const * descriptor) {\n        return NativeDeviceCreateSampler(\n            cSelf, descriptor);\n    }\n    WGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice cSelf, WGPUShaderModuleDescriptor const * descriptor) {\n        return NativeDeviceCreateShaderModule(\n            cSelf, descriptor);\n    }\n    WGPUSwapChain wgpuDeviceCreateSwapChain(WGPUDevice cSelf, WGPUSurface surface, WGPUSwapChainDescriptor const * descriptor) {\n        return NativeDeviceCreateSwapChain(\n            cSelf, surface, descriptor);\n    }\n    WGPUTexture wgpuDeviceCreateTexture(WGPUDevice cSelf, WGPUTextureDescriptor const * descriptor) {\n        return NativeDeviceCreateTexture(\n            cSelf, descriptor);\n    }\n    void wgpuDeviceDestroy(WGPUDevice cSelf) {\n        return NativeDeviceDestroy(\n            cSelf);\n    }\n    size_t wgpuDeviceEnumerateFeatures(WGPUDevice cSelf, WGPUFeatureName * features) {\n        return NativeDeviceEnumerateFeatures(\n            cSelf, features);\n    }\n    void wgpuDeviceForceLoss(WGPUDevice cSelf, WGPUDeviceLostReason type, char const * message) {\n        return NativeDeviceForceLoss(\n            cSelf, type, message);\n    }\n    WGPUAdapter wgpuDeviceGetAdapter(WGPUDevice cSelf) {\n        return NativeDeviceGetAdapter(\n            cSelf);\n    }\n    bool wgpuDeviceGetLimits(WGPUDevice cSelf, WGPUSupportedLimits * limits) {\n        return NativeDeviceGetLimits(\n            cSelf, limits);\n    }\n    WGPUQueue wgpuDeviceGetQueue(WGPUDevice cSelf) {\n        return NativeDeviceGetQueue(\n            cSelf);\n    }\n    WGPUTextureUsageFlags wgpuDeviceGetSupportedSurfaceUsage(WGPUDevice cSelf, WGPUSurface surface) {\n        return NativeDeviceGetSupportedSurfaceUsage(\n            cSelf, surface);\n    }\n    bool wgpuDeviceHasFeature(WGPUDevice cSelf, WGPUFeatureName feature) {\n        return NativeDeviceHasFeature(\n            cSelf, feature);\n    }\n    void wgpuDeviceInjectError(WGPUDevice cSelf, WGPUErrorType type, char const * message) {\n        return NativeDeviceInjectError(\n            cSelf, type, message);\n    }\n    void wgpuDevicePopErrorScope(WGPUDevice cSelf, WGPUErrorCallback callback, void * userdata) {\n        return NativeDevicePopErrorScope(\n            cSelf, callback, userdata);\n    }\n    void wgpuDevicePushErrorScope(WGPUDevice cSelf, WGPUErrorFilter filter) {\n        return NativeDevicePushErrorScope(\n            cSelf, filter);\n    }\n    void wgpuDeviceSetDeviceLostCallback(WGPUDevice cSelf, WGPUDeviceLostCallback callback, void * userdata) {\n        return NativeDeviceSetDeviceLostCallback(\n            cSelf, callback, userdata);\n    }\n    void wgpuDeviceSetLabel(WGPUDevice cSelf, char const * label) {\n        return NativeDeviceSetLabel(\n            cSelf, label);\n    }\n    void wgpuDeviceSetLoggingCallback(WGPUDevice cSelf, WGPULoggingCallback callback, void * userdata) {\n        return NativeDeviceSetLoggingCallback(\n            cSelf, callback, userdata);\n    }\n    void wgpuDeviceSetUncapturedErrorCallback(WGPUDevice cSelf, WGPUErrorCallback callback, void * userdata) {\n        return NativeDeviceSetUncapturedErrorCallback(\n            cSelf, callback, userdata);\n    }\n    void wgpuDeviceTick(WGPUDevice cSelf) {\n        return NativeDeviceTick(\n            cSelf);\n    }\n    void wgpuDeviceValidateTextureDescriptor(WGPUDevice cSelf, WGPUTextureDescriptor const * descriptor) {\n        return NativeDeviceValidateTextureDescriptor(\n            cSelf, descriptor);\n    }\n    void wgpuDeviceReference(WGPUDevice cSelf) {\n        return NativeDeviceReference(\n            cSelf);\n    }\n    void wgpuDeviceRelease(WGPUDevice cSelf) {\n        return NativeDeviceRelease(\n            cSelf);\n    }\n    void wgpuExternalTextureDestroy(WGPUExternalTexture cSelf) {\n        return NativeExternalTextureDestroy(\n            cSelf);\n    }\n    void wgpuExternalTextureExpire(WGPUExternalTexture cSelf) {\n        return NativeExternalTextureExpire(\n            cSelf);\n    }\n    void wgpuExternalTextureRefresh(WGPUExternalTexture cSelf) {\n        return NativeExternalTextureRefresh(\n            cSelf);\n    }\n    void wgpuExternalTextureSetLabel(WGPUExternalTexture cSelf, char const * label) {\n        return NativeExternalTextureSetLabel(\n            cSelf, label);\n    }\n    void wgpuExternalTextureReference(WGPUExternalTexture cSelf) {\n        return NativeExternalTextureReference(\n            cSelf);\n    }\n    void wgpuExternalTextureRelease(WGPUExternalTexture cSelf) {\n        return NativeExternalTextureRelease(\n            cSelf);\n    }\n    WGPUSurface wgpuInstanceCreateSurface(WGPUInstance cSelf, WGPUSurfaceDescriptor const * descriptor) {\n        return NativeInstanceCreateSurface(\n            cSelf, descriptor);\n    }\n    void wgpuInstanceProcessEvents(WGPUInstance cSelf) {\n        return NativeInstanceProcessEvents(\n            cSelf);\n    }\n    void wgpuInstanceRequestAdapter(WGPUInstance cSelf, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata) {\n        return NativeInstanceRequestAdapter(\n            cSelf, options, callback, userdata);\n    }\n    void wgpuInstanceReference(WGPUInstance cSelf) {\n        return NativeInstanceReference(\n            cSelf);\n    }\n    void wgpuInstanceRelease(WGPUInstance cSelf) {\n        return NativeInstanceRelease(\n            cSelf);\n    }\n    void wgpuPipelineLayoutSetLabel(WGPUPipelineLayout cSelf, char const * label) {\n        return NativePipelineLayoutSetLabel(\n            cSelf, label);\n    }\n    void wgpuPipelineLayoutReference(WGPUPipelineLayout cSelf) {\n        return NativePipelineLayoutReference(\n            cSelf);\n    }\n    void wgpuPipelineLayoutRelease(WGPUPipelineLayout cSelf) {\n        return NativePipelineLayoutRelease(\n            cSelf);\n    }\n    void wgpuQuerySetDestroy(WGPUQuerySet cSelf) {\n        return NativeQuerySetDestroy(\n            cSelf);\n    }\n    uint32_t wgpuQuerySetGetCount(WGPUQuerySet cSelf) {\n        return NativeQuerySetGetCount(\n            cSelf);\n    }\n    WGPUQueryType wgpuQuerySetGetType(WGPUQuerySet cSelf) {\n        return NativeQuerySetGetType(\n            cSelf);\n    }\n    void wgpuQuerySetSetLabel(WGPUQuerySet cSelf, char const * label) {\n        return NativeQuerySetSetLabel(\n            cSelf, label);\n    }\n    void wgpuQuerySetReference(WGPUQuerySet cSelf) {\n        return NativeQuerySetReference(\n            cSelf);\n    }\n    void wgpuQuerySetRelease(WGPUQuerySet cSelf) {\n        return NativeQuerySetRelease(\n            cSelf);\n    }\n    void wgpuQueueCopyExternalTextureForBrowser(WGPUQueue cSelf, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) {\n        return NativeQueueCopyExternalTextureForBrowser(\n            cSelf, source, destination, copySize, options);\n    }\n    void wgpuQueueCopyTextureForBrowser(WGPUQueue cSelf, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) {\n        return NativeQueueCopyTextureForBrowser(\n            cSelf, source, destination, copySize, options);\n    }\n    void wgpuQueueOnSubmittedWorkDone(WGPUQueue cSelf, uint64_t signalValue, WGPUQueueWorkDoneCallback callback, void * userdata) {\n        return NativeQueueOnSubmittedWorkDone(\n            cSelf, signalValue, callback, userdata);\n    }\n    void wgpuQueueSetLabel(WGPUQueue cSelf, char const * label) {\n        return NativeQueueSetLabel(\n            cSelf, label);\n    }\n    void wgpuQueueSubmit(WGPUQueue cSelf, size_t commandCount, WGPUCommandBuffer const * commands) {\n        return NativeQueueSubmit(\n            cSelf, commandCount, commands);\n    }\n    void wgpuQueueWriteBuffer(WGPUQueue cSelf, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size) {\n        return NativeQueueWriteBuffer(\n            cSelf, buffer, bufferOffset, data, size);\n    }\n    void wgpuQueueWriteTexture(WGPUQueue cSelf, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize) {\n        return NativeQueueWriteTexture(\n            cSelf, destination, data, dataSize, dataLayout, writeSize);\n    }\n    void wgpuQueueReference(WGPUQueue cSelf) {\n        return NativeQueueReference(\n            cSelf);\n    }\n    void wgpuQueueRelease(WGPUQueue cSelf) {\n        return NativeQueueRelease(\n            cSelf);\n    }\n    void wgpuRenderBundleSetLabel(WGPURenderBundle cSelf, char const * label) {\n        return NativeRenderBundleSetLabel(\n            cSelf, label);\n    }\n    void wgpuRenderBundleReference(WGPURenderBundle cSelf) {\n        return NativeRenderBundleReference(\n            cSelf);\n    }\n    void wgpuRenderBundleRelease(WGPURenderBundle cSelf) {\n        return NativeRenderBundleRelease(\n            cSelf);\n    }\n    void wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder cSelf, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n        return NativeRenderBundleEncoderDraw(\n            cSelf, vertexCount, instanceCount, firstVertex, firstInstance);\n    }\n    void wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder cSelf, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n        return NativeRenderBundleEncoderDrawIndexed(\n            cSelf, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n    }\n    void wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder cSelf, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n        return NativeRenderBundleEncoderDrawIndexedIndirect(\n            cSelf, indirectBuffer, indirectOffset);\n    }\n    void wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder cSelf, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n        return NativeRenderBundleEncoderDrawIndirect(\n            cSelf, indirectBuffer, indirectOffset);\n    }\n    WGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder cSelf, WGPURenderBundleDescriptor const * descriptor) {\n        return NativeRenderBundleEncoderFinish(\n            cSelf, descriptor);\n    }\n    void wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder cSelf, char const * markerLabel) {\n        return NativeRenderBundleEncoderInsertDebugMarker(\n            cSelf, markerLabel);\n    }\n    void wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder cSelf) {\n        return NativeRenderBundleEncoderPopDebugGroup(\n            cSelf);\n    }\n    void wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder cSelf, char const * groupLabel) {\n        return NativeRenderBundleEncoderPushDebugGroup(\n            cSelf, groupLabel);\n    }\n    void wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder cSelf, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n        return NativeRenderBundleEncoderSetBindGroup(\n            cSelf, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n    }\n    void wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder cSelf, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {\n        return NativeRenderBundleEncoderSetIndexBuffer(\n            cSelf, buffer, format, offset, size);\n    }\n    void wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder cSelf, char const * label) {\n        return NativeRenderBundleEncoderSetLabel(\n            cSelf, label);\n    }\n    void wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder cSelf, WGPURenderPipeline pipeline) {\n        return NativeRenderBundleEncoderSetPipeline(\n            cSelf, pipeline);\n    }\n    void wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder cSelf, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n        return NativeRenderBundleEncoderSetVertexBuffer(\n            cSelf, slot, buffer, offset, size);\n    }\n    void wgpuRenderBundleEncoderReference(WGPURenderBundleEncoder cSelf) {\n        return NativeRenderBundleEncoderReference(\n            cSelf);\n    }\n    void wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder cSelf) {\n        return NativeRenderBundleEncoderRelease(\n            cSelf);\n    }\n    void wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder cSelf, uint32_t queryIndex) {\n        return NativeRenderPassEncoderBeginOcclusionQuery(\n            cSelf, queryIndex);\n    }\n    void wgpuRenderPassEncoderDraw(WGPURenderPassEncoder cSelf, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n        return NativeRenderPassEncoderDraw(\n            cSelf, vertexCount, instanceCount, firstVertex, firstInstance);\n    }\n    void wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder cSelf, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n        return NativeRenderPassEncoderDrawIndexed(\n            cSelf, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n    }\n    void wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder cSelf, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n        return NativeRenderPassEncoderDrawIndexedIndirect(\n            cSelf, indirectBuffer, indirectOffset);\n    }\n    void wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder cSelf, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n        return NativeRenderPassEncoderDrawIndirect(\n            cSelf, indirectBuffer, indirectOffset);\n    }\n    void wgpuRenderPassEncoderEnd(WGPURenderPassEncoder cSelf) {\n        return NativeRenderPassEncoderEnd(\n            cSelf);\n    }\n    void wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder cSelf) {\n        return NativeRenderPassEncoderEndOcclusionQuery(\n            cSelf);\n    }\n    void wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder cSelf, size_t bundleCount, WGPURenderBundle const * bundles) {\n        return NativeRenderPassEncoderExecuteBundles(\n            cSelf, bundleCount, bundles);\n    }\n    void wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder cSelf, char const * markerLabel) {\n        return NativeRenderPassEncoderInsertDebugMarker(\n            cSelf, markerLabel);\n    }\n    void wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder cSelf) {\n        return NativeRenderPassEncoderPopDebugGroup(\n            cSelf);\n    }\n    void wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder cSelf, char const * groupLabel) {\n        return NativeRenderPassEncoderPushDebugGroup(\n            cSelf, groupLabel);\n    }\n    void wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder cSelf, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n        return NativeRenderPassEncoderSetBindGroup(\n            cSelf, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n    }\n    void wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder cSelf, WGPUColor const * color) {\n        return NativeRenderPassEncoderSetBlendConstant(\n            cSelf, color);\n    }\n    void wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder cSelf, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {\n        return NativeRenderPassEncoderSetIndexBuffer(\n            cSelf, buffer, format, offset, size);\n    }\n    void wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder cSelf, char const * label) {\n        return NativeRenderPassEncoderSetLabel(\n            cSelf, label);\n    }\n    void wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder cSelf, WGPURenderPipeline pipeline) {\n        return NativeRenderPassEncoderSetPipeline(\n            cSelf, pipeline);\n    }\n    void wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder cSelf, uint32_t x, uint32_t y, uint32_t width, uint32_t height) {\n        return NativeRenderPassEncoderSetScissorRect(\n            cSelf, x, y, width, height);\n    }\n    void wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder cSelf, uint32_t reference) {\n        return NativeRenderPassEncoderSetStencilReference(\n            cSelf, reference);\n    }\n    void wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder cSelf, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n        return NativeRenderPassEncoderSetVertexBuffer(\n            cSelf, slot, buffer, offset, size);\n    }\n    void wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder cSelf, float x, float y, float width, float height, float minDepth, float maxDepth) {\n        return NativeRenderPassEncoderSetViewport(\n            cSelf, x, y, width, height, minDepth, maxDepth);\n    }\n    void wgpuRenderPassEncoderWriteTimestamp(WGPURenderPassEncoder cSelf, WGPUQuerySet querySet, uint32_t queryIndex) {\n        return NativeRenderPassEncoderWriteTimestamp(\n            cSelf, querySet, queryIndex);\n    }\n    void wgpuRenderPassEncoderReference(WGPURenderPassEncoder cSelf) {\n        return NativeRenderPassEncoderReference(\n            cSelf);\n    }\n    void wgpuRenderPassEncoderRelease(WGPURenderPassEncoder cSelf) {\n        return NativeRenderPassEncoderRelease(\n            cSelf);\n    }\n    WGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline cSelf, uint32_t groupIndex) {\n        return NativeRenderPipelineGetBindGroupLayout(\n            cSelf, groupIndex);\n    }\n    void wgpuRenderPipelineSetLabel(WGPURenderPipeline cSelf, char const * label) {\n        return NativeRenderPipelineSetLabel(\n            cSelf, label);\n    }\n    void wgpuRenderPipelineReference(WGPURenderPipeline cSelf) {\n        return NativeRenderPipelineReference(\n            cSelf);\n    }\n    void wgpuRenderPipelineRelease(WGPURenderPipeline cSelf) {\n        return NativeRenderPipelineRelease(\n            cSelf);\n    }\n    void wgpuSamplerSetLabel(WGPUSampler cSelf, char const * label) {\n        return NativeSamplerSetLabel(\n            cSelf, label);\n    }\n    void wgpuSamplerReference(WGPUSampler cSelf) {\n        return NativeSamplerReference(\n            cSelf);\n    }\n    void wgpuSamplerRelease(WGPUSampler cSelf) {\n        return NativeSamplerRelease(\n            cSelf);\n    }\n    void wgpuShaderModuleGetCompilationInfo(WGPUShaderModule cSelf, WGPUCompilationInfoCallback callback, void * userdata) {\n        return NativeShaderModuleGetCompilationInfo(\n            cSelf, callback, userdata);\n    }\n    void wgpuShaderModuleSetLabel(WGPUShaderModule cSelf, char const * label) {\n        return NativeShaderModuleSetLabel(\n            cSelf, label);\n    }\n    void wgpuShaderModuleReference(WGPUShaderModule cSelf) {\n        return NativeShaderModuleReference(\n            cSelf);\n    }\n    void wgpuShaderModuleRelease(WGPUShaderModule cSelf) {\n        return NativeShaderModuleRelease(\n            cSelf);\n    }\n    void wgpuSurfaceReference(WGPUSurface cSelf) {\n        return NativeSurfaceReference(\n            cSelf);\n    }\n    void wgpuSurfaceRelease(WGPUSurface cSelf) {\n        return NativeSurfaceRelease(\n            cSelf);\n    }\n    WGPUTexture wgpuSwapChainGetCurrentTexture(WGPUSwapChain cSelf) {\n        return NativeSwapChainGetCurrentTexture(\n            cSelf);\n    }\n    WGPUTextureView wgpuSwapChainGetCurrentTextureView(WGPUSwapChain cSelf) {\n        return NativeSwapChainGetCurrentTextureView(\n            cSelf);\n    }\n    void wgpuSwapChainPresent(WGPUSwapChain cSelf) {\n        return NativeSwapChainPresent(\n            cSelf);\n    }\n    void wgpuSwapChainReference(WGPUSwapChain cSelf) {\n        return NativeSwapChainReference(\n            cSelf);\n    }\n    void wgpuSwapChainRelease(WGPUSwapChain cSelf) {\n        return NativeSwapChainRelease(\n            cSelf);\n    }\n    WGPUTextureView wgpuTextureCreateView(WGPUTexture cSelf, WGPUTextureViewDescriptor const * descriptor) {\n        return NativeTextureCreateView(\n            cSelf, descriptor);\n    }\n    void wgpuTextureDestroy(WGPUTexture cSelf) {\n        return NativeTextureDestroy(\n            cSelf);\n    }\n    uint32_t wgpuTextureGetDepthOrArrayLayers(WGPUTexture cSelf) {\n        return NativeTextureGetDepthOrArrayLayers(\n            cSelf);\n    }\n    WGPUTextureDimension wgpuTextureGetDimension(WGPUTexture cSelf) {\n        return NativeTextureGetDimension(\n            cSelf);\n    }\n    WGPUTextureFormat wgpuTextureGetFormat(WGPUTexture cSelf) {\n        return NativeTextureGetFormat(\n            cSelf);\n    }\n    uint32_t wgpuTextureGetHeight(WGPUTexture cSelf) {\n        return NativeTextureGetHeight(\n            cSelf);\n    }\n    uint32_t wgpuTextureGetMipLevelCount(WGPUTexture cSelf) {\n        return NativeTextureGetMipLevelCount(\n            cSelf);\n    }\n    uint32_t wgpuTextureGetSampleCount(WGPUTexture cSelf) {\n        return NativeTextureGetSampleCount(\n            cSelf);\n    }\n    WGPUTextureUsageFlags wgpuTextureGetUsage(WGPUTexture cSelf) {\n        return NativeTextureGetUsage(\n            cSelf);\n    }\n    uint32_t wgpuTextureGetWidth(WGPUTexture cSelf) {\n        return NativeTextureGetWidth(\n            cSelf);\n    }\n    void wgpuTextureSetLabel(WGPUTexture cSelf, char const * label) {\n        return NativeTextureSetLabel(\n            cSelf, label);\n    }\n    void wgpuTextureReference(WGPUTexture cSelf) {\n        return NativeTextureReference(\n            cSelf);\n    }\n    void wgpuTextureRelease(WGPUTexture cSelf) {\n        return NativeTextureRelease(\n            cSelf);\n    }\n    void wgpuTextureViewSetLabel(WGPUTextureView cSelf, char const * label) {\n        return NativeTextureViewSetLabel(\n            cSelf, label);\n    }\n    void wgpuTextureViewReference(WGPUTextureView cSelf) {\n        return NativeTextureViewReference(\n            cSelf);\n    }\n    void wgpuTextureViewRelease(WGPUTextureView cSelf) {\n        return NativeTextureViewRelease(\n            cSelf);\n    }\n}\n"}