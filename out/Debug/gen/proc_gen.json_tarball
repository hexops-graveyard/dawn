{"src/dawn/dawn_proc.c": "\n#include \"dawn/dawn_proc.h\"\n\nstatic DawnProcTable procs;\n\nstatic DawnProcTable nullProcs;\n\nvoid dawnProcSetProcs(const DawnProcTable* procs_) {\n    if (procs_) {\n        procs = *procs_;\n    } else {\n        procs = nullProcs;\n    }\n}\n\nWGPUInstance wgpuCreateInstance(WGPUInstanceDescriptor const * descriptor) {\nreturn     procs.createInstance(descriptor);\n}\nWGPUProc wgpuGetProcAddress(WGPUDevice device, char const * procName) {\nreturn     procs.getProcAddress(device, procName);\n}\n\nWGPUDevice wgpuAdapterCreateDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor) {\nreturn     procs.adapterCreateDevice(adapter, descriptor);\n}\nsize_t wgpuAdapterEnumerateFeatures(WGPUAdapter adapter, WGPUFeatureName * features) {\nreturn     procs.adapterEnumerateFeatures(adapter, features);\n}\nWGPUInstance wgpuAdapterGetInstance(WGPUAdapter adapter) {\nreturn     procs.adapterGetInstance(adapter);\n}\nbool wgpuAdapterGetLimits(WGPUAdapter adapter, WGPUSupportedLimits * limits) {\nreturn     procs.adapterGetLimits(adapter, limits);\n}\nvoid wgpuAdapterGetProperties(WGPUAdapter adapter, WGPUAdapterProperties * properties) {\n    procs.adapterGetProperties(adapter, properties);\n}\nbool wgpuAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature) {\nreturn     procs.adapterHasFeature(adapter, feature);\n}\nvoid wgpuAdapterRequestDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata) {\n    procs.adapterRequestDevice(adapter, descriptor, callback, userdata);\n}\nvoid wgpuAdapterReference(WGPUAdapter adapter) {\n    procs.adapterReference(adapter);\n}\nvoid wgpuAdapterRelease(WGPUAdapter adapter) {\n    procs.adapterRelease(adapter);\n}\n\nvoid wgpuBindGroupSetLabel(WGPUBindGroup bindGroup, char const * label) {\n    procs.bindGroupSetLabel(bindGroup, label);\n}\nvoid wgpuBindGroupReference(WGPUBindGroup bindGroup) {\n    procs.bindGroupReference(bindGroup);\n}\nvoid wgpuBindGroupRelease(WGPUBindGroup bindGroup) {\n    procs.bindGroupRelease(bindGroup);\n}\n\nvoid wgpuBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, char const * label) {\n    procs.bindGroupLayoutSetLabel(bindGroupLayout, label);\n}\nvoid wgpuBindGroupLayoutReference(WGPUBindGroupLayout bindGroupLayout) {\n    procs.bindGroupLayoutReference(bindGroupLayout);\n}\nvoid wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout) {\n    procs.bindGroupLayoutRelease(bindGroupLayout);\n}\n\nvoid wgpuBufferDestroy(WGPUBuffer buffer) {\n    procs.bufferDestroy(buffer);\n}\nvoid const * wgpuBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size) {\nreturn     procs.bufferGetConstMappedRange(buffer, offset, size);\n}\nWGPUBufferMapState wgpuBufferGetMapState(WGPUBuffer buffer) {\nreturn     procs.bufferGetMapState(buffer);\n}\nvoid * wgpuBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size) {\nreturn     procs.bufferGetMappedRange(buffer, offset, size);\n}\nuint64_t wgpuBufferGetSize(WGPUBuffer buffer) {\nreturn     procs.bufferGetSize(buffer);\n}\nWGPUBufferUsageFlags wgpuBufferGetUsage(WGPUBuffer buffer) {\nreturn     procs.bufferGetUsage(buffer);\n}\nvoid wgpuBufferMapAsync(WGPUBuffer buffer, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata) {\n    procs.bufferMapAsync(buffer, mode, offset, size, callback, userdata);\n}\nvoid wgpuBufferSetLabel(WGPUBuffer buffer, char const * label) {\n    procs.bufferSetLabel(buffer, label);\n}\nvoid wgpuBufferUnmap(WGPUBuffer buffer) {\n    procs.bufferUnmap(buffer);\n}\nvoid wgpuBufferReference(WGPUBuffer buffer) {\n    procs.bufferReference(buffer);\n}\nvoid wgpuBufferRelease(WGPUBuffer buffer) {\n    procs.bufferRelease(buffer);\n}\n\nvoid wgpuCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, char const * label) {\n    procs.commandBufferSetLabel(commandBuffer, label);\n}\nvoid wgpuCommandBufferReference(WGPUCommandBuffer commandBuffer) {\n    procs.commandBufferReference(commandBuffer);\n}\nvoid wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer) {\n    procs.commandBufferRelease(commandBuffer);\n}\n\nWGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor const * descriptor) {\nreturn     procs.commandEncoderBeginComputePass(commandEncoder, descriptor);\n}\nWGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor) {\nreturn     procs.commandEncoderBeginRenderPass(commandEncoder, descriptor);\n}\nvoid wgpuCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    procs.commandEncoderClearBuffer(commandEncoder, buffer, offset, size);\n}\nvoid wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size) {\n    procs.commandEncoderCopyBufferToBuffer(commandEncoder, source, sourceOffset, destination, destinationOffset, size);\n}\nvoid wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n    procs.commandEncoderCopyBufferToTexture(commandEncoder, source, destination, copySize);\n}\nvoid wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize) {\n    procs.commandEncoderCopyTextureToBuffer(commandEncoder, source, destination, copySize);\n}\nvoid wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n    procs.commandEncoderCopyTextureToTexture(commandEncoder, source, destination, copySize);\n}\nvoid wgpuCommandEncoderCopyTextureToTextureInternal(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n    procs.commandEncoderCopyTextureToTextureInternal(commandEncoder, source, destination, copySize);\n}\nWGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor const * descriptor) {\nreturn     procs.commandEncoderFinish(commandEncoder, descriptor);\n}\nvoid wgpuCommandEncoderInjectValidationError(WGPUCommandEncoder commandEncoder, char const * message) {\n    procs.commandEncoderInjectValidationError(commandEncoder, message);\n}\nvoid wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, char const * markerLabel) {\n    procs.commandEncoderInsertDebugMarker(commandEncoder, markerLabel);\n}\nvoid wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder) {\n    procs.commandEncoderPopDebugGroup(commandEncoder);\n}\nvoid wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, char const * groupLabel) {\n    procs.commandEncoderPushDebugGroup(commandEncoder, groupLabel);\n}\nvoid wgpuCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset) {\n    procs.commandEncoderResolveQuerySet(commandEncoder, querySet, firstQuery, queryCount, destination, destinationOffset);\n}\nvoid wgpuCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, char const * label) {\n    procs.commandEncoderSetLabel(commandEncoder, label);\n}\nvoid wgpuCommandEncoderWriteBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size) {\n    procs.commandEncoderWriteBuffer(commandEncoder, buffer, bufferOffset, data, size);\n}\nvoid wgpuCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {\n    procs.commandEncoderWriteTimestamp(commandEncoder, querySet, queryIndex);\n}\nvoid wgpuCommandEncoderReference(WGPUCommandEncoder commandEncoder) {\n    procs.commandEncoderReference(commandEncoder);\n}\nvoid wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder) {\n    procs.commandEncoderRelease(commandEncoder);\n}\n\nvoid wgpuComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) {\n    procs.computePassEncoderDispatchWorkgroups(computePassEncoder, workgroupCountX, workgroupCountY, workgroupCountZ);\n}\nvoid wgpuComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.computePassEncoderDispatchWorkgroupsIndirect(computePassEncoder, indirectBuffer, indirectOffset);\n}\nvoid wgpuComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder) {\n    procs.computePassEncoderEnd(computePassEncoder);\n}\nvoid wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, char const * markerLabel) {\n    procs.computePassEncoderInsertDebugMarker(computePassEncoder, markerLabel);\n}\nvoid wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder) {\n    procs.computePassEncoderPopDebugGroup(computePassEncoder);\n}\nvoid wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, char const * groupLabel) {\n    procs.computePassEncoderPushDebugGroup(computePassEncoder, groupLabel);\n}\nvoid wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    procs.computePassEncoderSetBindGroup(computePassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nvoid wgpuComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, char const * label) {\n    procs.computePassEncoderSetLabel(computePassEncoder, label);\n}\nvoid wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline) {\n    procs.computePassEncoderSetPipeline(computePassEncoder, pipeline);\n}\nvoid wgpuComputePassEncoderWriteTimestamp(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {\n    procs.computePassEncoderWriteTimestamp(computePassEncoder, querySet, queryIndex);\n}\nvoid wgpuComputePassEncoderReference(WGPUComputePassEncoder computePassEncoder) {\n    procs.computePassEncoderReference(computePassEncoder);\n}\nvoid wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder) {\n    procs.computePassEncoderRelease(computePassEncoder);\n}\n\nWGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex) {\nreturn     procs.computePipelineGetBindGroupLayout(computePipeline, groupIndex);\n}\nvoid wgpuComputePipelineSetLabel(WGPUComputePipeline computePipeline, char const * label) {\n    procs.computePipelineSetLabel(computePipeline, label);\n}\nvoid wgpuComputePipelineReference(WGPUComputePipeline computePipeline) {\n    procs.computePipelineReference(computePipeline);\n}\nvoid wgpuComputePipelineRelease(WGPUComputePipeline computePipeline) {\n    procs.computePipelineRelease(computePipeline);\n}\n\nWGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor) {\nreturn     procs.deviceCreateBindGroup(device, descriptor);\n}\nWGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor) {\nreturn     procs.deviceCreateBindGroupLayout(device, descriptor);\n}\nWGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) {\nreturn     procs.deviceCreateBuffer(device, descriptor);\n}\nWGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, WGPUCommandEncoderDescriptor const * descriptor) {\nreturn     procs.deviceCreateCommandEncoder(device, descriptor);\n}\nWGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor) {\nreturn     procs.deviceCreateComputePipeline(device, descriptor);\n}\nvoid wgpuDeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata) {\n    procs.deviceCreateComputePipelineAsync(device, descriptor, callback, userdata);\n}\nWGPUBuffer wgpuDeviceCreateErrorBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) {\nreturn     procs.deviceCreateErrorBuffer(device, descriptor);\n}\nWGPUExternalTexture wgpuDeviceCreateErrorExternalTexture(WGPUDevice device) {\nreturn     procs.deviceCreateErrorExternalTexture(device);\n}\nWGPUShaderModule wgpuDeviceCreateErrorShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor, char const * errorMessage) {\nreturn     procs.deviceCreateErrorShaderModule(device, descriptor, errorMessage);\n}\nWGPUTexture wgpuDeviceCreateErrorTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\nreturn     procs.deviceCreateErrorTexture(device, descriptor);\n}\nWGPUExternalTexture wgpuDeviceCreateExternalTexture(WGPUDevice device, WGPUExternalTextureDescriptor const * externalTextureDescriptor) {\nreturn     procs.deviceCreateExternalTexture(device, externalTextureDescriptor);\n}\nWGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor) {\nreturn     procs.deviceCreatePipelineLayout(device, descriptor);\n}\nWGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice device, WGPUQuerySetDescriptor const * descriptor) {\nreturn     procs.deviceCreateQuerySet(device, descriptor);\n}\nWGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor) {\nreturn     procs.deviceCreateRenderBundleEncoder(device, descriptor);\n}\nWGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor) {\nreturn     procs.deviceCreateRenderPipeline(device, descriptor);\n}\nvoid wgpuDeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata) {\n    procs.deviceCreateRenderPipelineAsync(device, descriptor, callback, userdata);\n}\nWGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, WGPUSamplerDescriptor const * descriptor) {\nreturn     procs.deviceCreateSampler(device, descriptor);\n}\nWGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor) {\nreturn     procs.deviceCreateShaderModule(device, descriptor);\n}\nWGPUSwapChain wgpuDeviceCreateSwapChain(WGPUDevice device, WGPUSurface surface, WGPUSwapChainDescriptor const * descriptor) {\nreturn     procs.deviceCreateSwapChain(device, surface, descriptor);\n}\nWGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\nreturn     procs.deviceCreateTexture(device, descriptor);\n}\nvoid wgpuDeviceDestroy(WGPUDevice device) {\n    procs.deviceDestroy(device);\n}\nsize_t wgpuDeviceEnumerateFeatures(WGPUDevice device, WGPUFeatureName * features) {\nreturn     procs.deviceEnumerateFeatures(device, features);\n}\nvoid wgpuDeviceForceLoss(WGPUDevice device, WGPUDeviceLostReason type, char const * message) {\n    procs.deviceForceLoss(device, type, message);\n}\nWGPUAdapter wgpuDeviceGetAdapter(WGPUDevice device) {\nreturn     procs.deviceGetAdapter(device);\n}\nbool wgpuDeviceGetLimits(WGPUDevice device, WGPUSupportedLimits * limits) {\nreturn     procs.deviceGetLimits(device, limits);\n}\nWGPUQueue wgpuDeviceGetQueue(WGPUDevice device) {\nreturn     procs.deviceGetQueue(device);\n}\nWGPUTextureUsageFlags wgpuDeviceGetSupportedSurfaceUsage(WGPUDevice device, WGPUSurface surface) {\nreturn     procs.deviceGetSupportedSurfaceUsage(device, surface);\n}\nbool wgpuDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature) {\nreturn     procs.deviceHasFeature(device, feature);\n}\nvoid wgpuDeviceInjectError(WGPUDevice device, WGPUErrorType type, char const * message) {\n    procs.deviceInjectError(device, type, message);\n}\nvoid wgpuDevicePopErrorScope(WGPUDevice device, WGPUErrorCallback callback, void * userdata) {\n    procs.devicePopErrorScope(device, callback, userdata);\n}\nvoid wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter) {\n    procs.devicePushErrorScope(device, filter);\n}\nvoid wgpuDeviceSetDeviceLostCallback(WGPUDevice device, WGPUDeviceLostCallback callback, void * userdata) {\n    procs.deviceSetDeviceLostCallback(device, callback, userdata);\n}\nvoid wgpuDeviceSetLabel(WGPUDevice device, char const * label) {\n    procs.deviceSetLabel(device, label);\n}\nvoid wgpuDeviceSetLoggingCallback(WGPUDevice device, WGPULoggingCallback callback, void * userdata) {\n    procs.deviceSetLoggingCallback(device, callback, userdata);\n}\nvoid wgpuDeviceSetUncapturedErrorCallback(WGPUDevice device, WGPUErrorCallback callback, void * userdata) {\n    procs.deviceSetUncapturedErrorCallback(device, callback, userdata);\n}\nvoid wgpuDeviceTick(WGPUDevice device) {\n    procs.deviceTick(device);\n}\nvoid wgpuDeviceValidateTextureDescriptor(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\n    procs.deviceValidateTextureDescriptor(device, descriptor);\n}\nvoid wgpuDeviceReference(WGPUDevice device) {\n    procs.deviceReference(device);\n}\nvoid wgpuDeviceRelease(WGPUDevice device) {\n    procs.deviceRelease(device);\n}\n\nvoid wgpuExternalTextureDestroy(WGPUExternalTexture externalTexture) {\n    procs.externalTextureDestroy(externalTexture);\n}\nvoid wgpuExternalTextureExpire(WGPUExternalTexture externalTexture) {\n    procs.externalTextureExpire(externalTexture);\n}\nvoid wgpuExternalTextureRefresh(WGPUExternalTexture externalTexture) {\n    procs.externalTextureRefresh(externalTexture);\n}\nvoid wgpuExternalTextureSetLabel(WGPUExternalTexture externalTexture, char const * label) {\n    procs.externalTextureSetLabel(externalTexture, label);\n}\nvoid wgpuExternalTextureReference(WGPUExternalTexture externalTexture) {\n    procs.externalTextureReference(externalTexture);\n}\nvoid wgpuExternalTextureRelease(WGPUExternalTexture externalTexture) {\n    procs.externalTextureRelease(externalTexture);\n}\n\nWGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor) {\nreturn     procs.instanceCreateSurface(instance, descriptor);\n}\nvoid wgpuInstanceProcessEvents(WGPUInstance instance) {\n    procs.instanceProcessEvents(instance);\n}\nvoid wgpuInstanceRequestAdapter(WGPUInstance instance, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata) {\n    procs.instanceRequestAdapter(instance, options, callback, userdata);\n}\nvoid wgpuInstanceReference(WGPUInstance instance) {\n    procs.instanceReference(instance);\n}\nvoid wgpuInstanceRelease(WGPUInstance instance) {\n    procs.instanceRelease(instance);\n}\n\nvoid wgpuPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, char const * label) {\n    procs.pipelineLayoutSetLabel(pipelineLayout, label);\n}\nvoid wgpuPipelineLayoutReference(WGPUPipelineLayout pipelineLayout) {\n    procs.pipelineLayoutReference(pipelineLayout);\n}\nvoid wgpuPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout) {\n    procs.pipelineLayoutRelease(pipelineLayout);\n}\n\nvoid wgpuQuerySetDestroy(WGPUQuerySet querySet) {\n    procs.querySetDestroy(querySet);\n}\nuint32_t wgpuQuerySetGetCount(WGPUQuerySet querySet) {\nreturn     procs.querySetGetCount(querySet);\n}\nWGPUQueryType wgpuQuerySetGetType(WGPUQuerySet querySet) {\nreturn     procs.querySetGetType(querySet);\n}\nvoid wgpuQuerySetSetLabel(WGPUQuerySet querySet, char const * label) {\n    procs.querySetSetLabel(querySet, label);\n}\nvoid wgpuQuerySetReference(WGPUQuerySet querySet) {\n    procs.querySetReference(querySet);\n}\nvoid wgpuQuerySetRelease(WGPUQuerySet querySet) {\n    procs.querySetRelease(querySet);\n}\n\nvoid wgpuQueueCopyExternalTextureForBrowser(WGPUQueue queue, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) {\n    procs.queueCopyExternalTextureForBrowser(queue, source, destination, copySize, options);\n}\nvoid wgpuQueueCopyTextureForBrowser(WGPUQueue queue, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) {\n    procs.queueCopyTextureForBrowser(queue, source, destination, copySize, options);\n}\nvoid wgpuQueueOnSubmittedWorkDone(WGPUQueue queue, uint64_t signalValue, WGPUQueueWorkDoneCallback callback, void * userdata) {\n    procs.queueOnSubmittedWorkDone(queue, signalValue, callback, userdata);\n}\nvoid wgpuQueueSetLabel(WGPUQueue queue, char const * label) {\n    procs.queueSetLabel(queue, label);\n}\nvoid wgpuQueueSubmit(WGPUQueue queue, size_t commandCount, WGPUCommandBuffer const * commands) {\n    procs.queueSubmit(queue, commandCount, commands);\n}\nvoid wgpuQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size) {\n    procs.queueWriteBuffer(queue, buffer, bufferOffset, data, size);\n}\nvoid wgpuQueueWriteTexture(WGPUQueue queue, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize) {\n    procs.queueWriteTexture(queue, destination, data, dataSize, dataLayout, writeSize);\n}\nvoid wgpuQueueReference(WGPUQueue queue) {\n    procs.queueReference(queue);\n}\nvoid wgpuQueueRelease(WGPUQueue queue) {\n    procs.queueRelease(queue);\n}\n\nvoid wgpuRenderBundleSetLabel(WGPURenderBundle renderBundle, char const * label) {\n    procs.renderBundleSetLabel(renderBundle, label);\n}\nvoid wgpuRenderBundleReference(WGPURenderBundle renderBundle) {\n    procs.renderBundleReference(renderBundle);\n}\nvoid wgpuRenderBundleRelease(WGPURenderBundle renderBundle) {\n    procs.renderBundleRelease(renderBundle);\n}\n\nvoid wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n    procs.renderBundleEncoderDraw(renderBundleEncoder, vertexCount, instanceCount, firstVertex, firstInstance);\n}\nvoid wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n    procs.renderBundleEncoderDrawIndexed(renderBundleEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n}\nvoid wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.renderBundleEncoderDrawIndexedIndirect(renderBundleEncoder, indirectBuffer, indirectOffset);\n}\nvoid wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.renderBundleEncoderDrawIndirect(renderBundleEncoder, indirectBuffer, indirectOffset);\n}\nWGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor const * descriptor) {\nreturn     procs.renderBundleEncoderFinish(renderBundleEncoder, descriptor);\n}\nvoid wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, char const * markerLabel) {\n    procs.renderBundleEncoderInsertDebugMarker(renderBundleEncoder, markerLabel);\n}\nvoid wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder) {\n    procs.renderBundleEncoderPopDebugGroup(renderBundleEncoder);\n}\nvoid wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel) {\n    procs.renderBundleEncoderPushDebugGroup(renderBundleEncoder, groupLabel);\n}\nvoid wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    procs.renderBundleEncoderSetBindGroup(renderBundleEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nvoid wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {\n    procs.renderBundleEncoderSetIndexBuffer(renderBundleEncoder, buffer, format, offset, size);\n}\nvoid wgpuRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, char const * label) {\n    procs.renderBundleEncoderSetLabel(renderBundleEncoder, label);\n}\nvoid wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline) {\n    procs.renderBundleEncoderSetPipeline(renderBundleEncoder, pipeline);\n}\nvoid wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    procs.renderBundleEncoderSetVertexBuffer(renderBundleEncoder, slot, buffer, offset, size);\n}\nvoid wgpuRenderBundleEncoderReference(WGPURenderBundleEncoder renderBundleEncoder) {\n    procs.renderBundleEncoderReference(renderBundleEncoder);\n}\nvoid wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder) {\n    procs.renderBundleEncoderRelease(renderBundleEncoder);\n}\n\nvoid wgpuRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex) {\n    procs.renderPassEncoderBeginOcclusionQuery(renderPassEncoder, queryIndex);\n}\nvoid wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n    procs.renderPassEncoderDraw(renderPassEncoder, vertexCount, instanceCount, firstVertex, firstInstance);\n}\nvoid wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n    procs.renderPassEncoderDrawIndexed(renderPassEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n}\nvoid wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.renderPassEncoderDrawIndexedIndirect(renderPassEncoder, indirectBuffer, indirectOffset);\n}\nvoid wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.renderPassEncoderDrawIndirect(renderPassEncoder, indirectBuffer, indirectOffset);\n}\nvoid wgpuRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderEnd(renderPassEncoder);\n}\nvoid wgpuRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderEndOcclusionQuery(renderPassEncoder);\n}\nvoid wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, WGPURenderBundle const * bundles) {\n    procs.renderPassEncoderExecuteBundles(renderPassEncoder, bundleCount, bundles);\n}\nvoid wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, char const * markerLabel) {\n    procs.renderPassEncoderInsertDebugMarker(renderPassEncoder, markerLabel);\n}\nvoid wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderPopDebugGroup(renderPassEncoder);\n}\nvoid wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, char const * groupLabel) {\n    procs.renderPassEncoderPushDebugGroup(renderPassEncoder, groupLabel);\n}\nvoid wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    procs.renderPassEncoderSetBindGroup(renderPassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nvoid wgpuRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color) {\n    procs.renderPassEncoderSetBlendConstant(renderPassEncoder, color);\n}\nvoid wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {\n    procs.renderPassEncoderSetIndexBuffer(renderPassEncoder, buffer, format, offset, size);\n}\nvoid wgpuRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, char const * label) {\n    procs.renderPassEncoderSetLabel(renderPassEncoder, label);\n}\nvoid wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline) {\n    procs.renderPassEncoderSetPipeline(renderPassEncoder, pipeline);\n}\nvoid wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height) {\n    procs.renderPassEncoderSetScissorRect(renderPassEncoder, x, y, width, height);\n}\nvoid wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference) {\n    procs.renderPassEncoderSetStencilReference(renderPassEncoder, reference);\n}\nvoid wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    procs.renderPassEncoderSetVertexBuffer(renderPassEncoder, slot, buffer, offset, size);\n}\nvoid wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth) {\n    procs.renderPassEncoderSetViewport(renderPassEncoder, x, y, width, height, minDepth, maxDepth);\n}\nvoid wgpuRenderPassEncoderWriteTimestamp(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {\n    procs.renderPassEncoderWriteTimestamp(renderPassEncoder, querySet, queryIndex);\n}\nvoid wgpuRenderPassEncoderReference(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderReference(renderPassEncoder);\n}\nvoid wgpuRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderRelease(renderPassEncoder);\n}\n\nWGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex) {\nreturn     procs.renderPipelineGetBindGroupLayout(renderPipeline, groupIndex);\n}\nvoid wgpuRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, char const * label) {\n    procs.renderPipelineSetLabel(renderPipeline, label);\n}\nvoid wgpuRenderPipelineReference(WGPURenderPipeline renderPipeline) {\n    procs.renderPipelineReference(renderPipeline);\n}\nvoid wgpuRenderPipelineRelease(WGPURenderPipeline renderPipeline) {\n    procs.renderPipelineRelease(renderPipeline);\n}\n\nvoid wgpuSamplerSetLabel(WGPUSampler sampler, char const * label) {\n    procs.samplerSetLabel(sampler, label);\n}\nvoid wgpuSamplerReference(WGPUSampler sampler) {\n    procs.samplerReference(sampler);\n}\nvoid wgpuSamplerRelease(WGPUSampler sampler) {\n    procs.samplerRelease(sampler);\n}\n\nvoid wgpuShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata) {\n    procs.shaderModuleGetCompilationInfo(shaderModule, callback, userdata);\n}\nvoid wgpuShaderModuleSetLabel(WGPUShaderModule shaderModule, char const * label) {\n    procs.shaderModuleSetLabel(shaderModule, label);\n}\nvoid wgpuShaderModuleReference(WGPUShaderModule shaderModule) {\n    procs.shaderModuleReference(shaderModule);\n}\nvoid wgpuShaderModuleRelease(WGPUShaderModule shaderModule) {\n    procs.shaderModuleRelease(shaderModule);\n}\n\nvoid wgpuSurfaceReference(WGPUSurface surface) {\n    procs.surfaceReference(surface);\n}\nvoid wgpuSurfaceRelease(WGPUSurface surface) {\n    procs.surfaceRelease(surface);\n}\n\nWGPUTexture wgpuSwapChainGetCurrentTexture(WGPUSwapChain swapChain) {\nreturn     procs.swapChainGetCurrentTexture(swapChain);\n}\nWGPUTextureView wgpuSwapChainGetCurrentTextureView(WGPUSwapChain swapChain) {\nreturn     procs.swapChainGetCurrentTextureView(swapChain);\n}\nvoid wgpuSwapChainPresent(WGPUSwapChain swapChain) {\n    procs.swapChainPresent(swapChain);\n}\nvoid wgpuSwapChainReference(WGPUSwapChain swapChain) {\n    procs.swapChainReference(swapChain);\n}\nvoid wgpuSwapChainRelease(WGPUSwapChain swapChain) {\n    procs.swapChainRelease(swapChain);\n}\n\nWGPUTextureView wgpuTextureCreateView(WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor) {\nreturn     procs.textureCreateView(texture, descriptor);\n}\nvoid wgpuTextureDestroy(WGPUTexture texture) {\n    procs.textureDestroy(texture);\n}\nuint32_t wgpuTextureGetDepthOrArrayLayers(WGPUTexture texture) {\nreturn     procs.textureGetDepthOrArrayLayers(texture);\n}\nWGPUTextureDimension wgpuTextureGetDimension(WGPUTexture texture) {\nreturn     procs.textureGetDimension(texture);\n}\nWGPUTextureFormat wgpuTextureGetFormat(WGPUTexture texture) {\nreturn     procs.textureGetFormat(texture);\n}\nuint32_t wgpuTextureGetHeight(WGPUTexture texture) {\nreturn     procs.textureGetHeight(texture);\n}\nuint32_t wgpuTextureGetMipLevelCount(WGPUTexture texture) {\nreturn     procs.textureGetMipLevelCount(texture);\n}\nuint32_t wgpuTextureGetSampleCount(WGPUTexture texture) {\nreturn     procs.textureGetSampleCount(texture);\n}\nWGPUTextureUsageFlags wgpuTextureGetUsage(WGPUTexture texture) {\nreturn     procs.textureGetUsage(texture);\n}\nuint32_t wgpuTextureGetWidth(WGPUTexture texture) {\nreturn     procs.textureGetWidth(texture);\n}\nvoid wgpuTextureSetLabel(WGPUTexture texture, char const * label) {\n    procs.textureSetLabel(texture, label);\n}\nvoid wgpuTextureReference(WGPUTexture texture) {\n    procs.textureReference(texture);\n}\nvoid wgpuTextureRelease(WGPUTexture texture) {\n    procs.textureRelease(texture);\n}\n\nvoid wgpuTextureViewSetLabel(WGPUTextureView textureView, char const * label) {\n    procs.textureViewSetLabel(textureView, label);\n}\nvoid wgpuTextureViewReference(WGPUTextureView textureView) {\n    procs.textureViewReference(textureView);\n}\nvoid wgpuTextureViewRelease(WGPUTextureView textureView) {\n    procs.textureViewRelease(textureView);\n}\n\n", "src/dawn/dawn_thread_dispatch_proc.cpp": "#include \"dawn/dawn_thread_dispatch_proc.h\"\n\n#include <thread>\n\nstatic DawnProcTable nullProcs;\nthread_local DawnProcTable perThreadProcs;\n\nvoid dawnProcSetPerThreadProcs(const DawnProcTable* procs) {\n    if (procs) {\n        perThreadProcs = *procs;\n    } else {\n        perThreadProcs = nullProcs;\n    }\n}\n\nstatic WGPUInstance ThreadDispatchCreateInstance(WGPUInstanceDescriptor const * descriptor) {\nreturn     perThreadProcs.createInstance(descriptor);\n}\nstatic WGPUProc ThreadDispatchGetProcAddress(WGPUDevice device, char const * procName) {\nreturn     perThreadProcs.getProcAddress(device, procName);\n}\n\nstatic WGPUDevice ThreadDispatchAdapterCreateDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor) {\nreturn     perThreadProcs.adapterCreateDevice(adapter, descriptor);\n}\nstatic size_t ThreadDispatchAdapterEnumerateFeatures(WGPUAdapter adapter, WGPUFeatureName * features) {\nreturn     perThreadProcs.adapterEnumerateFeatures(adapter, features);\n}\nstatic WGPUInstance ThreadDispatchAdapterGetInstance(WGPUAdapter adapter) {\nreturn     perThreadProcs.adapterGetInstance(adapter);\n}\nstatic bool ThreadDispatchAdapterGetLimits(WGPUAdapter adapter, WGPUSupportedLimits * limits) {\nreturn     perThreadProcs.adapterGetLimits(adapter, limits);\n}\nstatic void ThreadDispatchAdapterGetProperties(WGPUAdapter adapter, WGPUAdapterProperties * properties) {\n    perThreadProcs.adapterGetProperties(adapter, properties);\n}\nstatic bool ThreadDispatchAdapterHasFeature(WGPUAdapter adapter, WGPUFeatureName feature) {\nreturn     perThreadProcs.adapterHasFeature(adapter, feature);\n}\nstatic void ThreadDispatchAdapterRequestDevice(WGPUAdapter adapter, WGPUDeviceDescriptor const * descriptor, WGPURequestDeviceCallback callback, void * userdata) {\n    perThreadProcs.adapterRequestDevice(adapter, descriptor, callback, userdata);\n}\nstatic void ThreadDispatchAdapterReference(WGPUAdapter adapter) {\n    perThreadProcs.adapterReference(adapter);\n}\nstatic void ThreadDispatchAdapterRelease(WGPUAdapter adapter) {\n    perThreadProcs.adapterRelease(adapter);\n}\nstatic void ThreadDispatchBindGroupSetLabel(WGPUBindGroup bindGroup, char const * label) {\n    perThreadProcs.bindGroupSetLabel(bindGroup, label);\n}\nstatic void ThreadDispatchBindGroupReference(WGPUBindGroup bindGroup) {\n    perThreadProcs.bindGroupReference(bindGroup);\n}\nstatic void ThreadDispatchBindGroupRelease(WGPUBindGroup bindGroup) {\n    perThreadProcs.bindGroupRelease(bindGroup);\n}\nstatic void ThreadDispatchBindGroupLayoutSetLabel(WGPUBindGroupLayout bindGroupLayout, char const * label) {\n    perThreadProcs.bindGroupLayoutSetLabel(bindGroupLayout, label);\n}\nstatic void ThreadDispatchBindGroupLayoutReference(WGPUBindGroupLayout bindGroupLayout) {\n    perThreadProcs.bindGroupLayoutReference(bindGroupLayout);\n}\nstatic void ThreadDispatchBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout) {\n    perThreadProcs.bindGroupLayoutRelease(bindGroupLayout);\n}\nstatic void ThreadDispatchBufferDestroy(WGPUBuffer buffer) {\n    perThreadProcs.bufferDestroy(buffer);\n}\nstatic void const * ThreadDispatchBufferGetConstMappedRange(WGPUBuffer buffer, size_t offset, size_t size) {\nreturn     perThreadProcs.bufferGetConstMappedRange(buffer, offset, size);\n}\nstatic WGPUBufferMapState ThreadDispatchBufferGetMapState(WGPUBuffer buffer) {\nreturn     perThreadProcs.bufferGetMapState(buffer);\n}\nstatic void * ThreadDispatchBufferGetMappedRange(WGPUBuffer buffer, size_t offset, size_t size) {\nreturn     perThreadProcs.bufferGetMappedRange(buffer, offset, size);\n}\nstatic uint64_t ThreadDispatchBufferGetSize(WGPUBuffer buffer) {\nreturn     perThreadProcs.bufferGetSize(buffer);\n}\nstatic WGPUBufferUsageFlags ThreadDispatchBufferGetUsage(WGPUBuffer buffer) {\nreturn     perThreadProcs.bufferGetUsage(buffer);\n}\nstatic void ThreadDispatchBufferMapAsync(WGPUBuffer buffer, WGPUMapModeFlags mode, size_t offset, size_t size, WGPUBufferMapCallback callback, void * userdata) {\n    perThreadProcs.bufferMapAsync(buffer, mode, offset, size, callback, userdata);\n}\nstatic void ThreadDispatchBufferSetLabel(WGPUBuffer buffer, char const * label) {\n    perThreadProcs.bufferSetLabel(buffer, label);\n}\nstatic void ThreadDispatchBufferUnmap(WGPUBuffer buffer) {\n    perThreadProcs.bufferUnmap(buffer);\n}\nstatic void ThreadDispatchBufferReference(WGPUBuffer buffer) {\n    perThreadProcs.bufferReference(buffer);\n}\nstatic void ThreadDispatchBufferRelease(WGPUBuffer buffer) {\n    perThreadProcs.bufferRelease(buffer);\n}\nstatic void ThreadDispatchCommandBufferSetLabel(WGPUCommandBuffer commandBuffer, char const * label) {\n    perThreadProcs.commandBufferSetLabel(commandBuffer, label);\n}\nstatic void ThreadDispatchCommandBufferReference(WGPUCommandBuffer commandBuffer) {\n    perThreadProcs.commandBufferReference(commandBuffer);\n}\nstatic void ThreadDispatchCommandBufferRelease(WGPUCommandBuffer commandBuffer) {\n    perThreadProcs.commandBufferRelease(commandBuffer);\n}\nstatic WGPUComputePassEncoder ThreadDispatchCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor const * descriptor) {\nreturn     perThreadProcs.commandEncoderBeginComputePass(commandEncoder, descriptor);\n}\nstatic WGPURenderPassEncoder ThreadDispatchCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor) {\nreturn     perThreadProcs.commandEncoderBeginRenderPass(commandEncoder, descriptor);\n}\nstatic void ThreadDispatchCommandEncoderClearBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    perThreadProcs.commandEncoderClearBuffer(commandEncoder, buffer, offset, size);\n}\nstatic void ThreadDispatchCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size) {\n    perThreadProcs.commandEncoderCopyBufferToBuffer(commandEncoder, source, sourceOffset, destination, destinationOffset, size);\n}\nstatic void ThreadDispatchCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyBuffer const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n    perThreadProcs.commandEncoderCopyBufferToTexture(commandEncoder, source, destination, copySize);\n}\nstatic void ThreadDispatchCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyBuffer const * destination, WGPUExtent3D const * copySize) {\n    perThreadProcs.commandEncoderCopyTextureToBuffer(commandEncoder, source, destination, copySize);\n}\nstatic void ThreadDispatchCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n    perThreadProcs.commandEncoderCopyTextureToTexture(commandEncoder, source, destination, copySize);\n}\nstatic void ThreadDispatchCommandEncoderCopyTextureToTextureInternal(WGPUCommandEncoder commandEncoder, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize) {\n    perThreadProcs.commandEncoderCopyTextureToTextureInternal(commandEncoder, source, destination, copySize);\n}\nstatic WGPUCommandBuffer ThreadDispatchCommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor const * descriptor) {\nreturn     perThreadProcs.commandEncoderFinish(commandEncoder, descriptor);\n}\nstatic void ThreadDispatchCommandEncoderInjectValidationError(WGPUCommandEncoder commandEncoder, char const * message) {\n    perThreadProcs.commandEncoderInjectValidationError(commandEncoder, message);\n}\nstatic void ThreadDispatchCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, char const * markerLabel) {\n    perThreadProcs.commandEncoderInsertDebugMarker(commandEncoder, markerLabel);\n}\nstatic void ThreadDispatchCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder) {\n    perThreadProcs.commandEncoderPopDebugGroup(commandEncoder);\n}\nstatic void ThreadDispatchCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, char const * groupLabel) {\n    perThreadProcs.commandEncoderPushDebugGroup(commandEncoder, groupLabel);\n}\nstatic void ThreadDispatchCommandEncoderResolveQuerySet(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t firstQuery, uint32_t queryCount, WGPUBuffer destination, uint64_t destinationOffset) {\n    perThreadProcs.commandEncoderResolveQuerySet(commandEncoder, querySet, firstQuery, queryCount, destination, destinationOffset);\n}\nstatic void ThreadDispatchCommandEncoderSetLabel(WGPUCommandEncoder commandEncoder, char const * label) {\n    perThreadProcs.commandEncoderSetLabel(commandEncoder, label);\n}\nstatic void ThreadDispatchCommandEncoderWriteBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer buffer, uint64_t bufferOffset, uint8_t const * data, uint64_t size) {\n    perThreadProcs.commandEncoderWriteBuffer(commandEncoder, buffer, bufferOffset, data, size);\n}\nstatic void ThreadDispatchCommandEncoderWriteTimestamp(WGPUCommandEncoder commandEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {\n    perThreadProcs.commandEncoderWriteTimestamp(commandEncoder, querySet, queryIndex);\n}\nstatic void ThreadDispatchCommandEncoderReference(WGPUCommandEncoder commandEncoder) {\n    perThreadProcs.commandEncoderReference(commandEncoder);\n}\nstatic void ThreadDispatchCommandEncoderRelease(WGPUCommandEncoder commandEncoder) {\n    perThreadProcs.commandEncoderRelease(commandEncoder);\n}\nstatic void ThreadDispatchComputePassEncoderDispatchWorkgroups(WGPUComputePassEncoder computePassEncoder, uint32_t workgroupCountX, uint32_t workgroupCountY, uint32_t workgroupCountZ) {\n    perThreadProcs.computePassEncoderDispatchWorkgroups(computePassEncoder, workgroupCountX, workgroupCountY, workgroupCountZ);\n}\nstatic void ThreadDispatchComputePassEncoderDispatchWorkgroupsIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    perThreadProcs.computePassEncoderDispatchWorkgroupsIndirect(computePassEncoder, indirectBuffer, indirectOffset);\n}\nstatic void ThreadDispatchComputePassEncoderEnd(WGPUComputePassEncoder computePassEncoder) {\n    perThreadProcs.computePassEncoderEnd(computePassEncoder);\n}\nstatic void ThreadDispatchComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, char const * markerLabel) {\n    perThreadProcs.computePassEncoderInsertDebugMarker(computePassEncoder, markerLabel);\n}\nstatic void ThreadDispatchComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder) {\n    perThreadProcs.computePassEncoderPopDebugGroup(computePassEncoder);\n}\nstatic void ThreadDispatchComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, char const * groupLabel) {\n    perThreadProcs.computePassEncoderPushDebugGroup(computePassEncoder, groupLabel);\n}\nstatic void ThreadDispatchComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    perThreadProcs.computePassEncoderSetBindGroup(computePassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nstatic void ThreadDispatchComputePassEncoderSetLabel(WGPUComputePassEncoder computePassEncoder, char const * label) {\n    perThreadProcs.computePassEncoderSetLabel(computePassEncoder, label);\n}\nstatic void ThreadDispatchComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline) {\n    perThreadProcs.computePassEncoderSetPipeline(computePassEncoder, pipeline);\n}\nstatic void ThreadDispatchComputePassEncoderWriteTimestamp(WGPUComputePassEncoder computePassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {\n    perThreadProcs.computePassEncoderWriteTimestamp(computePassEncoder, querySet, queryIndex);\n}\nstatic void ThreadDispatchComputePassEncoderReference(WGPUComputePassEncoder computePassEncoder) {\n    perThreadProcs.computePassEncoderReference(computePassEncoder);\n}\nstatic void ThreadDispatchComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder) {\n    perThreadProcs.computePassEncoderRelease(computePassEncoder);\n}\nstatic WGPUBindGroupLayout ThreadDispatchComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex) {\nreturn     perThreadProcs.computePipelineGetBindGroupLayout(computePipeline, groupIndex);\n}\nstatic void ThreadDispatchComputePipelineSetLabel(WGPUComputePipeline computePipeline, char const * label) {\n    perThreadProcs.computePipelineSetLabel(computePipeline, label);\n}\nstatic void ThreadDispatchComputePipelineReference(WGPUComputePipeline computePipeline) {\n    perThreadProcs.computePipelineReference(computePipeline);\n}\nstatic void ThreadDispatchComputePipelineRelease(WGPUComputePipeline computePipeline) {\n    perThreadProcs.computePipelineRelease(computePipeline);\n}\nstatic WGPUBindGroup ThreadDispatchDeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateBindGroup(device, descriptor);\n}\nstatic WGPUBindGroupLayout ThreadDispatchDeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateBindGroupLayout(device, descriptor);\n}\nstatic WGPUBuffer ThreadDispatchDeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateBuffer(device, descriptor);\n}\nstatic WGPUCommandEncoder ThreadDispatchDeviceCreateCommandEncoder(WGPUDevice device, WGPUCommandEncoderDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateCommandEncoder(device, descriptor);\n}\nstatic WGPUComputePipeline ThreadDispatchDeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateComputePipeline(device, descriptor);\n}\nstatic void ThreadDispatchDeviceCreateComputePipelineAsync(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor, WGPUCreateComputePipelineAsyncCallback callback, void * userdata) {\n    perThreadProcs.deviceCreateComputePipelineAsync(device, descriptor, callback, userdata);\n}\nstatic WGPUBuffer ThreadDispatchDeviceCreateErrorBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateErrorBuffer(device, descriptor);\n}\nstatic WGPUExternalTexture ThreadDispatchDeviceCreateErrorExternalTexture(WGPUDevice device) {\nreturn     perThreadProcs.deviceCreateErrorExternalTexture(device);\n}\nstatic WGPUShaderModule ThreadDispatchDeviceCreateErrorShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor, char const * errorMessage) {\nreturn     perThreadProcs.deviceCreateErrorShaderModule(device, descriptor, errorMessage);\n}\nstatic WGPUTexture ThreadDispatchDeviceCreateErrorTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateErrorTexture(device, descriptor);\n}\nstatic WGPUExternalTexture ThreadDispatchDeviceCreateExternalTexture(WGPUDevice device, WGPUExternalTextureDescriptor const * externalTextureDescriptor) {\nreturn     perThreadProcs.deviceCreateExternalTexture(device, externalTextureDescriptor);\n}\nstatic WGPUPipelineLayout ThreadDispatchDeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreatePipelineLayout(device, descriptor);\n}\nstatic WGPUQuerySet ThreadDispatchDeviceCreateQuerySet(WGPUDevice device, WGPUQuerySetDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateQuerySet(device, descriptor);\n}\nstatic WGPURenderBundleEncoder ThreadDispatchDeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateRenderBundleEncoder(device, descriptor);\n}\nstatic WGPURenderPipeline ThreadDispatchDeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateRenderPipeline(device, descriptor);\n}\nstatic void ThreadDispatchDeviceCreateRenderPipelineAsync(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor, WGPUCreateRenderPipelineAsyncCallback callback, void * userdata) {\n    perThreadProcs.deviceCreateRenderPipelineAsync(device, descriptor, callback, userdata);\n}\nstatic WGPUSampler ThreadDispatchDeviceCreateSampler(WGPUDevice device, WGPUSamplerDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateSampler(device, descriptor);\n}\nstatic WGPUShaderModule ThreadDispatchDeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateShaderModule(device, descriptor);\n}\nstatic WGPUSwapChain ThreadDispatchDeviceCreateSwapChain(WGPUDevice device, WGPUSurface surface, WGPUSwapChainDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateSwapChain(device, surface, descriptor);\n}\nstatic WGPUTexture ThreadDispatchDeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\nreturn     perThreadProcs.deviceCreateTexture(device, descriptor);\n}\nstatic void ThreadDispatchDeviceDestroy(WGPUDevice device) {\n    perThreadProcs.deviceDestroy(device);\n}\nstatic size_t ThreadDispatchDeviceEnumerateFeatures(WGPUDevice device, WGPUFeatureName * features) {\nreturn     perThreadProcs.deviceEnumerateFeatures(device, features);\n}\nstatic void ThreadDispatchDeviceForceLoss(WGPUDevice device, WGPUDeviceLostReason type, char const * message) {\n    perThreadProcs.deviceForceLoss(device, type, message);\n}\nstatic WGPUAdapter ThreadDispatchDeviceGetAdapter(WGPUDevice device) {\nreturn     perThreadProcs.deviceGetAdapter(device);\n}\nstatic bool ThreadDispatchDeviceGetLimits(WGPUDevice device, WGPUSupportedLimits * limits) {\nreturn     perThreadProcs.deviceGetLimits(device, limits);\n}\nstatic WGPUQueue ThreadDispatchDeviceGetQueue(WGPUDevice device) {\nreturn     perThreadProcs.deviceGetQueue(device);\n}\nstatic WGPUTextureUsageFlags ThreadDispatchDeviceGetSupportedSurfaceUsage(WGPUDevice device, WGPUSurface surface) {\nreturn     perThreadProcs.deviceGetSupportedSurfaceUsage(device, surface);\n}\nstatic bool ThreadDispatchDeviceHasFeature(WGPUDevice device, WGPUFeatureName feature) {\nreturn     perThreadProcs.deviceHasFeature(device, feature);\n}\nstatic void ThreadDispatchDeviceInjectError(WGPUDevice device, WGPUErrorType type, char const * message) {\n    perThreadProcs.deviceInjectError(device, type, message);\n}\nstatic void ThreadDispatchDevicePopErrorScope(WGPUDevice device, WGPUErrorCallback callback, void * userdata) {\n    perThreadProcs.devicePopErrorScope(device, callback, userdata);\n}\nstatic void ThreadDispatchDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter) {\n    perThreadProcs.devicePushErrorScope(device, filter);\n}\nstatic void ThreadDispatchDeviceSetDeviceLostCallback(WGPUDevice device, WGPUDeviceLostCallback callback, void * userdata) {\n    perThreadProcs.deviceSetDeviceLostCallback(device, callback, userdata);\n}\nstatic void ThreadDispatchDeviceSetLabel(WGPUDevice device, char const * label) {\n    perThreadProcs.deviceSetLabel(device, label);\n}\nstatic void ThreadDispatchDeviceSetLoggingCallback(WGPUDevice device, WGPULoggingCallback callback, void * userdata) {\n    perThreadProcs.deviceSetLoggingCallback(device, callback, userdata);\n}\nstatic void ThreadDispatchDeviceSetUncapturedErrorCallback(WGPUDevice device, WGPUErrorCallback callback, void * userdata) {\n    perThreadProcs.deviceSetUncapturedErrorCallback(device, callback, userdata);\n}\nstatic void ThreadDispatchDeviceTick(WGPUDevice device) {\n    perThreadProcs.deviceTick(device);\n}\nstatic void ThreadDispatchDeviceValidateTextureDescriptor(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\n    perThreadProcs.deviceValidateTextureDescriptor(device, descriptor);\n}\nstatic void ThreadDispatchDeviceReference(WGPUDevice device) {\n    perThreadProcs.deviceReference(device);\n}\nstatic void ThreadDispatchDeviceRelease(WGPUDevice device) {\n    perThreadProcs.deviceRelease(device);\n}\nstatic void ThreadDispatchExternalTextureDestroy(WGPUExternalTexture externalTexture) {\n    perThreadProcs.externalTextureDestroy(externalTexture);\n}\nstatic void ThreadDispatchExternalTextureExpire(WGPUExternalTexture externalTexture) {\n    perThreadProcs.externalTextureExpire(externalTexture);\n}\nstatic void ThreadDispatchExternalTextureRefresh(WGPUExternalTexture externalTexture) {\n    perThreadProcs.externalTextureRefresh(externalTexture);\n}\nstatic void ThreadDispatchExternalTextureSetLabel(WGPUExternalTexture externalTexture, char const * label) {\n    perThreadProcs.externalTextureSetLabel(externalTexture, label);\n}\nstatic void ThreadDispatchExternalTextureReference(WGPUExternalTexture externalTexture) {\n    perThreadProcs.externalTextureReference(externalTexture);\n}\nstatic void ThreadDispatchExternalTextureRelease(WGPUExternalTexture externalTexture) {\n    perThreadProcs.externalTextureRelease(externalTexture);\n}\nstatic WGPUSurface ThreadDispatchInstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor) {\nreturn     perThreadProcs.instanceCreateSurface(instance, descriptor);\n}\nstatic void ThreadDispatchInstanceProcessEvents(WGPUInstance instance) {\n    perThreadProcs.instanceProcessEvents(instance);\n}\nstatic void ThreadDispatchInstanceRequestAdapter(WGPUInstance instance, WGPURequestAdapterOptions const * options, WGPURequestAdapterCallback callback, void * userdata) {\n    perThreadProcs.instanceRequestAdapter(instance, options, callback, userdata);\n}\nstatic void ThreadDispatchInstanceReference(WGPUInstance instance) {\n    perThreadProcs.instanceReference(instance);\n}\nstatic void ThreadDispatchInstanceRelease(WGPUInstance instance) {\n    perThreadProcs.instanceRelease(instance);\n}\nstatic void ThreadDispatchPipelineLayoutSetLabel(WGPUPipelineLayout pipelineLayout, char const * label) {\n    perThreadProcs.pipelineLayoutSetLabel(pipelineLayout, label);\n}\nstatic void ThreadDispatchPipelineLayoutReference(WGPUPipelineLayout pipelineLayout) {\n    perThreadProcs.pipelineLayoutReference(pipelineLayout);\n}\nstatic void ThreadDispatchPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout) {\n    perThreadProcs.pipelineLayoutRelease(pipelineLayout);\n}\nstatic void ThreadDispatchQuerySetDestroy(WGPUQuerySet querySet) {\n    perThreadProcs.querySetDestroy(querySet);\n}\nstatic uint32_t ThreadDispatchQuerySetGetCount(WGPUQuerySet querySet) {\nreturn     perThreadProcs.querySetGetCount(querySet);\n}\nstatic WGPUQueryType ThreadDispatchQuerySetGetType(WGPUQuerySet querySet) {\nreturn     perThreadProcs.querySetGetType(querySet);\n}\nstatic void ThreadDispatchQuerySetSetLabel(WGPUQuerySet querySet, char const * label) {\n    perThreadProcs.querySetSetLabel(querySet, label);\n}\nstatic void ThreadDispatchQuerySetReference(WGPUQuerySet querySet) {\n    perThreadProcs.querySetReference(querySet);\n}\nstatic void ThreadDispatchQuerySetRelease(WGPUQuerySet querySet) {\n    perThreadProcs.querySetRelease(querySet);\n}\nstatic void ThreadDispatchQueueCopyExternalTextureForBrowser(WGPUQueue queue, WGPUImageCopyExternalTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) {\n    perThreadProcs.queueCopyExternalTextureForBrowser(queue, source, destination, copySize, options);\n}\nstatic void ThreadDispatchQueueCopyTextureForBrowser(WGPUQueue queue, WGPUImageCopyTexture const * source, WGPUImageCopyTexture const * destination, WGPUExtent3D const * copySize, WGPUCopyTextureForBrowserOptions const * options) {\n    perThreadProcs.queueCopyTextureForBrowser(queue, source, destination, copySize, options);\n}\nstatic void ThreadDispatchQueueOnSubmittedWorkDone(WGPUQueue queue, uint64_t signalValue, WGPUQueueWorkDoneCallback callback, void * userdata) {\n    perThreadProcs.queueOnSubmittedWorkDone(queue, signalValue, callback, userdata);\n}\nstatic void ThreadDispatchQueueSetLabel(WGPUQueue queue, char const * label) {\n    perThreadProcs.queueSetLabel(queue, label);\n}\nstatic void ThreadDispatchQueueSubmit(WGPUQueue queue, size_t commandCount, WGPUCommandBuffer const * commands) {\n    perThreadProcs.queueSubmit(queue, commandCount, commands);\n}\nstatic void ThreadDispatchQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size) {\n    perThreadProcs.queueWriteBuffer(queue, buffer, bufferOffset, data, size);\n}\nstatic void ThreadDispatchQueueWriteTexture(WGPUQueue queue, WGPUImageCopyTexture const * destination, void const * data, size_t dataSize, WGPUTextureDataLayout const * dataLayout, WGPUExtent3D const * writeSize) {\n    perThreadProcs.queueWriteTexture(queue, destination, data, dataSize, dataLayout, writeSize);\n}\nstatic void ThreadDispatchQueueReference(WGPUQueue queue) {\n    perThreadProcs.queueReference(queue);\n}\nstatic void ThreadDispatchQueueRelease(WGPUQueue queue) {\n    perThreadProcs.queueRelease(queue);\n}\nstatic void ThreadDispatchRenderBundleSetLabel(WGPURenderBundle renderBundle, char const * label) {\n    perThreadProcs.renderBundleSetLabel(renderBundle, label);\n}\nstatic void ThreadDispatchRenderBundleReference(WGPURenderBundle renderBundle) {\n    perThreadProcs.renderBundleReference(renderBundle);\n}\nstatic void ThreadDispatchRenderBundleRelease(WGPURenderBundle renderBundle) {\n    perThreadProcs.renderBundleRelease(renderBundle);\n}\nstatic void ThreadDispatchRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n    perThreadProcs.renderBundleEncoderDraw(renderBundleEncoder, vertexCount, instanceCount, firstVertex, firstInstance);\n}\nstatic void ThreadDispatchRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n    perThreadProcs.renderBundleEncoderDrawIndexed(renderBundleEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n}\nstatic void ThreadDispatchRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    perThreadProcs.renderBundleEncoderDrawIndexedIndirect(renderBundleEncoder, indirectBuffer, indirectOffset);\n}\nstatic void ThreadDispatchRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    perThreadProcs.renderBundleEncoderDrawIndirect(renderBundleEncoder, indirectBuffer, indirectOffset);\n}\nstatic WGPURenderBundle ThreadDispatchRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor const * descriptor) {\nreturn     perThreadProcs.renderBundleEncoderFinish(renderBundleEncoder, descriptor);\n}\nstatic void ThreadDispatchRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, char const * markerLabel) {\n    perThreadProcs.renderBundleEncoderInsertDebugMarker(renderBundleEncoder, markerLabel);\n}\nstatic void ThreadDispatchRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder) {\n    perThreadProcs.renderBundleEncoderPopDebugGroup(renderBundleEncoder);\n}\nstatic void ThreadDispatchRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel) {\n    perThreadProcs.renderBundleEncoderPushDebugGroup(renderBundleEncoder, groupLabel);\n}\nstatic void ThreadDispatchRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    perThreadProcs.renderBundleEncoderSetBindGroup(renderBundleEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nstatic void ThreadDispatchRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {\n    perThreadProcs.renderBundleEncoderSetIndexBuffer(renderBundleEncoder, buffer, format, offset, size);\n}\nstatic void ThreadDispatchRenderBundleEncoderSetLabel(WGPURenderBundleEncoder renderBundleEncoder, char const * label) {\n    perThreadProcs.renderBundleEncoderSetLabel(renderBundleEncoder, label);\n}\nstatic void ThreadDispatchRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline) {\n    perThreadProcs.renderBundleEncoderSetPipeline(renderBundleEncoder, pipeline);\n}\nstatic void ThreadDispatchRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    perThreadProcs.renderBundleEncoderSetVertexBuffer(renderBundleEncoder, slot, buffer, offset, size);\n}\nstatic void ThreadDispatchRenderBundleEncoderReference(WGPURenderBundleEncoder renderBundleEncoder) {\n    perThreadProcs.renderBundleEncoderReference(renderBundleEncoder);\n}\nstatic void ThreadDispatchRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder) {\n    perThreadProcs.renderBundleEncoderRelease(renderBundleEncoder);\n}\nstatic void ThreadDispatchRenderPassEncoderBeginOcclusionQuery(WGPURenderPassEncoder renderPassEncoder, uint32_t queryIndex) {\n    perThreadProcs.renderPassEncoderBeginOcclusionQuery(renderPassEncoder, queryIndex);\n}\nstatic void ThreadDispatchRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n    perThreadProcs.renderPassEncoderDraw(renderPassEncoder, vertexCount, instanceCount, firstVertex, firstInstance);\n}\nstatic void ThreadDispatchRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n    perThreadProcs.renderPassEncoderDrawIndexed(renderPassEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n}\nstatic void ThreadDispatchRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    perThreadProcs.renderPassEncoderDrawIndexedIndirect(renderPassEncoder, indirectBuffer, indirectOffset);\n}\nstatic void ThreadDispatchRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    perThreadProcs.renderPassEncoderDrawIndirect(renderPassEncoder, indirectBuffer, indirectOffset);\n}\nstatic void ThreadDispatchRenderPassEncoderEnd(WGPURenderPassEncoder renderPassEncoder) {\n    perThreadProcs.renderPassEncoderEnd(renderPassEncoder);\n}\nstatic void ThreadDispatchRenderPassEncoderEndOcclusionQuery(WGPURenderPassEncoder renderPassEncoder) {\n    perThreadProcs.renderPassEncoderEndOcclusionQuery(renderPassEncoder);\n}\nstatic void ThreadDispatchRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, size_t bundleCount, WGPURenderBundle const * bundles) {\n    perThreadProcs.renderPassEncoderExecuteBundles(renderPassEncoder, bundleCount, bundles);\n}\nstatic void ThreadDispatchRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, char const * markerLabel) {\n    perThreadProcs.renderPassEncoderInsertDebugMarker(renderPassEncoder, markerLabel);\n}\nstatic void ThreadDispatchRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder) {\n    perThreadProcs.renderPassEncoderPopDebugGroup(renderPassEncoder);\n}\nstatic void ThreadDispatchRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, char const * groupLabel) {\n    perThreadProcs.renderPassEncoderPushDebugGroup(renderPassEncoder, groupLabel);\n}\nstatic void ThreadDispatchRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, size_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    perThreadProcs.renderPassEncoderSetBindGroup(renderPassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nstatic void ThreadDispatchRenderPassEncoderSetBlendConstant(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color) {\n    perThreadProcs.renderPassEncoderSetBlendConstant(renderPassEncoder, color);\n}\nstatic void ThreadDispatchRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, WGPUIndexFormat format, uint64_t offset, uint64_t size) {\n    perThreadProcs.renderPassEncoderSetIndexBuffer(renderPassEncoder, buffer, format, offset, size);\n}\nstatic void ThreadDispatchRenderPassEncoderSetLabel(WGPURenderPassEncoder renderPassEncoder, char const * label) {\n    perThreadProcs.renderPassEncoderSetLabel(renderPassEncoder, label);\n}\nstatic void ThreadDispatchRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline) {\n    perThreadProcs.renderPassEncoderSetPipeline(renderPassEncoder, pipeline);\n}\nstatic void ThreadDispatchRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height) {\n    perThreadProcs.renderPassEncoderSetScissorRect(renderPassEncoder, x, y, width, height);\n}\nstatic void ThreadDispatchRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference) {\n    perThreadProcs.renderPassEncoderSetStencilReference(renderPassEncoder, reference);\n}\nstatic void ThreadDispatchRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    perThreadProcs.renderPassEncoderSetVertexBuffer(renderPassEncoder, slot, buffer, offset, size);\n}\nstatic void ThreadDispatchRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth) {\n    perThreadProcs.renderPassEncoderSetViewport(renderPassEncoder, x, y, width, height, minDepth, maxDepth);\n}\nstatic void ThreadDispatchRenderPassEncoderWriteTimestamp(WGPURenderPassEncoder renderPassEncoder, WGPUQuerySet querySet, uint32_t queryIndex) {\n    perThreadProcs.renderPassEncoderWriteTimestamp(renderPassEncoder, querySet, queryIndex);\n}\nstatic void ThreadDispatchRenderPassEncoderReference(WGPURenderPassEncoder renderPassEncoder) {\n    perThreadProcs.renderPassEncoderReference(renderPassEncoder);\n}\nstatic void ThreadDispatchRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder) {\n    perThreadProcs.renderPassEncoderRelease(renderPassEncoder);\n}\nstatic WGPUBindGroupLayout ThreadDispatchRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex) {\nreturn     perThreadProcs.renderPipelineGetBindGroupLayout(renderPipeline, groupIndex);\n}\nstatic void ThreadDispatchRenderPipelineSetLabel(WGPURenderPipeline renderPipeline, char const * label) {\n    perThreadProcs.renderPipelineSetLabel(renderPipeline, label);\n}\nstatic void ThreadDispatchRenderPipelineReference(WGPURenderPipeline renderPipeline) {\n    perThreadProcs.renderPipelineReference(renderPipeline);\n}\nstatic void ThreadDispatchRenderPipelineRelease(WGPURenderPipeline renderPipeline) {\n    perThreadProcs.renderPipelineRelease(renderPipeline);\n}\nstatic void ThreadDispatchSamplerSetLabel(WGPUSampler sampler, char const * label) {\n    perThreadProcs.samplerSetLabel(sampler, label);\n}\nstatic void ThreadDispatchSamplerReference(WGPUSampler sampler) {\n    perThreadProcs.samplerReference(sampler);\n}\nstatic void ThreadDispatchSamplerRelease(WGPUSampler sampler) {\n    perThreadProcs.samplerRelease(sampler);\n}\nstatic void ThreadDispatchShaderModuleGetCompilationInfo(WGPUShaderModule shaderModule, WGPUCompilationInfoCallback callback, void * userdata) {\n    perThreadProcs.shaderModuleGetCompilationInfo(shaderModule, callback, userdata);\n}\nstatic void ThreadDispatchShaderModuleSetLabel(WGPUShaderModule shaderModule, char const * label) {\n    perThreadProcs.shaderModuleSetLabel(shaderModule, label);\n}\nstatic void ThreadDispatchShaderModuleReference(WGPUShaderModule shaderModule) {\n    perThreadProcs.shaderModuleReference(shaderModule);\n}\nstatic void ThreadDispatchShaderModuleRelease(WGPUShaderModule shaderModule) {\n    perThreadProcs.shaderModuleRelease(shaderModule);\n}\nstatic void ThreadDispatchSurfaceReference(WGPUSurface surface) {\n    perThreadProcs.surfaceReference(surface);\n}\nstatic void ThreadDispatchSurfaceRelease(WGPUSurface surface) {\n    perThreadProcs.surfaceRelease(surface);\n}\nstatic WGPUTexture ThreadDispatchSwapChainGetCurrentTexture(WGPUSwapChain swapChain) {\nreturn     perThreadProcs.swapChainGetCurrentTexture(swapChain);\n}\nstatic WGPUTextureView ThreadDispatchSwapChainGetCurrentTextureView(WGPUSwapChain swapChain) {\nreturn     perThreadProcs.swapChainGetCurrentTextureView(swapChain);\n}\nstatic void ThreadDispatchSwapChainPresent(WGPUSwapChain swapChain) {\n    perThreadProcs.swapChainPresent(swapChain);\n}\nstatic void ThreadDispatchSwapChainReference(WGPUSwapChain swapChain) {\n    perThreadProcs.swapChainReference(swapChain);\n}\nstatic void ThreadDispatchSwapChainRelease(WGPUSwapChain swapChain) {\n    perThreadProcs.swapChainRelease(swapChain);\n}\nstatic WGPUTextureView ThreadDispatchTextureCreateView(WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor) {\nreturn     perThreadProcs.textureCreateView(texture, descriptor);\n}\nstatic void ThreadDispatchTextureDestroy(WGPUTexture texture) {\n    perThreadProcs.textureDestroy(texture);\n}\nstatic uint32_t ThreadDispatchTextureGetDepthOrArrayLayers(WGPUTexture texture) {\nreturn     perThreadProcs.textureGetDepthOrArrayLayers(texture);\n}\nstatic WGPUTextureDimension ThreadDispatchTextureGetDimension(WGPUTexture texture) {\nreturn     perThreadProcs.textureGetDimension(texture);\n}\nstatic WGPUTextureFormat ThreadDispatchTextureGetFormat(WGPUTexture texture) {\nreturn     perThreadProcs.textureGetFormat(texture);\n}\nstatic uint32_t ThreadDispatchTextureGetHeight(WGPUTexture texture) {\nreturn     perThreadProcs.textureGetHeight(texture);\n}\nstatic uint32_t ThreadDispatchTextureGetMipLevelCount(WGPUTexture texture) {\nreturn     perThreadProcs.textureGetMipLevelCount(texture);\n}\nstatic uint32_t ThreadDispatchTextureGetSampleCount(WGPUTexture texture) {\nreturn     perThreadProcs.textureGetSampleCount(texture);\n}\nstatic WGPUTextureUsageFlags ThreadDispatchTextureGetUsage(WGPUTexture texture) {\nreturn     perThreadProcs.textureGetUsage(texture);\n}\nstatic uint32_t ThreadDispatchTextureGetWidth(WGPUTexture texture) {\nreturn     perThreadProcs.textureGetWidth(texture);\n}\nstatic void ThreadDispatchTextureSetLabel(WGPUTexture texture, char const * label) {\n    perThreadProcs.textureSetLabel(texture, label);\n}\nstatic void ThreadDispatchTextureReference(WGPUTexture texture) {\n    perThreadProcs.textureReference(texture);\n}\nstatic void ThreadDispatchTextureRelease(WGPUTexture texture) {\n    perThreadProcs.textureRelease(texture);\n}\nstatic void ThreadDispatchTextureViewSetLabel(WGPUTextureView textureView, char const * label) {\n    perThreadProcs.textureViewSetLabel(textureView, label);\n}\nstatic void ThreadDispatchTextureViewReference(WGPUTextureView textureView) {\n    perThreadProcs.textureViewReference(textureView);\n}\nstatic void ThreadDispatchTextureViewRelease(WGPUTextureView textureView) {\n    perThreadProcs.textureViewRelease(textureView);\n}\n\nextern \"C\" {\n    DawnProcTable dawnThreadDispatchProcTable = {\n        ThreadDispatchCreateInstance,\n        ThreadDispatchGetProcAddress,\n        ThreadDispatchAdapterCreateDevice,\n        ThreadDispatchAdapterEnumerateFeatures,\n        ThreadDispatchAdapterGetInstance,\n        ThreadDispatchAdapterGetLimits,\n        ThreadDispatchAdapterGetProperties,\n        ThreadDispatchAdapterHasFeature,\n        ThreadDispatchAdapterRequestDevice,\n        ThreadDispatchAdapterReference,\n        ThreadDispatchAdapterRelease,\n        ThreadDispatchBindGroupSetLabel,\n        ThreadDispatchBindGroupReference,\n        ThreadDispatchBindGroupRelease,\n        ThreadDispatchBindGroupLayoutSetLabel,\n        ThreadDispatchBindGroupLayoutReference,\n        ThreadDispatchBindGroupLayoutRelease,\n        ThreadDispatchBufferDestroy,\n        ThreadDispatchBufferGetConstMappedRange,\n        ThreadDispatchBufferGetMapState,\n        ThreadDispatchBufferGetMappedRange,\n        ThreadDispatchBufferGetSize,\n        ThreadDispatchBufferGetUsage,\n        ThreadDispatchBufferMapAsync,\n        ThreadDispatchBufferSetLabel,\n        ThreadDispatchBufferUnmap,\n        ThreadDispatchBufferReference,\n        ThreadDispatchBufferRelease,\n        ThreadDispatchCommandBufferSetLabel,\n        ThreadDispatchCommandBufferReference,\n        ThreadDispatchCommandBufferRelease,\n        ThreadDispatchCommandEncoderBeginComputePass,\n        ThreadDispatchCommandEncoderBeginRenderPass,\n        ThreadDispatchCommandEncoderClearBuffer,\n        ThreadDispatchCommandEncoderCopyBufferToBuffer,\n        ThreadDispatchCommandEncoderCopyBufferToTexture,\n        ThreadDispatchCommandEncoderCopyTextureToBuffer,\n        ThreadDispatchCommandEncoderCopyTextureToTexture,\n        ThreadDispatchCommandEncoderCopyTextureToTextureInternal,\n        ThreadDispatchCommandEncoderFinish,\n        ThreadDispatchCommandEncoderInjectValidationError,\n        ThreadDispatchCommandEncoderInsertDebugMarker,\n        ThreadDispatchCommandEncoderPopDebugGroup,\n        ThreadDispatchCommandEncoderPushDebugGroup,\n        ThreadDispatchCommandEncoderResolveQuerySet,\n        ThreadDispatchCommandEncoderSetLabel,\n        ThreadDispatchCommandEncoderWriteBuffer,\n        ThreadDispatchCommandEncoderWriteTimestamp,\n        ThreadDispatchCommandEncoderReference,\n        ThreadDispatchCommandEncoderRelease,\n        ThreadDispatchComputePassEncoderDispatchWorkgroups,\n        ThreadDispatchComputePassEncoderDispatchWorkgroupsIndirect,\n        ThreadDispatchComputePassEncoderEnd,\n        ThreadDispatchComputePassEncoderInsertDebugMarker,\n        ThreadDispatchComputePassEncoderPopDebugGroup,\n        ThreadDispatchComputePassEncoderPushDebugGroup,\n        ThreadDispatchComputePassEncoderSetBindGroup,\n        ThreadDispatchComputePassEncoderSetLabel,\n        ThreadDispatchComputePassEncoderSetPipeline,\n        ThreadDispatchComputePassEncoderWriteTimestamp,\n        ThreadDispatchComputePassEncoderReference,\n        ThreadDispatchComputePassEncoderRelease,\n        ThreadDispatchComputePipelineGetBindGroupLayout,\n        ThreadDispatchComputePipelineSetLabel,\n        ThreadDispatchComputePipelineReference,\n        ThreadDispatchComputePipelineRelease,\n        ThreadDispatchDeviceCreateBindGroup,\n        ThreadDispatchDeviceCreateBindGroupLayout,\n        ThreadDispatchDeviceCreateBuffer,\n        ThreadDispatchDeviceCreateCommandEncoder,\n        ThreadDispatchDeviceCreateComputePipeline,\n        ThreadDispatchDeviceCreateComputePipelineAsync,\n        ThreadDispatchDeviceCreateErrorBuffer,\n        ThreadDispatchDeviceCreateErrorExternalTexture,\n        ThreadDispatchDeviceCreateErrorShaderModule,\n        ThreadDispatchDeviceCreateErrorTexture,\n        ThreadDispatchDeviceCreateExternalTexture,\n        ThreadDispatchDeviceCreatePipelineLayout,\n        ThreadDispatchDeviceCreateQuerySet,\n        ThreadDispatchDeviceCreateRenderBundleEncoder,\n        ThreadDispatchDeviceCreateRenderPipeline,\n        ThreadDispatchDeviceCreateRenderPipelineAsync,\n        ThreadDispatchDeviceCreateSampler,\n        ThreadDispatchDeviceCreateShaderModule,\n        ThreadDispatchDeviceCreateSwapChain,\n        ThreadDispatchDeviceCreateTexture,\n        ThreadDispatchDeviceDestroy,\n        ThreadDispatchDeviceEnumerateFeatures,\n        ThreadDispatchDeviceForceLoss,\n        ThreadDispatchDeviceGetAdapter,\n        ThreadDispatchDeviceGetLimits,\n        ThreadDispatchDeviceGetQueue,\n        ThreadDispatchDeviceGetSupportedSurfaceUsage,\n        ThreadDispatchDeviceHasFeature,\n        ThreadDispatchDeviceInjectError,\n        ThreadDispatchDevicePopErrorScope,\n        ThreadDispatchDevicePushErrorScope,\n        ThreadDispatchDeviceSetDeviceLostCallback,\n        ThreadDispatchDeviceSetLabel,\n        ThreadDispatchDeviceSetLoggingCallback,\n        ThreadDispatchDeviceSetUncapturedErrorCallback,\n        ThreadDispatchDeviceTick,\n        ThreadDispatchDeviceValidateTextureDescriptor,\n        ThreadDispatchDeviceReference,\n        ThreadDispatchDeviceRelease,\n        ThreadDispatchExternalTextureDestroy,\n        ThreadDispatchExternalTextureExpire,\n        ThreadDispatchExternalTextureRefresh,\n        ThreadDispatchExternalTextureSetLabel,\n        ThreadDispatchExternalTextureReference,\n        ThreadDispatchExternalTextureRelease,\n        ThreadDispatchInstanceCreateSurface,\n        ThreadDispatchInstanceProcessEvents,\n        ThreadDispatchInstanceRequestAdapter,\n        ThreadDispatchInstanceReference,\n        ThreadDispatchInstanceRelease,\n        ThreadDispatchPipelineLayoutSetLabel,\n        ThreadDispatchPipelineLayoutReference,\n        ThreadDispatchPipelineLayoutRelease,\n        ThreadDispatchQuerySetDestroy,\n        ThreadDispatchQuerySetGetCount,\n        ThreadDispatchQuerySetGetType,\n        ThreadDispatchQuerySetSetLabel,\n        ThreadDispatchQuerySetReference,\n        ThreadDispatchQuerySetRelease,\n        ThreadDispatchQueueCopyExternalTextureForBrowser,\n        ThreadDispatchQueueCopyTextureForBrowser,\n        ThreadDispatchQueueOnSubmittedWorkDone,\n        ThreadDispatchQueueSetLabel,\n        ThreadDispatchQueueSubmit,\n        ThreadDispatchQueueWriteBuffer,\n        ThreadDispatchQueueWriteTexture,\n        ThreadDispatchQueueReference,\n        ThreadDispatchQueueRelease,\n        ThreadDispatchRenderBundleSetLabel,\n        ThreadDispatchRenderBundleReference,\n        ThreadDispatchRenderBundleRelease,\n        ThreadDispatchRenderBundleEncoderDraw,\n        ThreadDispatchRenderBundleEncoderDrawIndexed,\n        ThreadDispatchRenderBundleEncoderDrawIndexedIndirect,\n        ThreadDispatchRenderBundleEncoderDrawIndirect,\n        ThreadDispatchRenderBundleEncoderFinish,\n        ThreadDispatchRenderBundleEncoderInsertDebugMarker,\n        ThreadDispatchRenderBundleEncoderPopDebugGroup,\n        ThreadDispatchRenderBundleEncoderPushDebugGroup,\n        ThreadDispatchRenderBundleEncoderSetBindGroup,\n        ThreadDispatchRenderBundleEncoderSetIndexBuffer,\n        ThreadDispatchRenderBundleEncoderSetLabel,\n        ThreadDispatchRenderBundleEncoderSetPipeline,\n        ThreadDispatchRenderBundleEncoderSetVertexBuffer,\n        ThreadDispatchRenderBundleEncoderReference,\n        ThreadDispatchRenderBundleEncoderRelease,\n        ThreadDispatchRenderPassEncoderBeginOcclusionQuery,\n        ThreadDispatchRenderPassEncoderDraw,\n        ThreadDispatchRenderPassEncoderDrawIndexed,\n        ThreadDispatchRenderPassEncoderDrawIndexedIndirect,\n        ThreadDispatchRenderPassEncoderDrawIndirect,\n        ThreadDispatchRenderPassEncoderEnd,\n        ThreadDispatchRenderPassEncoderEndOcclusionQuery,\n        ThreadDispatchRenderPassEncoderExecuteBundles,\n        ThreadDispatchRenderPassEncoderInsertDebugMarker,\n        ThreadDispatchRenderPassEncoderPopDebugGroup,\n        ThreadDispatchRenderPassEncoderPushDebugGroup,\n        ThreadDispatchRenderPassEncoderSetBindGroup,\n        ThreadDispatchRenderPassEncoderSetBlendConstant,\n        ThreadDispatchRenderPassEncoderSetIndexBuffer,\n        ThreadDispatchRenderPassEncoderSetLabel,\n        ThreadDispatchRenderPassEncoderSetPipeline,\n        ThreadDispatchRenderPassEncoderSetScissorRect,\n        ThreadDispatchRenderPassEncoderSetStencilReference,\n        ThreadDispatchRenderPassEncoderSetVertexBuffer,\n        ThreadDispatchRenderPassEncoderSetViewport,\n        ThreadDispatchRenderPassEncoderWriteTimestamp,\n        ThreadDispatchRenderPassEncoderReference,\n        ThreadDispatchRenderPassEncoderRelease,\n        ThreadDispatchRenderPipelineGetBindGroupLayout,\n        ThreadDispatchRenderPipelineSetLabel,\n        ThreadDispatchRenderPipelineReference,\n        ThreadDispatchRenderPipelineRelease,\n        ThreadDispatchSamplerSetLabel,\n        ThreadDispatchSamplerReference,\n        ThreadDispatchSamplerRelease,\n        ThreadDispatchShaderModuleGetCompilationInfo,\n        ThreadDispatchShaderModuleSetLabel,\n        ThreadDispatchShaderModuleReference,\n        ThreadDispatchShaderModuleRelease,\n        ThreadDispatchSurfaceReference,\n        ThreadDispatchSurfaceRelease,\n        ThreadDispatchSwapChainGetCurrentTexture,\n        ThreadDispatchSwapChainGetCurrentTextureView,\n        ThreadDispatchSwapChainPresent,\n        ThreadDispatchSwapChainReference,\n        ThreadDispatchSwapChainRelease,\n        ThreadDispatchTextureCreateView,\n        ThreadDispatchTextureDestroy,\n        ThreadDispatchTextureGetDepthOrArrayLayers,\n        ThreadDispatchTextureGetDimension,\n        ThreadDispatchTextureGetFormat,\n        ThreadDispatchTextureGetHeight,\n        ThreadDispatchTextureGetMipLevelCount,\n        ThreadDispatchTextureGetSampleCount,\n        ThreadDispatchTextureGetUsage,\n        ThreadDispatchTextureGetWidth,\n        ThreadDispatchTextureSetLabel,\n        ThreadDispatchTextureReference,\n        ThreadDispatchTextureRelease,\n        ThreadDispatchTextureViewSetLabel,\n        ThreadDispatchTextureViewReference,\n        ThreadDispatchTextureViewRelease,\n    };\n}\n"}