// RUN: %dxc -T hs_6_0 -E SubDToBezierHS %s | FileCheck %s

#define MAX_POINTS 3

// Input control point
struct VS_CONTROL_POINT_OUTPUT
{
  float3 vPosition : WORLDPOS;
  float2 vUV       : TEXCOORD0;
  float3 vTangent  : TANGENT;
};

// Output control point
struct BEZIER_CONTROL_POINT
{
  float3 vPosition	: BEZIERPOS;
};

// Output patch constant data.
struct HS_CONSTANT_DATA_OUTPUT
{
  float Edges[4]        : SV_TessFactor;
  float Inside[2]       : SV_InsideTessFactor;

  float3 vTangent[4]    : TANGENT;
  float2 vUV[4]         : TEXCOORD;
  float3 vTanUCorner[4] : TANUCORNER;
  float3 vTanVCorner[4] : TANVCORNER;
  float4 vCWts          : TANWEIGHTS;
};

// Patch Constant Function
HS_CONSTANT_DATA_OUTPUT SubDToBezierConstantsHS(InputPatch<VS_CONTROL_POINT_OUTPUT, MAX_POINTS> ip, uint PatchID : SV_PrimitiveID) {
  HS_CONSTANT_DATA_OUTPUT Output;

  // Must initialize Edges and Inside; otherwise HLSL validation will fail.
  Output.Edges[0]  = 1.0;
  Output.Edges[1]  = 2.0;
  Output.Edges[2]  = 3.0;
  Output.Edges[3]  = 4.0;
  Output.Inside[0] = 5.0;
  Output.Inside[1] = 6.0;

  return Output;
}

[domain("quad")]
[partitioning("fractional_odd")]
[outputtopology("triangle_ccw")]
[outputcontrolpoints(MAX_POINTS)]
[patchconstantfunc("SubDToBezierConstantsHS")]
BEZIER_CONTROL_POINT SubDToBezierHS(InputPatch<VS_CONTROL_POINT_OUTPUT, MAX_POINTS> ip, uint cpid : SV_OutputControlPointID, uint PatchID : SV_PrimitiveID) {
  VS_CONTROL_POINT_OUTPUT vsOutput;
  BEZIER_CONTROL_POINT result;
  result.vPosition = vsOutput.vPosition;
  return result;
}

// CHECK-WHOLE-SPIR-V:
//                OpCapability Tessellation
//                OpMemoryModel Logical GLSL450
//                OpEntryPoint TessellationControl %SubDToBezierHS "SubDToBezierHS" %in_var_WORLDPOS %in_var_TEXCOORD0 %in_var_TANGENT %gl_InvocationID %gl_PrimitiveID %out_var_BEZIERPOS %gl_TessLevelOuter %gl_TessLevelInner %out_var_TANGENT %out_var_TEXCOORD %out_var_TANUCORNER %out_var_TANVCORNER %out_var_TANWEIGHTS
//                OpExecutionMode %SubDToBezierHS Quads
//                OpExecutionMode %SubDToBezierHS SpacingFractionalOdd
//                OpExecutionMode %SubDToBezierHS VertexOrderCcw
//                OpExecutionMode %SubDToBezierHS OutputVertices 3
//                OpSource HLSL 600
//                OpName %in_var_WORLDPOS "in.var.WORLDPOS"
//                OpName %in_var_TEXCOORD0 "in.var.TEXCOORD0"
//                OpName %in_var_TANGENT "in.var.TANGENT"
//                OpName %out_var_BEZIERPOS "out.var.BEZIERPOS"
//                OpName %out_var_TANGENT "out.var.TANGENT"
//                OpName %out_var_TEXCOORD "out.var.TEXCOORD"
//                OpName %out_var_TANUCORNER "out.var.TANUCORNER"
//                OpName %out_var_TANVCORNER "out.var.TANVCORNER"
//                OpName %out_var_TANWEIGHTS "out.var.TANWEIGHTS"
//                OpName %SubDToBezierHS "SubDToBezierHS"
//                OpName %VS_CONTROL_POINT_OUTPUT "VS_CONTROL_POINT_OUTPUT"
//                OpMemberName %VS_CONTROL_POINT_OUTPUT 0 "vPosition"
//                OpMemberName %VS_CONTROL_POINT_OUTPUT 1 "vUV"
//                OpMemberName %VS_CONTROL_POINT_OUTPUT 2 "vTangent"
//                OpName %param_var_ip "param.var.ip"
//                OpName %param_var_cpid "param.var.cpid"
//                OpName %param_var_PatchID "param.var.PatchID"
//                OpName %BEZIER_CONTROL_POINT "BEZIER_CONTROL_POINT"
//                OpMemberName %BEZIER_CONTROL_POINT 0 "vPosition"
//                OpName %if_true "if.true"
//                OpName %HS_CONSTANT_DATA_OUTPUT "HS_CONSTANT_DATA_OUTPUT"
//                OpMemberName %HS_CONSTANT_DATA_OUTPUT 0 "Edges"
//                OpMemberName %HS_CONSTANT_DATA_OUTPUT 1 "Inside"
//                OpMemberName %HS_CONSTANT_DATA_OUTPUT 2 "vTangent"
//                OpMemberName %HS_CONSTANT_DATA_OUTPUT 3 "vUV"
//                OpMemberName %HS_CONSTANT_DATA_OUTPUT 4 "vTanUCorner"
//                OpMemberName %HS_CONSTANT_DATA_OUTPUT 5 "vTanVCorner"
//                OpMemberName %HS_CONSTANT_DATA_OUTPUT 6 "vCWts"
//                OpName %if_merge "if.merge"
//                OpName %SubDToBezierConstantsHS "SubDToBezierConstantsHS"
//                OpName %ip "ip"
//                OpName %PatchID "PatchID"
//                OpName %bb_entry "bb.entry"
//                OpName %Output "Output"
//                OpName %src_SubDToBezierHS "src.SubDToBezierHS"
//                OpName %ip_0 "ip"
//                OpName %cpid "cpid"
//                OpName %PatchID_0 "PatchID"
//                OpName %bb_entry_0 "bb.entry"
//                OpName %vsOutput "vsOutput"
//                OpName %result "result"
//                OpDecorate %gl_InvocationID BuiltIn InvocationId
//                OpDecorate %gl_PrimitiveID BuiltIn PrimitiveId
//                OpDecorate %gl_TessLevelOuter BuiltIn TessLevelOuter
//                OpDecorate %gl_TessLevelOuter Patch
//                OpDecorate %gl_TessLevelInner BuiltIn TessLevelInner
//                OpDecorate %gl_TessLevelInner Patch
//                OpDecorate %out_var_TANGENT Patch
//                OpDecorate %out_var_TEXCOORD Patch
//                OpDecorate %out_var_TANUCORNER Patch
//                OpDecorate %out_var_TANVCORNER Patch
//                OpDecorate %out_var_TANWEIGHTS Patch
//                OpDecorate %in_var_WORLDPOS Location 0
//                OpDecorate %in_var_TEXCOORD0 Location 1
//                OpDecorate %in_var_TANGENT Location 2
//                OpDecorate %out_var_BEZIERPOS Location 0
//                OpDecorate %out_var_TANGENT Location 1
//                OpDecorate %out_var_TANUCORNER Location 5
//                OpDecorate %out_var_TANVCORNER Location 9
//                OpDecorate %out_var_TANWEIGHTS Location 13
//                OpDecorate %out_var_TEXCOORD Location 14
//        %uint = OpTypeInt 32 0
//      %uint_0 = OpConstant %uint 0
//       %float = OpTypeFloat 32
//     %float_1 = OpConstant %float 1
//         %int = OpTypeInt 32 1
//       %int_0 = OpConstant %int 0
//     %float_2 = OpConstant %float 2
//       %int_1 = OpConstant %int 1
//     %float_3 = OpConstant %float 3
//       %int_2 = OpConstant %int 2
//     %float_4 = OpConstant %float 4
//       %int_3 = OpConstant %int 3
//     %float_5 = OpConstant %float 5
//     %float_6 = OpConstant %float 6
//      %uint_3 = OpConstant %uint 3
//     %v3float = OpTypeVector %float 3
// %_arr_v3float_uint_3 = OpTypeArray %v3float %uint_3
// %_ptr_Input__arr_v3float_uint_3 = OpTypePointer Input %_arr_v3float_uint_3
//     %v2float = OpTypeVector %float 2
// %_arr_v2float_uint_3 = OpTypeArray %v2float %uint_3
// %_ptr_Input__arr_v2float_uint_3 = OpTypePointer Input %_arr_v2float_uint_3
// %_ptr_Input_uint = OpTypePointer Input %uint
// %_ptr_Output__arr_v3float_uint_3 = OpTypePointer Output %_arr_v3float_uint_3
//      %uint_4 = OpConstant %uint 4
// %_arr_float_uint_4 = OpTypeArray %float %uint_4
// %_ptr_Output__arr_float_uint_4 = OpTypePointer Output %_arr_float_uint_4
//      %uint_2 = OpConstant %uint 2
// %_arr_float_uint_2 = OpTypeArray %float %uint_2
// %_ptr_Output__arr_float_uint_2 = OpTypePointer Output %_arr_float_uint_2
// %_arr_v3float_uint_4 = OpTypeArray %v3float %uint_4
// %_ptr_Output__arr_v3float_uint_4 = OpTypePointer Output %_arr_v3float_uint_4
// %_arr_v2float_uint_4 = OpTypeArray %v2float %uint_4
// %_ptr_Output__arr_v2float_uint_4 = OpTypePointer Output %_arr_v2float_uint_4
//     %v4float = OpTypeVector %float 4
// %_ptr_Output_v4float = OpTypePointer Output %v4float
//        %void = OpTypeVoid
//          %51 = OpTypeFunction %void
// %VS_CONTROL_POINT_OUTPUT = OpTypeStruct %v3float %v2float %v3float
// %_arr_VS_CONTROL_POINT_OUTPUT_uint_3 = OpTypeArray %VS_CONTROL_POINT_OUTPUT %uint_3
// %_ptr_Function__arr_VS_CONTROL_POINT_OUTPUT_uint_3 = OpTypePointer Function %_arr_VS_CONTROL_POINT_OUTPUT_uint_3
// %_ptr_Function_uint = OpTypePointer Function %uint
// %BEZIER_CONTROL_POINT = OpTypeStruct %v3float
// %_ptr_Output_v3float = OpTypePointer Output %v3float
//        %bool = OpTypeBool
// %HS_CONSTANT_DATA_OUTPUT = OpTypeStruct %_arr_float_uint_4 %_arr_float_uint_2 %_arr_v3float_uint_4 %_arr_v2float_uint_4 %_arr_v3float_uint_4 %_arr_v3float_uint_4 %v4float
//          %98 = OpTypeFunction %HS_CONSTANT_DATA_OUTPUT %_ptr_Function__arr_VS_CONTROL_POINT_OUTPUT_uint_3 %_ptr_Function_uint
// %_ptr_Function_HS_CONSTANT_DATA_OUTPUT = OpTypePointer Function %HS_CONSTANT_DATA_OUTPUT
// %_ptr_Function_float = OpTypePointer Function %float
//         %112 = OpTypeFunction %BEZIER_CONTROL_POINT %_ptr_Function__arr_VS_CONTROL_POINT_OUTPUT_uint_3 %_ptr_Function_uint %_ptr_Function_uint
// %_ptr_Function_VS_CONTROL_POINT_OUTPUT = OpTypePointer Function %VS_CONTROL_POINT_OUTPUT
// %_ptr_Function_BEZIER_CONTROL_POINT = OpTypePointer Function %BEZIER_CONTROL_POINT
// %_ptr_Function_v3float = OpTypePointer Function %v3float
// %in_var_WORLDPOS = OpVariable %_ptr_Input__arr_v3float_uint_3 Input
// %in_var_TEXCOORD0 = OpVariable %_ptr_Input__arr_v2float_uint_3 Input
// %in_var_TANGENT = OpVariable %_ptr_Input__arr_v3float_uint_3 Input
// %gl_InvocationID = OpVariable %_ptr_Input_uint Input
// %gl_PrimitiveID = OpVariable %_ptr_Input_uint Input
// %out_var_BEZIERPOS = OpVariable %_ptr_Output__arr_v3float_uint_3 Output
// %gl_TessLevelOuter = OpVariable %_ptr_Output__arr_float_uint_4 Output
// %gl_TessLevelInner = OpVariable %_ptr_Output__arr_float_uint_2 Output
// %out_var_TANGENT = OpVariable %_ptr_Output__arr_v3float_uint_4 Output
// %out_var_TEXCOORD = OpVariable %_ptr_Output__arr_v2float_uint_4 Output
// %out_var_TANUCORNER = OpVariable %_ptr_Output__arr_v3float_uint_4 Output
// %out_var_TANVCORNER = OpVariable %_ptr_Output__arr_v3float_uint_4 Output
// %out_var_TANWEIGHTS = OpVariable %_ptr_Output_v4float Output
// %SubDToBezierHS = OpFunction %void None %51
//          %52 = OpLabel
// %param_var_ip = OpVariable %_ptr_Function__arr_VS_CONTROL_POINT_OUTPUT_uint_3 Function
// %param_var_cpid = OpVariable %_ptr_Function_uint Function
// %param_var_PatchID = OpVariable %_ptr_Function_uint Function
//          %60 = OpLoad %_arr_v3float_uint_3 %in_var_WORLDPOS
//          %61 = OpLoad %_arr_v2float_uint_3 %in_var_TEXCOORD0
//          %62 = OpLoad %_arr_v3float_uint_3 %in_var_TANGENT
//          %63 = OpCompositeExtract %v3float %60 0
//          %64 = OpCompositeExtract %v2float %61 0
//          %65 = OpCompositeExtract %v3float %62 0
//          %66 = OpCompositeConstruct %VS_CONTROL_POINT_OUTPUT %63 %64 %65
//          %67 = OpCompositeExtract %v3float %60 1
//          %68 = OpCompositeExtract %v2float %61 1
//          %69 = OpCompositeExtract %v3float %62 1
//          %70 = OpCompositeConstruct %VS_CONTROL_POINT_OUTPUT %67 %68 %69
//          %71 = OpCompositeExtract %v3float %60 2
//          %72 = OpCompositeExtract %v2float %61 2
//          %73 = OpCompositeExtract %v3float %62 2
//          %74 = OpCompositeConstruct %VS_CONTROL_POINT_OUTPUT %71 %72 %73
//          %75 = OpCompositeConstruct %_arr_VS_CONTROL_POINT_OUTPUT_uint_3 %66 %70 %74
//          %76 = OpLoad %uint %gl_InvocationID
//          %77 = OpLoad %uint %gl_PrimitiveID
//          %79 = OpFunctionCall %BEZIER_CONTROL_POINT %src_SubDToBezierHS %param_var_ip %param_var_cpid %param_var_PatchID
//          %81 = OpCompositeExtract %v3float %79 0
//          %83 = OpAccessChain %_ptr_Output_v3float %out_var_BEZIERPOS %76
//                OpStore %83 %81
//                OpControlBarrier %uint_2 %uint_4 %uint_0
//          %85 = OpIEqual %bool %76 %uint_0
//                OpSelectionMerge %if_merge None
//                OpBranchConditional %85 %if_true %if_merge
//     %if_true = OpLabel
//          %89 = OpFunctionCall %HS_CONSTANT_DATA_OUTPUT %SubDToBezierConstantsHS %param_var_ip %param_var_PatchID
//          %91 = OpCompositeExtract %_arr_float_uint_4 %89 0
//                OpStore %gl_TessLevelOuter %91
//          %92 = OpCompositeExtract %_arr_float_uint_2 %89 1
//                OpStore %gl_TessLevelInner %92
//          %93 = OpCompositeExtract %_arr_v3float_uint_4 %89 2
//                OpStore %out_var_TANGENT %93
//          %94 = OpCompositeExtract %_arr_v2float_uint_4 %89 3
//                OpStore %out_var_TEXCOORD %94
//          %95 = OpCompositeExtract %_arr_v3float_uint_4 %89 4
//                OpStore %out_var_TANUCORNER %95
//          %96 = OpCompositeExtract %_arr_v3float_uint_4 %89 5
//                OpStore %out_var_TANVCORNER %96
//          %97 = OpCompositeExtract %v4float %89 6
//                OpStore %out_var_TANWEIGHTS %97
//                OpBranch %if_merge
//    %if_merge = OpLabel
//                OpReturn
//                OpFunctionEnd
// %SubDToBezierConstantsHS = OpFunction %HS_CONSTANT_DATA_OUTPUT None %98
//          %ip = OpFunctionParameter %_ptr_Function__arr_VS_CONTROL_POINT_OUTPUT_uint_3
//     %PatchID = OpFunctionParameter %_ptr_Function_uint
//    %bb_entry = OpLabel
//      %Output = OpVariable %_ptr_Function_HS_CONSTANT_DATA_OUTPUT Function
//         %105 = OpAccessChain %_ptr_Function_float %Output %int_0 %int_0
//                OpStore %105 %float_1
//         %106 = OpAccessChain %_ptr_Function_float %Output %int_0 %int_1
//                OpStore %106 %float_2
//         %107 = OpAccessChain %_ptr_Function_float %Output %int_0 %int_2
//                OpStore %107 %float_3
//         %108 = OpAccessChain %_ptr_Function_float %Output %int_0 %int_3
//                OpStore %108 %float_4
//         %109 = OpAccessChain %_ptr_Function_float %Output %int_1 %int_0
//                OpStore %109 %float_5
//         %110 = OpAccessChain %_ptr_Function_float %Output %int_1 %int_1
//                OpStore %110 %float_6
//         %111 = OpLoad %HS_CONSTANT_DATA_OUTPUT %Output
//                OpReturnValue %111
//                OpFunctionEnd
// %src_SubDToBezierHS = OpFunction %BEZIER_CONTROL_POINT None %112
//        %ip_0 = OpFunctionParameter %_ptr_Function__arr_VS_CONTROL_POINT_OUTPUT_uint_3
//        %cpid = OpFunctionParameter %_ptr_Function_uint
//   %PatchID_0 = OpFunctionParameter %_ptr_Function_uint
//  %bb_entry_0 = OpLabel
//    %vsOutput = OpVariable %_ptr_Function_VS_CONTROL_POINT_OUTPUT Function
//      %result = OpVariable %_ptr_Function_BEZIER_CONTROL_POINT Function
//         %122 = OpAccessChain %_ptr_Function_v3float %vsOutput %int_0
//         %123 = OpLoad %v3float %122
//         %124 = OpAccessChain %_ptr_Function_v3float %result %int_0
//                OpStore %124 %123
//         %125 = OpLoad %BEZIER_CONTROL_POINT %result
//                OpReturnValue %125
//                OpFunctionEnd
